var beepbox=function(t){"use strict";
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
var beepbox = function(t) {
    "use strict";
    /*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */
    var e = t && t.t || function(t, e, i, n) {
        return new (i || (i = Promise))((function(s, o) {
            function a(t) {
                try {
                    h(n.next(t))
                } catch (t) {
                    o(t)
                }
            }
            function r(t) {
                try {
                    h(n.throw(t))
                } catch (t) {
                    o(t)
                }
            }
            function h(t) {
                var e;
                t.done ? s(t.value) : (e = t.value,
                e instanceof i ? e : new i((function(t) {
                    t(e)
                }
                ))).then(a, r)
            }
            h((n = n.apply(t, e || [])).next())
        }
        ))
    }
    ;
    const i = ["chip", "FM", "noise", "spectrum", "drumset", "harmonics", "pulse width", "picked string", "supersaw", "chip (custom)", "mod", "FM (6-op)"];
    function n(t) {
        switch (t) {
        case 0:
            return "loading";
        case 1:
            return "loaded";
        case 2:
            return "error"
        }
    }
    const s = new class {
        constructor() {
            this.statusTable = {},
            this.urlTable = {},
            this.totalSamples = 0,
            this.samplesLoaded = 0
        }
    }
    ;
    class o extends Event {
        constructor(t, e) {
            super("sampleloaded"),
            this.totalSamples = t,
            this.samplesLoaded = e
        }
    }
    class a extends EventTarget {
        constructor() {
            super()
        }
    }
    const r = new a;
    function h(t, i, n, a, h) {
        return e(this, void 0, void 0, (function*() {
            const e = new AudioContext({
                sampleRate: h
            });
            let l = !1;
            const c = p.chipWaves[i]
              , d = p.rawChipWaves[i]
              , u = p.rawRawChipWaves[i];
            fetch(t).then((t => t.ok ? t.arrayBuffer() : (s.statusTable[i] = 2,
            Promise.reject(new Error("Couldn't load sample"))))).then((t => e.decodeAudioData(t))).then((t => {
                const h = m(Array.from(t.getChannelData(0)))
                  , p = f(h);
                c.samples = p,
                d.samples = h,
                u.samples = h,
                a.isUsingAdvancedLoopControls && (n.chipWaveLoopStart = null != a.chipWaveLoopStart ? a.chipWaveLoopStart : 0,
                n.chipWaveLoopEnd = null != a.chipWaveLoopEnd ? a.chipWaveLoopEnd : h.length - 1,
                n.chipWaveLoopMode = null != a.chipWaveLoopMode ? a.chipWaveLoopMode : 0,
                n.chipWavePlayBackwards = a.chipWavePlayBackwards,
                n.chipWaveStartOffset = null != a.chipWaveStartOffset ? a.chipWaveStartOffset : 0),
                s.samplesLoaded++,
                s.statusTable[i] = 1,
                r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded)),
                l || (l = !0,
                e.close())
            }
            )).catch((n => {
                s.statusTable[i] = 2,
                alert("Failed to load " + t + ":\n" + n),
                l || (l = !0,
                e.close())
            }
            ))
        }
        ))
    }
    function l(t, e) {
        let i = localStorage.getItem(t);
        return null != i && "null" !== i && "undefined" !== i || (i = e),
        i
    }
    function c(t) {
        return new Promise(( (e, i) => {
            if (!p.willReloadForCustomSamples) {
                const i = document.createElement("script");
                i.src = t,
                document.head.appendChild(i),
                i.addEventListener("load", (t => {
                    e()
                }
                ))
            }
        }
        ))
    }
    function d(t) {
        const e = p.chipWaves[0].samples
          , i = p.rawRawChipWaves[0].samples;
        if (0 == t) {
            const t = [{
                name: "paandorasbox kick",
                expression: 4,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox snare",
                expression: 3,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox piano1",
                expression: 3,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 2
            }, {
                name: "paandorasbox WOW",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox overdrive",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -2
            }, {
                name: "paandorasbox trumpet",
                expression: 3,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 1.2
            }, {
                name: "paandorasbox saxophone",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -5
            }, {
                name: "paandorasbox orchestrahit",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 4.2
            }, {
                name: "paandorasbox detatched violin",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 4.2
            }, {
                name: "paandorasbox synth",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -.8
            }, {
                name: "paandorasbox sonic3snare",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox come on",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox choir",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -3
            }, {
                name: "paandorasbox overdriveguitar",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -6.2
            }, {
                name: "paandorasbox flute",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -6
            }, {
                name: "paandorasbox legato violin",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -28
            }, {
                name: "paandorasbox tremolo violin",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -33
            }, {
                name: "paandorasbox amen break",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -55
            }, {
                name: "paandorasbox pizzicato violin",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -11
            }, {
                name: "paandorasbox tim allen grunt",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -20
            }, {
                name: "paandorasbox tuba",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 44
            }, {
                name: "paandorasbox loopingcymbal",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -17
            }, {
                name: "paandorasbox standardkick",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -7
            }, {
                name: "paandorasbox standardsnare",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "paandorasbox closedhihat",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 5
            }, {
                name: "paandorasbox foothihat",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 4
            }, {
                name: "paandorasbox openhihat",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -31
            }, {
                name: "paandorasbox crashcymbal",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -43
            }, {
                name: "paandorasbox pianoC4",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -42.5
            }, {
                name: "paandorasbox liver pad",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -22.5
            }, {
                name: "paandorasbox marimba",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -15.5
            }, {
                name: "paandorasbox susdotwav",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -24.5
            }, {
                name: "paandorasbox wackyboxtts",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -17.5
            }, {
                name: "paandorasbox peppersteak_1",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -42.2
            }, {
                name: "paandorasbox peppersteak_2",
                expression: 2,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -47
            }, {
                name: "paandorasbox vinyl_noise",
                expression: 2,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -50
            }, {
                name: "paandorasbeta slap bass",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -56
            }, {
                name: "paandorasbeta HD EB overdrive guitar",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -60
            }, {
                name: "paandorasbeta sunsoft bass",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -18.5
            }, {
                name: "paandorasbeta masculine choir",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -50
            }, {
                name: "paandorasbeta feminine choir",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -60.5
            }, {
                name: "paandorasbeta tololoche",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -29.5
            }, {
                name: "paandorasbeta harp",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -54
            }, {
                name: "paandorasbeta pan flute",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -58
            }, {
                name: "paandorasbeta krumhorn",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -46
            }, {
                name: "paandorasbeta timpani",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -50
            }, {
                name: "paandorasbeta crowd hey",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -29
            }, {
                name: "paandorasbeta wario land 4 brass",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -68
            }, {
                name: "paandorasbeta wario land 4 rock organ",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -63
            }, {
                name: "paandorasbeta wario land 4 DAOW",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -35
            }, {
                name: "paandorasbeta wario land 4 hour chime",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -47.5
            }, {
                name: "paandorasbeta wario land 4 tick",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -12.5
            }, {
                name: "paandorasbeta kirby kick",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -46.5
            }, {
                name: "paandorasbeta kirby snare",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -46.5
            }, {
                name: "paandorasbeta kirby bongo",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -46.5
            }, {
                name: "paandorasbeta kirby click",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -46.5
            }, {
                name: "paandorasbeta sonor kick",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -28.5
            }, {
                name: "paandorasbeta sonor snare",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -28.5
            }, {
                name: "paandorasbeta sonor snare (left hand)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -22.5
            }, {
                name: "paandorasbeta sonor snare (right hand)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -22.5
            }, {
                name: "paandorasbeta sonor high tom",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -41.5
            }, {
                name: "paandorasbeta sonor low tom",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -41.5
            }, {
                name: "paandorasbeta sonor hihat (closed)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -17
            }, {
                name: "paandorasbeta sonor hihat (half opened)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -21
            }, {
                name: "paandorasbeta sonor hihat (open)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -54.5
            }, {
                name: "paandorasbeta sonor hihat (open tip)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -43.5
            }, {
                name: "paandorasbeta sonor hihat (pedal)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -28
            }, {
                name: "paandorasbeta sonor crash",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -51
            }, {
                name: "paandorasbeta sonor crash (tip)",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -50.5
            }, {
                name: "paandorasbeta sonor ride",
                expression: 1,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: -46
            }];
            s.totalSamples += t.length;
            const n = p.rawRawChipWaves.length;
            for (const n of t) {
                const t = p.rawRawChipWaves.length
                  , o = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , a = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , r = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: e
                };
                p.rawRawChipWaves[t] = a,
                p.rawRawChipWaves.dictionary[n.name] = a,
                p.rawChipWaves[t] = o,
                p.rawChipWaves.dictionary[n.name] = o,
                p.chipWaves[t] = r,
                p.chipWaves.dictionary[n.name] = o,
                s.statusTable[t] = 0,
                s.urlTable[t] = "legacySamples"
            }
            c("samples.js").then(( () => c("samples2.js"))).then(( () => c("samples3.js"))).then(( () => c("drumsamples.js"))).then(( () => c("wario_samples.js"))).then(( () => c("kirby_samples.js"))).then(( () => {
                const t = [m(kicksample), m(snaresample), m(pianosample), m(WOWsample), m(overdrivesample), m(trumpetsample), m(saxophonesample), m(orchhitsample), m(detatchedviolinsample), m(synthsample), m(sonic3snaresample), m(comeonsample), m(choirsample), m(overdrivensample), m(flutesample), m(legatoviolinsample), m(tremoloviolinsample), m(amenbreaksample), m(pizzicatoviolinsample), m(timallengruntsample), m(tubasample), m(loopingcymbalsample), m(kickdrumsample), m(snaredrumsample), m(closedhihatsample), m(foothihatsample), m(openhihatsample), m(crashsample), m(pianoC4sample), m(liverpadsample), m(marimbasample), m(susdotwavsample), m(wackyboxttssample), m(peppersteak1), m(peppersteak2), m(vinyl), m(slapbass), m(hdeboverdrive), m(sunsoftbass), m(masculinechoir), m(femininechoir), m(southtololoche), m(harp), m(panflute), m(krumhorn), m(timpani), m(crowdhey), m(warioland4brass), m(warioland4organ), m(warioland4daow), m(warioland4hourchime), m(warioland4tick), m(kirbykick), m(kirbysnare), m(kirbybongo), m(kirbyclick), m(funkkick), m(funksnare), m(funksnareleft), m(funksnareright), m(funktomhigh), m(funktomlow), m(funkhihatclosed), m(funkhihathalfopen), m(funkhihatopen), m(funkhihatopentip), m(funkhihatfoot), m(funkcrash), m(funkcrashtip), m(funkride)];
                let e = 0;
                for (const i of t) {
                    const t = n + e;
                    p.rawChipWaves[t].samples = i,
                    p.rawRawChipWaves[t].samples = i,
                    p.chipWaves[t].samples = f(i),
                    s.statusTable[t] = 1,
                    s.samplesLoaded++,
                    r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded)),
                    e++
                }
            }
            ))
        } else if (1 == t) {
            const t = [{
                name: "chronoperc1final",
                expression: 4,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "synthkickfm",
                expression: 4,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "mcwoodclick1",
                expression: 4,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }, {
                name: "acoustic snare",
                expression: 4,
                isSampled: !0,
                isPercussion: !0,
                extraSampleDetune: 0
            }];
            s.totalSamples += t.length;
            const n = p.rawRawChipWaves.length;
            for (const n of t) {
                const t = p.rawRawChipWaves.length
                  , o = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , a = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , r = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: e
                };
                p.rawRawChipWaves[t] = a,
                p.rawRawChipWaves.dictionary[n.name] = a,
                p.rawChipWaves[t] = o,
                p.rawChipWaves.dictionary[n.name] = o,
                p.chipWaves[t] = r,
                p.chipWaves.dictionary[n.name] = o,
                s.statusTable[t] = 0,
                s.urlTable[t] = "nintariboxSamples"
            }
            c("nintaribox_samples.js").then(( () => {
                const t = [m(chronoperc1finalsample), m(synthkickfmsample), m(woodclicksample), m(acousticsnaresample)];
                let e = 0;
                for (const i of t) {
                    const t = n + e;
                    p.rawChipWaves[t].samples = i,
                    p.rawRawChipWaves[t].samples = i,
                    p.chipWaves[t].samples = f(i),
                    s.statusTable[t] = 1,
                    s.samplesLoaded++,
                    r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded)),
                    e++
                }
            }
            ))
        } else if (2 == t) {
            const t = [{
                name: "cat",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -3
            }, {
                name: "gameboy",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 7
            }, {
                name: "mario",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 0
            }, {
                name: "drum",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 4
            }, {
                name: "yoshi",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -16
            }, {
                name: "star",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -16
            }, {
                name: "fire flower",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -1
            }, {
                name: "dog",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -1
            }, {
                name: "oink",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 3
            }, {
                name: "swan",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: 1
            }, {
                name: "face",
                expression: 1,
                isSampled: !0,
                isPercussion: !1,
                extraSampleDetune: -12
            }];
            s.totalSamples += t.length;
            const n = p.rawRawChipWaves.length;
            for (const n of t) {
                const t = p.rawRawChipWaves.length
                  , o = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , a = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: i
                }
                  , r = {
                    index: t,
                    name: n.name,
                    expression: n.expression,
                    isSampled: n.isSampled,
                    isPercussion: n.isPercussion,
                    extraSampleDetune: n.extraSampleDetune,
                    samples: e
                };
                p.rawRawChipWaves[t] = a,
                p.rawRawChipWaves.dictionary[n.name] = a,
                p.rawChipWaves[t] = o,
                p.rawChipWaves.dictionary[n.name] = o,
                p.chipWaves[t] = r,
                p.chipWaves.dictionary[n.name] = o,
                s.statusTable[t] = 0,
                s.urlTable[t] = "marioPaintboxSamples"
            }
            c("mario_paintbox_samples.js").then(( () => {
                const t = [m(catpaintboxsample), m(gameboypaintboxsample), m(mariopaintboxsample), m(drumpaintboxsample), m(yoshipaintboxsample), m(starpaintboxsample), m(fireflowerpaintboxsample), m(dogpaintbox), m(oinkpaintbox), m(swanpaintboxsample), m(facepaintboxsample)];
                let e = 0;
                for (const i of t) {
                    const t = n + e;
                    p.rawChipWaves[t].samples = i,
                    p.rawRawChipWaves[t].samples = i,
                    p.chipWaves[t].samples = f(i),
                    s.statusTable[t] = 1,
                    s.samplesLoaded++,
                    r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded)),
                    e++
                }
            }
            ))
        } else
            console.log("invalid set of built-in samples")
    }
    class p {
    }
    function m(t) {
        let e = 0;
        for (let i = 0; i < t.length; i++)
            e += t[i];
        const i = e / t.length;
        for (let e = 0; e < t.length; e++)
            t[e] -= i;
        return f(t),
        t.push(0),
        new Float32Array(t)
    }
    function u(t) {
        let e = 0;
        m(t);
        for (let i = 0; i < t.length - 1; i++)
            e += Math.abs(t[i]);
        const i = e / (t.length - 1);
        for (let e = 0; e < t.length - 1; e++)
            t[e] = t[e] / i;
        return new Float32Array(t)
    }
    function f(t) {
        let e = 0
          , i = new Float32Array(t.length);
        for (let n = 0; n < t.length; n++)
            i[n] = e,
            e += t[n];
        return i
    }
    function y(t) {
        return t / (2 * p.pulseWidthRange)
    }
    function b(t, e, i) {
        let n = p.chipNoises[t].samples;
        if (null == n) {
            if (n = new Float32Array(p.chipNoiseLength + 1),
            p.chipNoises[t].samples = n,
            0 == t) {
                let t = 1;
                for (let e = 0; e < p.chipNoiseLength; e++) {
                    n[e] = 2 * (1 & t) - 1;
                    let i = t >> 1;
                    1 == (t + i & 1) && (i += 16384),
                    t = i
                }
            } else if (1 == t)
                for (let t = 0; t < p.chipNoiseLength; t++)
                    n[t] = 2 * Math.random() - 1;
            else if (2 == t) {
                let t = 1;
                for (let e = 0; e < p.chipNoiseLength; e++) {
                    n[e] = 2 * (1 & t) - 1;
                    let i = t >> 1;
                    1 == (t + i & 1) && (i += 32768),
                    t = i
                }
            } else if (3 == t) {
                let t = 1;
                for (let e = 0; e < p.chipNoiseLength; e++) {
                    n[e] = 2 * (1 & t) - 1;
                    let i = t >> 1;
                    1 == (t + i & 1) && (i += 40),
                    t = i
                }
            } else if (4 == t)
                g(n, p.chipNoiseLength, 10, 11, 1, 1, 0),
                g(n, p.chipNoiseLength, 11, 14, .6578, .6578, 0),
                e(n, p.chipNoiseLength),
                i(n, 1 / Math.sqrt(p.chipNoiseLength));
            else if (5 == t)
                for (var s = 1, o = 0; o < p.chipNoiseLength; o++) {
                    n[o] = 2 * (1 & s) - 1,
                    1 == (s + (a = s >> 1) & 1) && (a += 40),
                    s = a
                }
            else if (6 == t)
                g(n, p.chipNoiseLength, 1, 10, 1, 1, 0),
                g(n, p.chipNoiseLength, 20, 14, -2, -2, 0),
                e(n, p.chipNoiseLength),
                i(n, 1 / Math.sqrt(p.chipNoiseLength));
            else if (7 == t)
                for (s = 1,
                o = 0; o < p.chipNoiseLength; o++) {
                    n[o] = 4 * (1 & s) * (14 * Math.random() + 1) - 8,
                    1 == (s + (a = s >> 1) & 1) && (a += 60),
                    s = a
                }
            else if (8 == t)
                for (s = 1,
                o = 0; o < p.chipNoiseLength; o++) {
                    n[o] = (1 & s) / 2 - .5,
                    1 == (s + (a = s >> 1) & 1) && (a -= 40),
                    s = a
                }
            else if (9 == t) {
                let t = 1;
                for (let e = 0; e < p.chipNoiseLength; e++) {
                    n[e] = 2 * (1 & t) - 1.1;
                    let i = t >> 1;
                    1 == (t + i & 1) && (i += 131080),
                    t = i
                }
            } else if (10 == t)
                for (let t = 0; t < p.chipNoiseLength; t++)
                    n[t] = Math.round(Math.random());
            else if (11 == t)
                for (s = 1,
                o = 0; o < p.chipNoiseLength; o++) {
                    var a;
                    n[o] = Math.round(1 & s),
                    1 == (s + (a = s >> 1) & 1) && (a -= 40),
                    s = a
                }
            else if (12 == t)
                for (let t = 0; t < p.chipNoiseLength; t++) {
                    var r = Math.random();
                    n[t] = Math.pow(r, Math.clz32(r))
                }
            else if (13 == t) {
                var h, l, c, d, m = 0, u = 0, f = 0;
                m = u = f = h = l = c = d = 0;
                for (let t = 0; t < p.chipNoiseLength; t++) {
                    m = .99886 * m + .0555179 * (b = 2 * Math.random() - 1),
                    u = .99332 * u + .0750759 * b,
                    f = .969 * f + .153852 * b,
                    h = .8665 * h + .3104856 * b,
                    l = .55 * l + .5329522 * b,
                    c = -.7616 * c - .016898 * b,
                    n[t] = m + u + f + h + l + c + d + .5362 * b,
                    n[t] *= .44,
                    d = .115926 * b
                }
            } else {
                if (14 != t)
                    throw new Error("Unrecognized drum index: " + t);
                var y = 0;
                for (let t = 0; t < p.chipNoiseLength; t++) {
                    var b = 2 * Math.random() - 1;
                    n[t] = (y + .02 * b) / 1.02,
                    y = n[t],
                    n[t] *= 14
                }
            }
            n[p.chipNoiseLength] = n[0]
        }
        return n
    }
    function g(t, e, i, n, s, o, a) {
        const r = 0 | Math.pow(2, i)
          , h = Math.min(e >> 1, 0 | Math.pow(2, n))
          , l = b(0, null, null);
        let c = 0;
        for (let d = r; d < h; d++) {
            let r = s + (o - s) * (Math.log2(d) - i) / (n - i)
              , h = Math.pow(2, 7 * (r - 1) + 1) * r;
            h *= Math.pow(d / 2048, a),
            c += h,
            h *= l[d];
            const p = .61803398875 * d * d * Math.PI * 2;
            t[d] = Math.cos(p) * h,
            t[e - d] = Math.sin(p) * h
        }
        return c
    }
    function w(t=0) {
        const e = new Float32Array(p.sineWaveLength + 1)
          , i = p.sineWaveLength / 4;
        for (let n = 0; n < p.sineWaveLength + 1; n++)
            e[n] = 2 * +(Math.abs(n - i) < t * p.sineWaveLength / 2 || Math.abs(n - p.sineWaveLength - i) < t * p.sineWaveLength / 2) - 1;
        return e
    }
    function v(t=!1) {
        const e = new Float32Array(p.sineWaveLength + 1);
        for (let i = 0; i < p.sineWaveLength + 1; i++)
            e[i] = 2 * (i + p.sineWaveLength / 4) / p.sineWaveLength % 2 - 1,
            e[i] = t ? -e[i] : e[i];
        return e
    }
    function x(t, e, i) {
        let n = p.arpeggioPatterns[t - 1];
        return null != n ? (2 == t && 0 == e && (n = [0, 0, 1, 1]),
        n[i % n.length]) : i % t
    }
    function k(t) {
        const e = {};
        for (let i = 0; i < t.length; i++) {
            const n = t[i];
            n.index = i,
            e[n.name] = n
        }
        const i = t;
        return i.dictionary = e,
        i
    }
    function M(t) {
        return 0 != (1024 & t)
    }
    function S(t) {
        return 0 != (2048 & t)
    }
    function F(t) {
        return 0 != (128 & t)
    }
    function C(t) {
        return 0 != (256 & t)
    }
    function A(t) {
        return 0 != (512 & t)
    }
    function E(t) {
        return 0 != (32 & t)
    }
    function T(t) {
        return 0 != (8 & t)
    }
    function P(t) {
        return 0 != (16 & t)
    }
    function B(t) {
        return 0 != (4 & t)
    }
    function I(t) {
        return 0 != (2 & t)
    }
    function L(t) {
        return 0 != (64 & t)
    }
    function D(t) {
        return 0 != (1 & t)
    }
    p.thresholdVal = -10,
    p.kneeVal = 40,
    p.ratioVal = 12,
    p.attackVal = 0,
    p.releaseVal = .25,
    p.willReloadForCustomSamples = !1,
    p.jsonFormat = "UltraBox",
    p.scales = k([{
        name: "Free",
        realName: "chromatic",
        flags: [!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0]
    }, {
        name: "Major",
        realName: "ionian",
        flags: [!0, !1, !0, !1, !0, !0, !1, !0, !1, !0, !1, !0]
    }, {
        name: "Minor",
        realName: "aeolian",
        flags: [!0, !1, !0, !0, !1, !0, !1, !0, !0, !1, !0, !1]
    }, {
        name: "Mixolydian",
        realName: "mixolydian",
        flags: [!0, !1, !0, !1, !0, !0, !1, !0, !1, !0, !0, !1]
    }, {
        name: "Lydian",
        realName: "lydian",
        flags: [!0, !1, !0, !1, !0, !1, !0, !0, !1, !0, !1, !0]
    }, {
        name: "Dorian",
        realName: "dorian",
        flags: [!0, !1, !0, !0, !1, !0, !1, !0, !1, !0, !0, !1]
    }, {
        name: "Phrygian",
        realName: "phrygian",
        flags: [!0, !0, !1, !0, !1, !0, !1, !0, !0, !1, !0, !1]
    }, {
        name: "Locrian",
        realName: "locrian",
        flags: [!0, !0, !1, !0, !1, !0, !0, !1, !0, !1, !0, !1]
    }, {
        name: "Lydian Dominant",
        realName: "lydian dominant",
        flags: [!0, !1, !0, !1, !0, !1, !0, !0, !1, !0, !0, !1]
    }, {
        name: "Phrygian Dominant",
        realName: "phrygian dominant",
        flags: [!0, !0, !1, !1, !0, !0, !1, !0, !0, !1, !0, !1]
    }, {
        name: "Harmonic Major",
        realName: "harmonic major",
        flags: [!0, !1, !0, !1, !0, !0, !1, !0, !0, !1, !1, !0]
    }, {
        name: "Harmonic Minor",
        realName: "harmonic minor",
        flags: [!0, !1, !0, !0, !1, !0, !1, !0, !0, !1, !1, !0]
    }, {
        name: "Melodic Minor",
        realName: "melodic minor",
        flags: [!0, !1, !0, !0, !1, !0, !1, !0, !1, !0, !1, !0]
    }, {
        name: "Blues Major",
        realName: "blues major",
        flags: [!0, !1, !0, !0, !0, !1, !1, !0, !1, !0, !1, !1]
    }, {
        name: "Blues",
        realName: "blues",
        flags: [!0, !1, !1, !0, !1, !0, !0, !0, !1, !1, !0, !1]
    }, {
        name: "Altered",
        realName: "altered",
        flags: [!0, !0, !1, !0, !0, !1, !0, !1, !0, !1, !0, !1]
    }, {
        name: "Major Pentatonic",
        realName: "major pentatonic",
        flags: [!0, !1, !0, !1, !0, !1, !1, !0, !1, !0, !1, !1]
    }, {
        name: "Minor Pentatonic",
        realName: "minor pentatonic",
        flags: [!0, !1, !1, !0, !1, !0, !1, !0, !1, !1, !0, !1]
    }, {
        name: "Whole Tone",
        realName: "whole tone",
        flags: [!0, !1, !0, !1, !0, !1, !0, !1, !0, !1, !0, !1]
    }, {
        name: "Octatonic",
        realName: "octatonic",
        flags: [!0, !1, !0, !0, !1, !0, !0, !1, !0, !0, !1, !0]
    }, {
        name: "Hexatonic",
        realName: "hexatonic",
        flags: [!0, !1, !1, !0, !0, !1, !1, !0, !0, !1, !1, !0]
    }, {
        name: "No Dabbing (MB)",
        realName: "no dabbing",
        flags: [!0, !0, !1, !0, !0, !0, !0, !0, !0, !1, !0, !1]
    }, {
        name: "Jacked Toad (TB)",
        realName: "jacked toad",
        flags: [!0, !1, !0, !0, !1, !0, !0, !0, !0, !1, !0, !0]
    }, {
        name: "Test Scale (TB)",
        realName: "**t",
        flags: [!0, !0, !1, !1, !1, !0, !0, !1, !1, !0, !0, !1]
    }, {
        name: "Custom",
        realName: "custom",
        flags: [!0, !1, !0, !0, !1, !1, !1, !0, !0, !1, !0, !0]
    }]),
    p.keys = k([{
        name: "C",
        isWhiteKey: !0,
        basePitch: 12
    }, {
        name: "C♯",
        isWhiteKey: !1,
        basePitch: 13
    }, {
        name: "D",
        isWhiteKey: !0,
        basePitch: 14
    }, {
        name: "D♯",
        isWhiteKey: !1,
        basePitch: 15
    }, {
        name: "E",
        isWhiteKey: !0,
        basePitch: 16
    }, {
        name: "F",
        isWhiteKey: !0,
        basePitch: 17
    }, {
        name: "F♯",
        isWhiteKey: !1,
        basePitch: 18
    }, {
        name: "G",
        isWhiteKey: !0,
        basePitch: 19
    }, {
        name: "G♯",
        isWhiteKey: !1,
        basePitch: 20
    }, {
        name: "A",
        isWhiteKey: !0,
        basePitch: 21
    }, {
        name: "A♯",
        isWhiteKey: !1,
        basePitch: 22
    }, {
        name: "B",
        isWhiteKey: !0,
        basePitch: 23
    }]),
    p.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1],
    p.tempoMin = 1,
    p.tempoMax = 500,
    p.octaveMin = -2,
    p.octaveMax = 2,
    p.echoDelayRange = 24,
    p.echoDelayStepTicks = 4,
    p.echoSustainRange = 8,
    p.echoShelfHz = 4e3,
    p.echoShelfGain = Math.pow(2, -.5),
    p.reverbShelfHz = 8e3,
    p.reverbShelfGain = Math.pow(2, -1.5),
    p.reverbRange = 32,
    p.reverbDelayBufferSize = 16384,
    p.reverbDelayBufferMask = p.reverbDelayBufferSize - 1,
    p.beatsPerBarMin = 1,
    p.beatsPerBarMax = 64,
    p.barCountMin = 1,
    p.barCountMax = 1024,
    p.instrumentCountMin = 1,
    p.layeredInstrumentCountMax = 10,
    p.patternInstrumentCountMax = 10,
    p.partsPerBeat = 24,
    p.ticksPerPart = 2,
    p.ticksPerArpeggio = 3,
    p.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]],
    p.rhythms = k([{
        name: "÷3 (triplets)",
        stepsPerBeat: 3,
        roundUpThresholds: [5, 12, 18]
    }, {
        name: "÷4 (standard)",
        stepsPerBeat: 4,
        roundUpThresholds: [3, 9, 17, 21]
    }, {
        name: "÷6",
        stepsPerBeat: 6,
        roundUpThresholds: null
    }, {
        name: "÷8",
        stepsPerBeat: 8,
        roundUpThresholds: null
    }, {
        name: "÷12",
        stepsPerBeat: 12,
        roundUpThresholds: null
    }, {
        name: "freehand",
        stepsPerBeat: 24,
        roundUpThresholds: null
    }]),
    p.instrumentTypeNames = ["chip", "FM", "noise", "spectrum", "drumset", "harmonics", "PWM", "Picked String", "supersaw", "custom chip", "mod", "FM6op"],
    p.instrumentTypeHasSpecialInterval = [!0, !0, !1, !1, !1, !0, !1, !1, !1, !1, !1],
    p.chipBaseExpression = .03375,
    p.fmBaseExpression = .03,
    p.noiseBaseExpression = .19,
    p.spectrumBaseExpression = .3,
    p.drumsetBaseExpression = .45,
    p.harmonicsBaseExpression = .025,
    p.pwmBaseExpression = .04725,
    p.supersawBaseExpression = .061425,
    p.pickedStringBaseExpression = .025,
    p.distortionBaseVolume = .011,
    p.bitcrusherBaseVolume = .01,
    p.rawChipWaves = k([{
        name: "rounded",
        expression: .94,
        samples: m([0, .2, .4, .5, .6, .7, .8, .85, .9, .95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, .95, .9, .85, .8, .7, .6, .5, .4, .2, 0, -.2, -.4, -.5, -.6, -.7, -.8, -.85, -.9, -.95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -.95, -.9, -.85, -.8, -.7, -.6, -.5, -.4, -.2])
    }, {
        name: "triangle",
        expression: 1,
        samples: m([1 / 15, .2, 5 / 15, 7 / 15, .6, 11 / 15, 13 / 15, 1, 1, 13 / 15, 11 / 15, .6, 7 / 15, 5 / 15, .2, 1 / 15, -1 / 15, -.2, -5 / 15, -7 / 15, -.6, -11 / 15, -13 / 15, -1, -1, -13 / 15, -11 / 15, -.6, -7 / 15, -5 / 15, -.2, -1 / 15])
    }, {
        name: "square",
        expression: .5,
        samples: m([1, -1])
    }, {
        name: "1/4 pulse",
        expression: .5,
        samples: m([1, -1, -1, -1])
    }, {
        name: "1/8 pulse",
        expression: .5,
        samples: m([1, -1, -1, -1, -1, -1, -1, -1])
    }, {
        name: "sawtooth",
        expression: .65,
        samples: m([1 / 31, 3 / 31, 5 / 31, 7 / 31, 9 / 31, 11 / 31, 13 / 31, 15 / 31, 17 / 31, 19 / 31, 21 / 31, 23 / 31, 25 / 31, 27 / 31, 29 / 31, 1, -1, -29 / 31, -27 / 31, -25 / 31, -23 / 31, -21 / 31, -19 / 31, -17 / 31, -15 / 31, -13 / 31, -11 / 31, -9 / 31, -7 / 31, -5 / 31, -3 / 31, -1 / 31])
    }, {
        name: "double saw",
        expression: .5,
        samples: m([0, -.2, -.4, -.6, -.8, -1, 1, -.8, -.6, -.4, -.2, 1, .8, .6, .4, .2])
    }, {
        name: "double pulse",
        expression: .4,
        samples: m([1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1])
    }, {
        name: "spiky",
        expression: .4,
        samples: m([1, -1, 1, -1, 1, 0])
    }, {
        name: "sine",
        expression: .88,
        samples: u([8, 9, 11, 12, 13, 14, 15, 15, 15, 15, 14, 14, 13, 11, 10, 9, 7, 6, 4, 3, 2, 1, 0, 0, 0, 0, 1, 1, 2, 4, 5, 6])
    }, {
        name: "flute",
        expression: .8,
        samples: u([3, 4, 6, 8, 10, 11, 13, 14, 15, 15, 14, 13, 11, 8, 5, 3])
    }, {
        name: "harp",
        expression: .8,
        samples: u([0, 3, 3, 3, 4, 5, 5, 6, 7, 8, 9, 11, 11, 13, 13, 15, 15, 14, 12, 11, 10, 9, 8, 7, 7, 5, 4, 3, 2, 1, 0, 0])
    }, {
        name: "sharp clarinet",
        expression: .38,
        samples: u([0, 0, 0, 1, 1, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 7, 9, 9, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    }, {
        name: "soft clarinet",
        expression: .45,
        samples: u([0, 1, 5, 8, 9, 9, 9, 9, 9, 9, 9, 11, 11, 12, 13, 12, 10, 9, 7, 6, 4, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1])
    }, {
        name: "alto sax",
        expression: .3,
        samples: u([5, 5, 6, 4, 3, 6, 8, 7, 2, 1, 5, 6, 5, 4, 5, 7, 9, 11, 13, 14, 14, 14, 14, 13, 10, 8, 7, 7, 4, 3, 4, 2])
    }, {
        name: "bassoon",
        expression: .35,
        samples: u([9, 9, 7, 6, 5, 4, 4, 4, 4, 5, 7, 8, 9, 10, 11, 13, 13, 11, 10, 9, 7, 6, 4, 2, 1, 1, 1, 2, 2, 5, 11, 14])
    }, {
        name: "trumpet",
        expression: .22,
        samples: u([10, 11, 8, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 11, 14])
    }, {
        name: "electric guitar",
        expression: .2,
        samples: u([11, 12, 12, 10, 6, 6, 8, 0, 2, 4, 8, 10, 9, 10, 1, 7, 11, 3, 6, 6, 8, 13, 14, 2, 0, 12, 8, 4, 13, 11, 10, 13])
    }, {
        name: "organ",
        expression: .2,
        samples: u([11, 10, 12, 11, 14, 7, 5, 5, 12, 10, 10, 9, 12, 6, 4, 5, 13, 12, 12, 10, 12, 5, 2, 2, 8, 6, 6, 5, 8, 3, 2, 1])
    }, {
        name: "pan flute",
        expression: .35,
        samples: u([1, 4, 7, 6, 7, 9, 7, 7, 11, 12, 13, 15, 13, 11, 11, 12, 13, 10, 7, 5, 3, 6, 10, 7, 3, 3, 1, 0, 1, 0, 1, 0])
    }, {
        name: "glitch",
        expression: .5,
        samples: m([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1])
    }, {
        name: "trapezoid",
        expression: 1,
        samples: m([1 / 15, .4, 10 / 15, 14 / 15, 1, 1, 1, 1, 1, 1, 1, 1, 14 / 15, 10 / 15, .4, 1 / 15, -1 / 15, -.4, -10 / 15, -14 / 15, -1, -1, -1, -1, -1, -1, -1, -1, -14 / 15, -10 / 15, -.4, -1 / 15])
    }, {
        name: "modbox 10% pulse",
        expression: .5,
        samples: u([1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
    }, {
        name: "modbox sunsoft bass",
        expression: 1,
        samples: u([0, .1875, .3125, .5625, .5, .75, .875, 1, 1, .6875, .5, .625, .625, .5, .375, .5625, .4375, .5625, .4375, .4375, .3125, .1875, .1875, .375, .5625, .5625, .5625, .5625, .5625, .4375, .25, 0])
    }, {
        name: "modbox loud pulse",
        expression: .5,
        samples: u([1, .7, .1, .1, 0, 0, 0, 0, 0, .1, .2, .15, .25, .125, .215, .345, 4])
    }, {
        name: "modbox sax",
        expression: .5,
        samples: u([1 / 15, .2, 5 / 15, 9, .06])
    }, {
        name: "modbox guitar",
        expression: .5,
        samples: u([-.5, 3.5, 3, -.5, -.25, -1])
    }, {
        name: "modbox sine",
        expression: .5,
        samples: u([0, .05, .125, .2, .25, .3, .425, .475, .525, .625, .675, .725, .775, .8, .825, .875, .9, .925, .95, .975, .98, .99, .995, 1, .995, .99, .98, .975, .95, .925, .9, .875, .825, .8, .775, .725, .675, .625, .525, .475, .425, .3, .25, .2, .125, .05, 0, -.05, -.125, -.2, -.25, -.3, -.425, -.475, -.525, -.625, -.675, -.725, -.775, -.8, -.825, -.875, -.9, -.925, -.95, -.975, -.98, -.99, -.995, -1, -.995, -.99, -.98, -.975, -.95, -.925, -.9, -.875, -.825, -.8, -.775, -.725, -.675, -.625, -.525, -.475, -.425, -.3, -.25, -.2, -.125, -.05])
    }, {
        name: "modbox atari bass",
        expression: .5,
        samples: u([1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0])
    }, {
        name: "modbox atari pulse",
        expression: .5,
        samples: u([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
    }, {
        name: "modbox 1% pulse",
        expression: .5,
        samples: u([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
    }, {
        name: "modbox curved sawtooth",
        expression: .5,
        samples: u([1, .5, 1 / 3, 1 / 4])
    }, {
        name: "modbox viola",
        expression: .45,
        samples: u([-.9, -1, -.85, -.775, -.7, -.6, -.5, -.4, -.325, -.225, -.2, -.125, -.1, -.11, -.125, -.15, -.175, -.18, -.2, -.21, -.22, -.21, -.2, -.175, -.15, -.1, -.5, .75, .11, .175, .2, .25, .26, .275, .26, .25, .225, .2, .19, .18, .19, .2, .21, .22, .23, .24, .25, .26, .275, .28, .29, .3, .29, .28, .27, .26, .25, .225, .2, .175, .15, .1, .075, 0, -.01, -.025, .025, .075, .2, .3, .475, .6, .75, .85, .85, 1, .99, .95, .8, .675, .475, .275, .01, -.15, -.3, -.475, -.5, -.6, -.71, -.81, -.9, -1, -.9])
    }, {
        name: "modbox brass",
        expression: .45,
        samples: u([-1, -.95, -.975, -.9, -.85, -.8, -.775, -.65, -.6, -.5, -.475, -.35, -.275, -.2, -.125, -.05, 0, .075, .125, .15, .2, .21, .225, .25, .225, .21, .2, .19, .175, .125, .1, .075, .06, .05, .04, .025, .04, .05, .1, .15, .225, .325, .425, .575, .7, .85, .95, 1, .9, .675, .375, .2, .275, .4, .5, .55, .6, .625, .65, .65, .65, .65, .64, .6, .55, .5, .4, .325, .25, .15, .05, -.05, -.15, -.275, -.35, -.45, -.55, -.65, -.7, -.78, -.825, -.9, -.925, -.95, -.975])
    }, {
        name: "modbox acoustic bass",
        expression: .5,
        samples: u([1, 0, .1, -.1, -.2, -.4, -.3, -1])
    }, {
        name: "modbox lyre",
        expression: .45,
        samples: u([1, -1, 4, 2.15, 4.13, 5.15, 0, -.05, 1])
    }, {
        name: "modbox ramp pulse",
        expression: .5,
        samples: u([6.1, -2.9, 1.4, -2.9])
    }, {
        name: "modbox piccolo",
        expression: .5,
        samples: u([1, 4, 2, 1, -.1, -1, -.12])
    }, {
        name: "modbox squaretooth",
        expression: .5,
        samples: u([.2, 1, 2.6, 1, 0, -2.4])
    }, {
        name: "modbox flatline",
        expression: 1,
        samples: u([1, .9, .8, .7, .6, .5, .4, .3, .2, .1, 0, .1, .2, .3, .4, .5, .6, .7, .8, .9])
    }, {
        name: "modbox pnryshk a (u5)",
        expression: .4,
        samples: u([1, .9, .8, .7, .6, .5, .4, .3, .2, .1, 0])
    }, {
        name: "modbox pnryshk b (riff)",
        expression: .5,
        samples: u([1, -.9, .8, -.7, .6, -.5, .4, -.3, .2, -.1, 0, -.1, .2, -.3, .4, -.5, .6, -.7, .8, -.9, 1])
    }, {
        name: "sandbox shrill lute",
        expression: .94,
        samples: u([1, 1.5, 1.25, 1.2, 1.3, 1.5])
    }, {
        name: "sandbox bassoon",
        expression: .5,
        samples: u([1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
    }, {
        name: "sandbox shrill bass",
        expression: .5,
        samples: u([0, 1, 0, 0, 1, 0, 1, 0, 0, 0])
    }, {
        name: "sandbox nes pulse",
        expression: .4,
        samples: u([2.1, -2.2, 1.2, 3])
    }, {
        name: "sandbox saw bass",
        expression: .25,
        samples: u([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9])
    }, {
        name: "sandbox euphonium",
        expression: .3,
        samples: u([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1])
    }, {
        name: "sandbox shrill pulse",
        expression: .3,
        samples: u([2, 0, 4, 1, 4, 6, 7, 3])
    }, {
        name: "sandbox r-sawtooth",
        expression: .2,
        samples: u([6.1, -2.9, 1.4, -2.9])
    }, {
        name: "sandbox recorder",
        expression: .2,
        samples: u([5, -5.1, 4, -4.1, 3, -3.1, 2, -2.1, 1, -1.1, 6])
    }, {
        name: "sandbox narrow saw",
        expression: 1.2,
        samples: u([.1, -1.3, .13 / -.3, -.26, .13 / -.7, .13 / -.9, .13 / -.11, .13 / -.31, .13 / -.51, .13 / -.71, .13 / -.91, .13 / -.12, -.40625, -.25, .13 / -.72, .13 / -.92, -1, 1, .13 / .92, .13 / .72, .25, .40625, .13 / .12, .13 / .91, .13 / .71, .13 / .51, .13 / .31, .13 / .11, .13 / .9, .13 / .7, .26, .13 / .3, .13])
    }, {
        name: "sandbox deep square",
        expression: 1,
        samples: u([1, 2.25, 1, -1, -2.25, -1])
    }, {
        name: "sandbox ring pulse",
        expression: 1,
        samples: u([1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1])
    }, {
        name: "sandbox double sine",
        expression: 1,
        samples: u([1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0, -1, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1])
    }, {
        name: "sandbox contrabass",
        expression: .5,
        samples: u([4.2, 6.9, 1.337, 6.66])
    }, {
        name: "sandbox double bass",
        expression: .4,
        samples: u([0, .1875, .3125, .5625, .5, .75, .875, 1, -1, -.6875, -.5, -.625, -.625, -.5, -.375, -.5625, -.4375, -.5625, -.4375, -.4375, -.3125, -.1875, .1875, .375, .5625, -.5625, .5625, .5625, .5625, .4375, .25, 0])
    }, {
        name: "haileybox test1",
        expression: .5,
        samples: u([1, .5, -1])
    }, {
        name: "brucebox pokey 4bit lfsr",
        expression: .5,
        samples: u([1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1])
    }, {
        name: "brucebox pokey 5step bass",
        expression: .5,
        samples: u([1, -1, 1, -1, 1])
    }, {
        name: "brucebox isolated spiky",
        expression: .5,
        samples: u([1, -1, 1, -1, 1, -1])
    }, {
        name: "nerdbox unnamed 1",
        expression: .5,
        samples: u([.2, 4, .7, -.4, -1, .5, -.5 / .6])
    }, {
        name: "nerdbox unnamed 2",
        expression: .5,
        samples: u([2, 5 / 55, -9, 1, -55, 18.5 / -26])
    }, {
        name: "zefbox semi-square",
        expression: 1,
        samples: u([1, 1.5, 2, 2.5, 2.5, 2.5, 2, 1.5, 1])
    }, {
        name: "zefbox deep square",
        expression: 1,
        samples: u([1, 2.25, 1, -1, -2.25, -1])
    }, {
        name: "zefbox squaretal",
        expression: .7,
        samples: u([1.5, 1, 1.5, -1.5, -1, -1.5])
    }, {
        name: "zefbox saw wide",
        expression: .65,
        samples: u([0, -.4, -.8, -1.2, -1.6, -2, 0, -.4, -.8, -1.2, -1.6])
    }, {
        name: "zefbox saw narrow",
        expression: .65,
        samples: u([1, .5, 1, .5, 1, .5, 1, 2, 1, 2, 1])
    }, {
        name: "zefbox deep sawtooth",
        expression: .5,
        samples: u([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1])
    }, {
        name: "zefbox sawtal",
        expression: .3,
        samples: u([1.5, 1, 1.25, -.5, 1.5, -.5, 0, -1.5, 1.5, 0, .5, -1.5, .5, 1.25, -1, -1.5])
    }, {
        name: "zefbox deep sawtal",
        expression: .7,
        samples: u([.75, .25, .5, -.5, .5, -.5, -.25, -.75])
    }, {
        name: "zefbox pulse",
        expression: .5,
        samples: u([1, -2, -2, -1.5, -1.5, -1.25, -1.25, -1, -1])
    }, {
        name: "zefbox triple pulse",
        expression: .4,
        samples: u([1, 1, 1, 1, 1, -1, -1, 1.5, 1, 1, 1, 1, -1, -1, -1, 1.5])
    }, {
        name: "zefbox high pulse",
        expression: .2,
        samples: u([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1])
    }, {
        name: "zefbox deep pulse",
        expression: .2,
        samples: u([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2])
    }, {
        name: "wackybox guitar string",
        expression: .6,
        samples: u([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63])
    }, {
        name: "wackybox intense",
        expression: .6,
        samples: u([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31])
    }, {
        name: "wackybox buzz wave",
        expression: .6,
        samples: u([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53])
    }, {
        name: "todbox 1/3 pulse",
        expression: .5,
        samples: m([1, -1, -1])
    }, {
        name: "todbox 1/5 pulse",
        expression: .5,
        samples: m([1, -1, -1, -1, -1])
    }, {
        name: "todbox slap bass",
        expression: .5,
        samples: u([1, .5, 0, .5, 1.25, .5, -.25, .1, -.1, .1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, .7, .9, .8, .4, .1, 0, .2, .4, .6, .5, .8])
    }, {
        name: "todbox harsh wave",
        expression: .45,
        samples: u([1, -1, -1, -1, .5, .5, .5, .7, .39, 1.3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
    }, {
        name: "todbox accordian",
        expression: .5,
        samples: u([0, 1, 1, 2, 2, 1.5, 1.5, .8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, .75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -.75, -2, -.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1])
    }, {
        name: "todbox beta banana wave",
        expression: .8,
        samples: u([0, .2, .4, .5, .6, .7, .8, .85, .9, .95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, .95, .9, .85, .8, .7, .6, .5, .4, .2, 0])
    }, {
        name: "todbox beta test wave",
        expression: .5,
        samples: u([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6])
    }, {
        name: "todbox beta real snare",
        expression: 1,
        samples: u([0, -.01208, -.02997, -.04382, -.06042, -.07529, -.09116, -.10654, -.12189, -.13751, -.15289, -.16849, -.18387, -.19974, -.21484, -.23071, -.24557, -.26144, -.27731, -.29141, -.3035, -.32416, -.34406, -.32947, -.31158, -.33725, -.37579, -.39746, -.40201, -.40906, -.4418, -.47229, -.47379, -.47733, -.45239, -.33954, -.22894, -.22443, -.32138, -.46371, -.57178, -.61081, -.59998, -.61459, -.62189, -.43979, -.19217, -.12643, -.17252, -.20956, -.20981, -.19217, -.22845, -.34332, -.50629, -.64307, -.72922, -.81384, -.87857, -.90149, -.88687, -.86169, -.87781, -.80478, -.52493, -.31308, -.33249, -.39395, -.39017, -.30301, -.19949, -.13071, -.02493, .14307, .34961, .52542, .63223, .68613, .7471, .87305, .98184, .98889, .97052, .99066, .99747, .99344, .99469, .99393, .9957, .99393, .99521, .99469, .9942, .99521, .9942, .99521, .99469, .99469, .99521, .9942, .99545, .99445, .99469, .99493, .9942, .99521, .99393, .99493, .99469, .99445, .9957, .99445, .99521, .99469, .99469, .99521, .9942, .99545, .99445, .99445, .99493, .9942, .99545, .9942, .99493, .99493, .9942, .99545, .99445, .99521, .99469, .99445, .99545, .99368, .99393, .99445, .99268, .97983, .97229, .95944, .88486, .76773, .64481, .53098, .39847, .19318, -.03827, -.20325, -.39319, -.68765, -.88461, -.93448, -.96069, -.97681, -.98715, -.99042, -.99142, -.99091, -.99142, -.99219, -.99091, -.99219, -.99066, -.99142, -.99142, -.99118, -.99191, -.99066, -.99191, -.99142, -.99142, -.99191, -.99091, -.99219, -.99118, -.99142, -.99167, -.99091, -.99219, -.99091, -.99167, -.99142, -.99091, -.99191, -.99091, -.99191, -.99142, -.99118, -.99191, -.99066, -.99191, -.99118, -.99142, -.99191, -.99066, -.99191, -.99091, -.99167, -.99191, -.99118, -.99219, -.99091, -.99191, -.99142, -.99142, -.99243, -.98865, -.98764, -.99219, -.98083, -.92517, -.9277, -.91486, -.59042, -.15189, .02945, .05667, .06195, .00629, -.18008, -.56497, -.8801, -.9277, -.92871, -.97705, -.99167, -.98663, -.99118, -.99042, -.99219, -.99142, -.99118, -.98941, -.99219, -1, -.9758, -.95993, -.99948, -.98236, -.84659, -.7486, -.70679, -.59747, -.48035, -.41687, -.36826, -.29745, -.18185, -.06219, .02164, .07907, .13123, .18033, .1962, .15692, .14053, .20251, .2753, .30905, .29092, .27252, .30402, .32416, .32214, .35239, .3967, .43198, .4942, .58487, .64154, .65967, .6705, .67026, .66522, .6554, .66119, .70627, .75842, .78738, .7894, .78763, .80402, .85944, .94559, .9899, .9816, .98007, .99368, .99393, .98538, .9758, .97101, .93802, .81812, .64633, .46649, .28613, .14685, .08966, .12543, .20325, .24557, .18866, .02795, -.20175, -.44205, -.58713, -.57629, -.41385, -.14255, .18033, .47882, .68311, .72314, .62064, .48309, .43073, .53577, .72794, .9025, .97354, .97, .98083, .99191, .99319, .99493, .99393, .99521, .99393, .99545, .9942, .99493, .99493, .99445, .99545, .9942, .99545, .99243, .98917, .98386, .97781, .95844, .89066, .81561, .78134, .77277, .75995, .73022, .67126, .57178, .47, .38361, .29419, .20703, .14734, .15866, .25162, .35818, .45062, .5675, .69748, .81232, .89697, .95062, .97656, .98615, .99191, .99219, .99243, .99368, .99368, .97028, .95566, .94559, .82617, .59973, .38361, .23901, .15338, .12921, .11206, .04382, -.12946, -.43552, -.72644, -.89847, -.95465, -.95541, -.97229, -.99268, -.99319, -.9884, -.99142, -.99167, -.99091, -.9884, -.98965, -.99368, -.97455, -.9501, -.94684, -.96219, -.98514, -.99243, -.98889, -.98917, -.99142, -.99219, -.99091, -.99191, -.99142, -.99142, -.99191, -.99066, -.99167, -.99091, -.99142, -.99191, -.99091, -.99191, -.99091, -.99167, -.99167, -.99091, -.99219, -.99091, -.99191, -.99142, -.99118, -.99191, -.99066, -.99191, -.99091, -.99118, -.99243, -.98941, -.98462, -.96976, -.9632, -.96194, -.87305, -.66196, -.44809, -.29495, -.18085, -.11813, -.11334, -.18564, -.34885, -.58237, -.8045, -.93726, -.97806, -.97354, -.97531, -.9899, -.99368, -.98941, -.99219, -.99091, -.99142, -.99167, -.99091, -.99191, -.99118, -.99219, -.98236, -.97781, -.97656, -.95135, -.87204, -.71335, -.52139, -.34232, -.17783, -.00906, .14886, .3045, .48889, .67404, .8403, .94128, .97681, .98462, .98337, .99142, .99521, .99493, .9942, .99445, .99521, .99393, .99545, .99445, .99521, .99521, .99445, .9957, .99445, .99521, .99469, .99445, .99521, .9942, .99521, .99445, .99445, .99521, .99445, .99545, .99445, .99469, .99493, .99393, .99493, .99445, .99393, .98285, .97781, .97479, .92844, .82114, .66095, .52417, .46826, .46722, .47934, .47379, .47076, .48209, .42014, .25439, .10074, -.00302, -.08966, -.16068, -.21436, -.2204, -.15137, -.00476, .18536, .37631, .52292, .62164, .70425, .74835, .72366, .63928, .52567, .40805, .35666, .42896, .60175, .802, .92743, .96548, .97632, .98337, .99066, .99521, .9942, .99368, .99292, .9884, .98083, .96774, .93323, .8544, .6947, .47202, .20425, -.0889, -.36423, -.60025, -.77481, -.90173, -.96017, -.97028, -.98108, -.9884, -.99219, -.9899, -.99219, -.99142, -.99142, -.99219, -.99091, -.99243, -.99066, -.99142, -.99142, -.99118, -.99191, -.99066, -.99167, -.99142, -.99142, -.99219, -.99091, -.99191, -.99118, -.99142, -.99191, -.99091, -.99191, -.99091, -.99167, -.99191, -.99118, -.99219, -.99091, -.99167, -.99142, -.99142, -.99219, -.99091, -.99191, -.99142, -.99118, -.98917, -.99042, -.99445, -.9733, -.9559, -.96219, -.8967, -.72241, -.55112, -.44809, -.39319, -.37833, -.35641, -.2627, -.1423, -.11282, -.13525, -.11536, -.09671, -.11511, -.1806, -.26874, -.33374, -.42215, -.51358, -.44785, -.3045, -.28613, -.30527, -.25037, -.1539, -.08286, -.11157, -.12592, -.00327, .13803, .19141, .1282, .01788, -.03952, -.12592, -.26773, -.34634, -.31384, -.1806, -.0108, .13574, .2612, .36975, .46573, .55087, .63626, .73022, .83072, .92014, .97177, .98587, .98413, .99167, .99445, .99292, .99219, .9874, .98007, .96472, .92239, .82166, .69067, .57959, .54962, .59695, .64255, .64633, .60629, .55942, .5491, .58966, .61887, .56952, .54181, .59518, .63248, .63876, .65463, .73398, .88312, .96927, .97101, .97958, .99344, .9942, .99268, .99493, .99469, .99445, .99521, .99445, .99545, .9942, .99493, .99493, .9942, .99545, .9942, .99493, .9942, .99393, .9942, .9884, .98309, .98309, .96069, .88461, .7937, .72064, .65765, .59998, .53247, .49268, .48615, .44205, .38034, .36447, .38715, .39294, .32645, .19595, .07782, -.05893, -.27832, -.48309, -.62619, -.72995, -.79999, -.84583, -.82166, -.73575, -.67227, -.65491, -.6496, -.66397, -.70175, -.72894, -.74658, -.76724, -.7952, -.82846, -.86523, -.90527, -.94382, -.89948, -.69849, -.47479, -.31662, -.15414, -.00729, .07077, .08237, .04431, -.02292, -.11761, -.24307, -.36926, -.45087, -.4617, -.4025, -.30679, -.17529, 0, .14331, .24179, .36774, .49545, .56522, .57907, .56775, .53851, .51132, .48688, .41913, .26044, .00955, -.26297, -.46396, -.62341, -.82214, -.94684, -.96774, -.97531, -.98413, -.99017, -.9899, -.99219, -.99066, -.99142, -.99167, -.99118, -.99219, -.9899, -.99118, -.99368, -.99142, -.97757, -.97403, -.98007, -.9617, -.86826, -.67783, -.52719, -.48788, -.4549, -.43146, -.47681, -.54105, -.57983, -.60904, -.62317, -.59949, -.55566, -.52063, -.52115, -.55112, -.56244, -.58337, -.6554, -.73373, -.77228, -.74759, -.6889, -.64609, -.61887, -.5806, -.50351, -.40729, -.33929, -.3511, -.42944, -.47028, -.42267, -.32718, -.20224, -.0564, .04556, .10529, .1763, .26169, .33197, .32138, .23776, .20956, .23148, .20352, .23325, .39267, .52719, .58438, .62289, .66345, .70023, .66296, .5433, .42618, .33475, .24533, .14105, .03851, .01358, .09143, .22845, .34961, .41711, .4874, .58914, .69519, .78186, .84357, .89822, .95389, .98135, .98615, .99167, .99243, .99445, .9942, .99469, .99493, .99393, .99545, .99445, .99521, .99469, .99445, .99521, .9942, .99469, .98965, .98715, .98563, .96295, .91736, .86624, .82367, .77554, .68411, .53549, .38916, .2612, .11435, -.04053, -.18161, -.23172, -.19394, -.15237, -.1073, -.02997, .08588, .2262, .34305, .44104, .5574, .65765, .71259, .69217, .65363, .69748, .79572, .89368, .95514, .97733, .98413, .98816, .99243, .99445, .99243, .97302, .96674, .97983, .90378, .71005, .51056, .40451, .40982, .41559, .32996, .24356, .18866, .11411, .05365, .01157, -.03247, -.09216, -.16095, -.23248, -.31662, -.39771, -.48663, -.59647, -.71536, -.82013, -.85287, -.82947, -.84937, -.92215, -.97177, -.98663, -.98816, -.98438, -.99091, -.99219, -.99091, -.99191, -.99042, -.99191, -.99091, -.99142, -.99191, -.99091, -.99191, -.99091, -.99167, -.99142])
    }, {
        name: "ultrabox shortened od guitar",
        expression: .5,
        samples: u([-.82785, -.67621, -.40268, -.43817, -.45468, -.22531, -.18329, .2475, .71246, .52155, .56082, .48395, .3399, .46957, .27744, .42313, .47104, .18796, .1293, -.13901, -.07431, -.16348, -.74857, -.73206, -.35181, -.26227, -.41882, -.27786, -.19806, -.19867, .18643, .24808, .08847, -.06964, .06912, .20474, -.05304, .29416, .31967, .14243, .27521, -.23932, -.14752, .1236, -.26123, -.26111, .06616, .2652, .0809, .1524, .16254, -.12061, .04562, .00131, .0405, .08182, -.21729, -.17041, -.16312, -.08563, .0639, .05099, .05627, .02728, .00726, -.13028, -.05673, -.14969, -.17645, .35492, .16766, -.00897, .24326, -.00461, -.04456, .01776, -.0495, -.01221, .02039, .07684, .13397, .3985, .35962, .13754, .4231, .27161, -.17609, .03659, .10635, -.21909, -.22046, -.20258, -.40973, -.4028, -.40521, -.66284])
    }]),
    p.chipWaves = function(t) {
        const e = new Array(t.length)
          , i = {};
        for (let n = 0; n < e.length; n++) {
            e[n] = Object.assign([], t[n]);
            const s = e[n];
            s.index = n,
            i[s.name] = s
        }
        for (let t in i)
            i[t].samples = f(i[t].samples);
        const n = e;
        return n.dictionary = i,
        n
    }(p.rawChipWaves),
    p.rawRawChipWaves = p.rawChipWaves,
    p.firstIndexForSamplesInChipWaveList = p.chipWaves.length,
    p.chipNoises = k([{
        name: "retro",
        expression: .25,
        basePitch: 69,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "white",
        expression: 1,
        basePitch: 69,
        pitchFilterMult: 8,
        isSoft: !0,
        samples: null
    }, {
        name: "clang",
        expression: .4,
        basePitch: 69,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "buzz",
        expression: .3,
        basePitch: 69,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "hollow",
        expression: 1.5,
        basePitch: 96,
        pitchFilterMult: 1,
        isSoft: !0,
        samples: null
    }, {
        name: "shine",
        expression: 1,
        basePitch: 69,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "deep",
        expression: 1.5,
        basePitch: 120,
        pitchFilterMult: 1024,
        isSoft: !0,
        samples: null
    }, {
        name: "cutter",
        expression: .005,
        basePitch: 96,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "metallic",
        expression: 1,
        basePitch: 96,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "static",
        expression: 1,
        basePitch: 96,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "1-bit white",
        expression: .5,
        basePitch: 74.41,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "1-bit metallic",
        expression: .5,
        basePitch: 86.41,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "crackling",
        expression: .9,
        basePitch: 69,
        pitchFilterMult: 1024,
        isSoft: !1,
        samples: null
    }, {
        name: "pink",
        expression: 1,
        basePitch: 69,
        pitchFilterMult: 8,
        isSoft: !0,
        samples: null
    }, {
        name: "brownian",
        expression: 1,
        basePitch: 69,
        pitchFilterMult: 8,
        isSoft: !0,
        samples: null
    }]),
    p.filterFreqStep = 1 / 4,
    p.filterFreqRange = 34,
    p.filterFreqReferenceSetting = 28,
    p.filterFreqReferenceHz = 8e3,
    p.filterFreqMaxHz = p.filterFreqReferenceHz * Math.pow(2, p.filterFreqStep * (p.filterFreqRange - 1 - p.filterFreqReferenceSetting)),
    p.filterFreqMinHz = 8,
    p.filterGainRange = 15,
    p.filterGainCenter = 7,
    p.filterGainStep = .5,
    p.filterMaxPoints = 8,
    p.filterTypeNames = ["low-pass", "high-pass", "peak"],
    p.filterMorphCount = 10,
    p.filterSimpleCutRange = 11,
    p.filterSimplePeakRange = 8,
    p.fadeInRange = 10,
    p.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96],
    p.fadeOutNeutral = 4,
    p.drumsetFadeOutTicks = 48,
    p.transitions = k([{
        name: "normal",
        isSeamless: !1,
        continues: !1,
        slides: !1,
        slideTicks: 3,
        includeAdjacentPatterns: !1
    }, {
        name: "interrupt",
        isSeamless: !0,
        continues: !1,
        slides: !1,
        slideTicks: 3,
        includeAdjacentPatterns: !0
    }, {
        name: "continue",
        isSeamless: !0,
        continues: !0,
        slides: !1,
        slideTicks: 3,
        includeAdjacentPatterns: !0
    }, {
        name: "slide",
        isSeamless: !0,
        continues: !1,
        slides: !0,
        slideTicks: 3,
        includeAdjacentPatterns: !0
    }, {
        name: "slide in pattern",
        isSeamless: !0,
        continues: !1,
        slides: !0,
        slideTicks: 3,
        includeAdjacentPatterns: !1
    }]),
    p.vibratos = k([{
        name: "none",
        amplitude: 0,
        type: 0,
        delayTicks: 0
    }, {
        name: "light",
        amplitude: .15,
        type: 0,
        delayTicks: 0
    }, {
        name: "delayed",
        amplitude: .3,
        type: 0,
        delayTicks: 37
    }, {
        name: "heavy",
        amplitude: .45,
        type: 0,
        delayTicks: 0
    }, {
        name: "shaky",
        amplitude: .1,
        type: 1,
        delayTicks: 0
    }]),
    p.vibratoTypes = k([{
        name: "normal",
        periodsSeconds: [.14],
        period: .14
    }, {
        name: "shaky",
        periodsSeconds: [.11, .17798, .33],
        period: 266.97
    }]),
    p.arpSpeedScale = [0, .0625, .125, .2, .25, 1 / 3, .4, .5, 2 / 3, .75, .8, .9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8],
    p.unisons = k([{
        name: "none",
        voices: 1,
        spread: 0,
        offset: 0,
        expression: 1.4,
        sign: 1
    }, {
        name: "shimmer",
        voices: 2,
        spread: .018,
        offset: 0,
        expression: .8,
        sign: 1
    }, {
        name: "hum",
        voices: 2,
        spread: .045,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "honky tonk",
        voices: 2,
        spread: .09,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "dissonant",
        voices: 2,
        spread: .25,
        offset: 0,
        expression: .9,
        sign: 1
    }, {
        name: "fifth",
        voices: 2,
        spread: 3.5,
        offset: 3.5,
        expression: .9,
        sign: 1
    }, {
        name: "octave",
        voices: 2,
        spread: 6,
        offset: 6,
        expression: .8,
        sign: 1
    }, {
        name: "bowed",
        voices: 2,
        spread: .02,
        offset: 0,
        expression: 1,
        sign: -1
    }, {
        name: "piano",
        voices: 2,
        spread: .01,
        offset: 0,
        expression: 1,
        sign: .7
    }, {
        name: "warbled",
        voices: 2,
        spread: .25,
        offset: .05,
        expression: .9,
        sign: -.8
    }, {
        name: "hecking gosh",
        voices: 2,
        spread: 6.25,
        offset: -6,
        expression: .8,
        sign: -.7
    }, {
        name: "spinner",
        voices: 2,
        spread: .02,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "detune",
        voices: 1,
        spread: 0,
        offset: .25,
        expression: 1,
        sign: 1
    }, {
        name: "rising",
        voices: 2,
        spread: 1,
        offset: .7,
        expression: .95,
        sign: 1
    }, {
        name: "vibrate",
        voices: 2,
        spread: 3.5,
        offset: 7,
        expression: .975,
        sign: 1
    }, {
        name: "fourths",
        voices: 2,
        spread: 4,
        offset: 4,
        expression: .95,
        sign: 1
    }, {
        name: "bass",
        voices: 1,
        spread: 0,
        offset: -7,
        expression: 1,
        sign: 1
    }, {
        name: "dirty",
        voices: 2,
        spread: 0,
        offset: .1,
        expression: .975,
        sign: 1
    }, {
        name: "stationary",
        voices: 2,
        spread: 3.5,
        offset: 0,
        expression: .9,
        sign: 1
    }, {
        name: "recurve",
        voices: 2,
        spread: .005,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "voiced",
        voices: 2,
        spread: 9.5,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "fluctuate",
        voices: 2,
        spread: 12,
        offset: 0,
        expression: 1,
        sign: 1
    }, {
        name: "thin",
        voices: 1,
        spread: 0,
        offset: 50,
        expression: 1,
        sign: 1
    }, {
        name: "inject",
        voices: 2,
        spread: 6,
        offset: .4,
        expression: 1,
        sign: 1
    }, {
        name: "askewed",
        voices: 2,
        spread: 0,
        offset: .42,
        expression: .7,
        sign: 1
    }, {
        name: "resonance",
        voices: 2,
        spread: .0025,
        offset: .1,
        expression: .8,
        sign: -1.5
    }, {
        name: "FART",
        voices: 2,
        spread: 13,
        offset: -5,
        expression: 1,
        sign: -3
    }]),
    p.effectNames = ["reverb", "chorus", "panning", "distortion", "bitcrusher", "note filter", "echo", "pitch shift", "detune", "vibrato", "transition type", "chord type"],
    p.effectOrder = [2, 10, 11, 7, 8, 9, 5, 3, 4, 1, 6, 0],
    p.noteSizeMax = 6,
    p.volumeRange = 50,
    p.volumeLogScale = .1428,
    p.panCenter = 50,
    p.panMax = 2 * p.panCenter,
    p.panDelaySecondsMax = .001,
    p.chorusRange = 8,
    p.chorusPeriodSeconds = 2,
    p.chorusDelayRange = .0034,
    p.chorusDelayOffsets = [[1.51, 2.1, 3.35], [1.47, 2.15, 3.25]],
    p.chorusPhaseOffsets = [[0, 2.1, 4.2], [3.2, 5.3, 1]],
    p.chorusMaxDelay = p.chorusDelayRange * (1 + p.chorusDelayOffsets[0].concat(p.chorusDelayOffsets[1]).reduce(( (t, e) => Math.max(t, e)))),
    p.chords = k([{
        name: "simultaneous",
        customInterval: !1,
        arpeggiates: !1,
        strumParts: 0,
        singleTone: !1
    }, {
        name: "strum",
        customInterval: !1,
        arpeggiates: !1,
        strumParts: 1,
        singleTone: !1
    }, {
        name: "arpeggio",
        customInterval: !1,
        arpeggiates: !0,
        strumParts: 0,
        singleTone: !0
    }, {
        name: "custom interval",
        customInterval: !0,
        arpeggiates: !1,
        strumParts: 0,
        singleTone: !0
    }]),
    p.maxChordSize = 9,
    p.operatorCount = 4,
    p.maxPitchOrOperatorCount = Math.max(p.maxChordSize, p.operatorCount + 2),
    p.algorithms = k([{
        name: "1←(2 3 4)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1],
        modulatedBy: [[2, 3, 4], [], [], []]
    }, {
        name: "1←(2 3←4)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1],
        modulatedBy: [[2, 3], [], [4], []]
    }, {
        name: "1←2←(3 4)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1],
        modulatedBy: [[2], [3, 4], [], []]
    }, {
        name: "1←(2 3)←4",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1],
        modulatedBy: [[2, 3], [4], [4], []]
    }, {
        name: "1←2←3←4",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1],
        modulatedBy: [[2], [3], [4], []]
    }, {
        name: "1←3 2←4",
        carrierCount: 2,
        associatedCarrier: [1, 2, 1, 2],
        modulatedBy: [[3], [4], [], []]
    }, {
        name: "1 2←(3 4)",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2],
        modulatedBy: [[], [3, 4], [], []]
    }, {
        name: "1 2←3←4",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2],
        modulatedBy: [[], [3], [4], []]
    }, {
        name: "(1 2)←3←4",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2],
        modulatedBy: [[3], [3], [4], []]
    }, {
        name: "(1 2)←(3 4)",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2],
        modulatedBy: [[3, 4], [3, 4], [], []]
    }, {
        name: "1 2 3←4",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 3],
        modulatedBy: [[], [], [4], []]
    }, {
        name: "(1 2 3)←4",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 3],
        modulatedBy: [[4], [4], [4], []]
    }, {
        name: "1 2 3 4",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4],
        modulatedBy: [[], [], [], []]
    }, {
        name: "1←(2 3) 2←4",
        carrierCount: 2,
        associatedCarrier: [1, 2, 1, 2],
        modulatedBy: [[2, 3], [4], [], []]
    }, {
        name: "1←(2 (3 (4",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 3],
        modulatedBy: [[2, 3, 4], [3, 4], [4], []]
    }]),
    p.algorithms6Op = k([{
        name: "Custom",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []]
    }, {
        name: "1←2←3←4←5←6",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2], [3], [4], [5], [6], []]
    }, {
        name: "1←3 2←4←5←6",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3], [4], [], [5], [6], []]
    }, {
        name: "1←3←4 2←5←6",
        carrierCount: 2,
        associatedCarrier: [1, 1, 1, 2, 2, 2],
        modulatedBy: [[3], [5], [4], [], [6], []]
    }, {
        name: "1←4 2←5 3←6",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[4], [5], [6], [], [], []]
    }, {
        name: "1←3 2←(4 5←6)",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3], [4, 5], [], [], [6], []]
    }, {
        name: "1←(3 4) 2←5←6",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3, 4], [5], [], [], [6], []]
    }, {
        name: "1←3 2←(4 5 6)",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3], [4, 5, 6], [], [], [], []]
    }, {
        name: "1←3 2←(4 5)←6",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3], [4, 5], [], [6], [6], []]
    }, {
        name: "1←3 2←4←(5 6)",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3], [4], [], [5, 6], [], []]
    }, {
        name: "1←(2 3 4 5 6)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []]
    }, {
        name: "1←(2 3←5 4←6)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2, 3, 4], [], [5], [6], [], []]
    }, {
        name: "1←(2 3 4←5←6)",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2, 3, 4], [], [], [5], [6], []]
    }, {
        name: "1←4←5 (2 3)←6",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[4], [6], [6], [5], [], []]
    }, {
        name: "1←(3 4)←5 2←6",
        carrierCount: 2,
        associatedCarrier: [1, 2, 2, 2, 2, 2],
        modulatedBy: [[3, 4], [6], [5], [5], [], []]
    }, {
        name: "(1 2)←4 3←(5 6)",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[4], [4], [5, 6], [], [], []]
    }, {
        name: "(1 2)←5 (3 4)←6",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[5], [5], [6], [6], [], []]
    }, {
        name: "(1 2 3)←(4 5 6)",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []]
    }, {
        name: "1←5 (2 3 4)←6",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[5], [6], [6], [6], [], []]
    }, {
        name: "1 2←5 (3 4)←6",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[], [5], [6], [6], [], []]
    }, {
        name: "1 2 (3 4 5)←6",
        carrierCount: 5,
        associatedCarrier: [1, 2, 3, 4, 5, 5],
        modulatedBy: [[], [], [6], [6], [6], []]
    }, {
        name: "1 2 3 (4 5)←6",
        carrierCount: 5,
        associatedCarrier: [1, 2, 3, 4, 5, 5],
        modulatedBy: [[], [], [], [6], [6], []]
    }, {
        name: "1 2←4 3←(5 6)",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 3, 3, 3],
        modulatedBy: [[], [4], [5, 6], [], [], []]
    }, {
        name: "1←4 2←(5 6) 3",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 3, 3, 3],
        modulatedBy: [[4], [5, 6], [], [], [], []]
    }, {
        name: "1 2 3←5 4←6",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[], [], [5], [6], [], []]
    }, {
        name: "1 (2 3)←5←6 4",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[], [5], [5], [], [6], []]
    }, {
        name: "1 2 3←5←6 4",
        carrierCount: 4,
        associatedCarrier: [1, 2, 3, 4, 4, 4],
        modulatedBy: [[], [], [5, 6], [], [], []]
    }, {
        name: "(1 2 3 4 5)←6",
        carrierCount: 5,
        associatedCarrier: [1, 2, 3, 4, 5, 5],
        modulatedBy: [[6], [6], [6], [6], [6], []]
    }, {
        name: "1 2 3 4 5←6",
        carrierCount: 5,
        associatedCarrier: [1, 2, 3, 4, 5, 5],
        modulatedBy: [[], [], [], [], [6], []]
    }, {
        name: "1 2 3 4 5 6",
        carrierCount: 6,
        associatedCarrier: [1, 2, 3, 4, 5, 6],
        modulatedBy: [[], [], [], [], [], []]
    }, {
        name: "1←(2 (3 (4 (5 (6",
        carrierCount: 5,
        associatedCarrier: [1, 2, 3, 4, 5, 5],
        modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []]
    }, {
        name: "1←(2(3(4(5(6",
        carrierCount: 1,
        associatedCarrier: [1, 1, 1, 1, 1, 1],
        modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []]
    }, {
        name: "1←4(2←5(3←6",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []]
    }, {
        name: "1←4(2←5 3←6",
        carrierCount: 3,
        associatedCarrier: [1, 2, 3, 1, 2, 3],
        modulatedBy: [[2, 3, 4], [5], [6], [], [], []]
    }]),
    p.operatorCarrierInterval = [0, .04, -.073, .091, .061, .024],
    p.operatorAmplitudeMax = 15,
    p.operatorFrequencies = k([{
        name: "0.12×",
        mult: .125,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "0.25×",
        mult: .25,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "0.5×",
        mult: .5,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "0.75×",
        mult: .75,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "1×",
        mult: 1,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "~1×",
        mult: 1,
        hzOffset: 1.5,
        amplitudeSign: -1
    }, {
        name: "2×",
        mult: 2,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "~2×",
        mult: 2,
        hzOffset: -1.3,
        amplitudeSign: -1
    }, {
        name: "3×",
        mult: 3,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "3.5×",
        mult: 3.5,
        hzOffset: -.05,
        amplitudeSign: 1
    }, {
        name: "4×",
        mult: 4,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "~4×",
        mult: 4,
        hzOffset: -2.4,
        amplitudeSign: -1
    }, {
        name: "5×",
        mult: 5,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "6×",
        mult: 6,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "7×",
        mult: 7,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "8×",
        mult: 8,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "9×",
        mult: 9,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "10×",
        mult: 10,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "11×",
        mult: 11,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "12×",
        mult: 12,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "13×",
        mult: 13,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "14×",
        mult: 14,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "15×",
        mult: 15,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "16×",
        mult: 16,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "17×",
        mult: 17,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "18×",
        mult: 18,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "19×",
        mult: 19,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "20×",
        mult: 20,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "~20×",
        mult: 20,
        hzOffset: -5,
        amplitudeSign: -1
    }, {
        name: "25×",
        mult: 25,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "50×",
        mult: 50,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "75×",
        mult: 75,
        hzOffset: 0,
        amplitudeSign: 1
    }, {
        name: "100×",
        mult: 100,
        hzOffset: 0,
        amplitudeSign: 1
    }]),
    p.envelopes = k([{
        name: "none",
        type: 1,
        speed: 0
    }, {
        name: "note size",
        type: 0,
        speed: 0
    }, {
        name: "punch",
        type: 2,
        speed: 0
    }, {
        name: "flare -1",
        type: 3,
        speed: 128
    }, {
        name: "flare 1",
        type: 3,
        speed: 32
    }, {
        name: "flare 2",
        type: 3,
        speed: 8
    }, {
        name: "flare 3",
        type: 3,
        speed: 2
    }, {
        name: "twang -1",
        type: 4,
        speed: 128
    }, {
        name: "twang 1",
        type: 4,
        speed: 32
    }, {
        name: "twang 2",
        type: 4,
        speed: 8
    }, {
        name: "twang 3",
        type: 4,
        speed: 2
    }, {
        name: "swell -1",
        type: 5,
        speed: 128
    }, {
        name: "swell 1",
        type: 5,
        speed: 32
    }, {
        name: "swell 2",
        type: 5,
        speed: 8
    }, {
        name: "swell 3",
        type: 5,
        speed: 2
    }, {
        name: "tremolo0",
        type: 6,
        speed: 8
    }, {
        name: "tremolo1",
        type: 6,
        speed: 4
    }, {
        name: "tremolo2",
        type: 6,
        speed: 2
    }, {
        name: "tremolo3",
        type: 6,
        speed: 1
    }, {
        name: "tremolo4",
        type: 7,
        speed: 4
    }, {
        name: "tremolo5",
        type: 7,
        speed: 2
    }, {
        name: "tremolo6",
        type: 7,
        speed: 1
    }, {
        name: "decay -1",
        type: 8,
        speed: 40
    }, {
        name: "decay 1",
        type: 8,
        speed: 10
    }, {
        name: "decay 2",
        type: 8,
        speed: 7
    }, {
        name: "decay 3",
        type: 8,
        speed: 4
    }, {
        name: "wibble-1",
        type: 9,
        speed: 96
    }, {
        name: "wibble 1",
        type: 9,
        speed: 24
    }, {
        name: "wibble 2",
        type: 9,
        speed: 12
    }, {
        name: "wibble 3",
        type: 9,
        speed: 4
    }, {
        name: "linear-2",
        type: 11,
        speed: 256
    }, {
        name: "linear-1",
        type: 11,
        speed: 128
    }, {
        name: "linear 1",
        type: 11,
        speed: 32
    }, {
        name: "linear 2",
        type: 11,
        speed: 8
    }, {
        name: "linear 3",
        type: 11,
        speed: 2
    }, {
        name: "rise -2",
        type: 12,
        speed: 256
    }, {
        name: "rise -1",
        type: 12,
        speed: 128
    }, {
        name: "rise 1",
        type: 12,
        speed: 32
    }, {
        name: "rise 2",
        type: 12,
        speed: 8
    }, {
        name: "rise 3",
        type: 12,
        speed: 2
    }, {
        name: "flute 1",
        type: 9,
        speed: 16
    }, {
        name: "flute 2",
        type: 9,
        speed: 8
    }, {
        name: "flute 3",
        type: 9,
        speed: 4
    }, {
        name: "tripolo1",
        type: 6,
        speed: 9
    }, {
        name: "tripolo2",
        type: 6,
        speed: 6
    }, {
        name: "tripolo3",
        type: 6,
        speed: 3
    }, {
        name: "tripolo4",
        type: 7,
        speed: 9
    }, {
        name: "tripolo5",
        type: 7,
        speed: 6
    }, {
        name: "tripolo6",
        type: 7,
        speed: 3
    }, {
        name: "pentolo1",
        type: 6,
        speed: 10
    }, {
        name: "pentolo2",
        type: 6,
        speed: 5
    }, {
        name: "pentolo3",
        type: 6,
        speed: 2.5
    }, {
        name: "pentolo4",
        type: 7,
        speed: 10
    }, {
        name: "pentolo5",
        type: 7,
        speed: 5
    }, {
        name: "pentolo6",
        type: 7,
        speed: 2.5
    }, {
        name: "flutter 1",
        type: 6,
        speed: 14
    }, {
        name: "flutter 2",
        type: 7,
        speed: 11
    }, {
        name: "water-y flutter",
        type: 6,
        speed: 9
    }, {
        name: "blip 1",
        type: 13,
        speed: 6
    }, {
        name: "blip 2",
        type: 13,
        speed: 16
    }, {
        name: "blip 3",
        type: 13,
        speed: 32
    }]),
    p.feedbacks = k([{
        name: "1⟲",
        indices: [[1], [], [], []]
    }, {
        name: "2⟲",
        indices: [[], [2], [], []]
    }, {
        name: "3⟲",
        indices: [[], [], [3], []]
    }, {
        name: "4⟲",
        indices: [[], [], [], [4]]
    }, {
        name: "1⟲ 2⟲",
        indices: [[1], [2], [], []]
    }, {
        name: "3⟲ 4⟲",
        indices: [[], [], [3], [4]]
    }, {
        name: "1⟲ 2⟲ 3⟲",
        indices: [[1], [2], [3], []]
    }, {
        name: "2⟲ 3⟲ 4⟲",
        indices: [[], [2], [3], [4]]
    }, {
        name: "1⟲ 2⟲ 3⟲ 4⟲",
        indices: [[1], [2], [3], [4]]
    }, {
        name: "1→2",
        indices: [[], [1], [], []]
    }, {
        name: "1→3",
        indices: [[], [], [1], []]
    }, {
        name: "1→4",
        indices: [[], [], [], [1]]
    }, {
        name: "2→3",
        indices: [[], [], [2], []]
    }, {
        name: "2→4",
        indices: [[], [], [], [2]]
    }, {
        name: "3→4",
        indices: [[], [], [], [3]]
    }, {
        name: "1→3 2→4",
        indices: [[], [], [1], [2]]
    }, {
        name: "1→4 2→3",
        indices: [[], [], [2], [1]]
    }, {
        name: "1→2→3→4",
        indices: [[], [1], [2], [3]]
    }, {
        name: "1↔2 3↔4",
        indices: [[2], [1], [4], [3]]
    }, {
        name: "1↔4 2↔3",
        indices: [[4], [3], [2], [1]]
    }, {
        name: "2→1→4→3→2",
        indices: [[2], [3], [4], [1]]
    }, {
        name: "1→2→3→4→1",
        indices: [[4], [1], [2], [3]]
    }, {
        name: "(1 2 3)→4",
        indices: [[], [], [], [1, 2, 3]]
    }, {
        name: "ALL",
        indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
    }]),
    p.feedbacks6Op = k([{
        name: "Custom",
        indices: [[2, 3, 4, 5, 6], [], [], [], [], []]
    }, {
        name: "1⟲",
        indices: [[1], [], [], [], [], []]
    }, {
        name: "2⟲",
        indices: [[], [2], [], [], [], []]
    }, {
        name: "3⟲",
        indices: [[], [], [3], [], [], []]
    }, {
        name: "4⟲",
        indices: [[], [], [], [4], [], []]
    }, {
        name: "5⟲",
        indices: [[], [], [], [], [5], []]
    }, {
        name: "6⟲",
        indices: [[], [], [], [], [], [6]]
    }, {
        name: "1⟲ 2⟲",
        indices: [[1], [2], [], [], [], []]
    }, {
        name: "3⟲ 4⟲",
        indices: [[], [], [3], [4], [], []]
    }, {
        name: "1⟲ 2⟲ 3⟲",
        indices: [[1], [2], [3], [], [], []]
    }, {
        name: "2⟲ 3⟲ 4⟲",
        indices: [[], [2], [3], [4], [], []]
    }, {
        name: "1⟲ 2⟲ 3⟲ 4⟲",
        indices: [[1], [2], [3], [4], [], []]
    }, {
        name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲",
        indices: [[1], [2], [3], [4], [5], []]
    }, {
        name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲",
        indices: [[1], [2], [3], [4], [5], [6]]
    }, {
        name: "1→2",
        indices: [[], [1], [], [], [], []]
    }, {
        name: "1→3",
        indices: [[], [], [1], [], [], []]
    }, {
        name: "1→4",
        indices: [[], [], [], [1], [], []]
    }, {
        name: "1→5",
        indices: [[], [], [], [], [1], []]
    }, {
        name: "1→6",
        indices: [[], [], [], [], [], [1]]
    }, {
        name: "2→3",
        indices: [[], [], [2], [], [], []]
    }, {
        name: "2→4",
        indices: [[], [], [], [2], [], []]
    }, {
        name: "3→4",
        indices: [[], [], [], [3], [], []]
    }, {
        name: "4→5",
        indices: [[], [], [], [], [4], []]
    }, {
        name: "1→4 2→5 3→6",
        indices: [[], [], [], [1], [2], [3]]
    }, {
        name: "1→5 2→6 3→4",
        indices: [[], [], [], [3], [1], [2]]
    }, {
        name: "1→2→3→4→5→6",
        indices: [[], [1], [2], [3], [4], [5]]
    }, {
        name: "2→1→6→5→4→3→2",
        indices: [[2], [3], [4], [5], [6], [1]]
    }, {
        name: "1→2→3→4→5→6→1",
        indices: [[6], [1], [2], [3], [4], [5]]
    }, {
        name: "1↔2 3↔4 5↔6",
        indices: [[2], [1], [4], [3], [6], [5]]
    }, {
        name: "1↔4 2↔5 3↔6",
        indices: [[4], [5], [6], [1], [2], [3]]
    }, {
        name: "(1,2,3,4,5)→6",
        indices: [[], [], [], [], [], [1, 2, 3, 4, 5]]
    }, {
        name: "ALL",
        indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]
    }]),
    p.chipNoiseLength = 32768,
    p.spectrumNoiseLength = 32768,
    p.spectrumBasePitch = 24,
    p.spectrumControlPoints = 30,
    p.spectrumControlPointsPerOctave = 7,
    p.spectrumControlPointBits = 3,
    p.spectrumMax = (1 << p.spectrumControlPointBits) - 1,
    p.harmonicsControlPoints = 28,
    p.harmonicsRendered = 64,
    p.harmonicsRenderedForPickedString = 256,
    p.harmonicsControlPointBits = 3,
    p.harmonicsMax = (1 << p.harmonicsControlPointBits) - 1,
    p.harmonicsWavelength = 2048,
    p.pulseWidthRange = 50,
    p.pulseWidthStepPower = .5,
    p.supersawVoiceCount = 7,
    p.supersawDynamismMax = 6,
    p.supersawSpreadMax = 12,
    p.supersawShapeMax = 6,
    p.pitchChannelCountMin = 1,
    p.pitchChannelCountMax = 60,
    p.noiseChannelCountMin = 0,
    p.noiseChannelCountMax = 60,
    p.modChannelCountMin = 0,
    p.modChannelCountMax = 60,
    p.noiseInterval = 6,
    p.pitchesPerOctave = 12,
    p.drumCount = 12,
    p.pitchOctaves = 8,
    p.modCount = 6,
    p.maxPitch = p.pitchOctaves * p.pitchesPerOctave,
    p.maximumTonesPerChannel = 2 * p.maxChordSize,
    p.justIntonationSemitones = [.5, 8 / 15, 9 / 16, .6, 5 / 8, 2 / 3, 32 / 45, 3 / 4, .8, 5 / 6, 8 / 9, 15 / 16, 1, 16 / 15, 9 / 8, 1.2, 5 / 4, 4 / 3, 45 / 32, 1.5, 1.6, 5 / 3, 16 / 9, 15 / 8, 2].map((t => Math.log2(t) * p.pitchesPerOctave)),
    p.pitchShiftRange = p.justIntonationSemitones.length,
    p.pitchShiftCenter = p.pitchShiftRange >> 1,
    p.detuneCenter = 200,
    p.detuneMax = 400,
    p.detuneMin = 0,
    p.songDetuneMin = 0,
    p.songDetuneMax = 500,
    p.unisonVoicesMin = 1,
    p.unisonVoicesMax = 2,
    p.unisonSpreadMin = -96,
    p.unisonSpreadMax = 96,
    p.unisonOffsetMin = -96,
    p.unisonOffsetMax = 96,
    p.unisonExpressionMin = -2,
    p.unisonExpressionMax = 2,
    p.unisonSignMin = -2,
    p.unisonSignMax = 2,
    p.sineWaveLength = 256,
    p.sineWaveMask = p.sineWaveLength - 1,
    p.sineWave = function() {
        const t = new Float32Array(p.sineWaveLength + 1);
        for (let e = 0; e < p.sineWaveLength + 1; e++)
            t[e] = Math.sin(e * Math.PI * 2 / p.sineWaveLength);
        return t
    }(),
    p.pickedStringDispersionCenterFreq = 6e3,
    p.pickedStringDispersionFreqScale = .3,
    p.pickedStringDispersionFreqMult = 4,
    p.pickedStringShelfHz = 4e3,
    p.distortionRange = 8,
    p.stringSustainRange = 15,
    p.stringDecayRate = .12,
    p.enableAcousticSustain = !1,
    p.sustainTypeNames = ["bright", "acoustic"],
    p.bitcrusherFreqRange = 14,
    p.bitcrusherOctaveStep = .5,
    p.bitcrusherQuantizationRange = 8,
    p.maxEnvelopeCount = 12,
    p.defaultAutomationRange = 13,
    p.instrumentAutomationTargets = k([{
        name: "none",
        computeIndex: null,
        displayName: "none",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: null
    }, {
        name: "noteVolume",
        computeIndex: 0,
        displayName: "note volume",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: null
    }, {
        name: "pulseWidth",
        computeIndex: 2,
        displayName: "pulse width",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [6, 8]
    }, {
        name: "stringSustain",
        computeIndex: 3,
        displayName: "sustain",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [7]
    }, {
        name: "unison",
        computeIndex: 4,
        displayName: "unison",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [0, 5, 7, 9, 6, 2, 3]
    }, {
        name: "operatorFrequency",
        computeIndex: 5,
        displayName: "fm# freq",
        interleave: !0,
        isFilter: !1,
        maxCount: p.operatorCount + 2,
        effect: null,
        compatibleInstruments: [1, 11]
    }, {
        name: "operatorAmplitude",
        computeIndex: 11,
        displayName: "fm# volume",
        interleave: !1,
        isFilter: !1,
        maxCount: p.operatorCount + 2,
        effect: null,
        compatibleInstruments: [1, 11]
    }, {
        name: "feedbackAmplitude",
        computeIndex: 17,
        displayName: "fm feedback",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [1, 11]
    }, {
        name: "pitchShift",
        computeIndex: 18,
        displayName: "pitch shift",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: 7,
        compatibleInstruments: null
    }, {
        name: "detune",
        computeIndex: 19,
        displayName: "detune",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: 8,
        compatibleInstruments: null
    }, {
        name: "vibratoDepth",
        computeIndex: 20,
        displayName: "vibrato range",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: 9,
        compatibleInstruments: null
    }, {
        name: "noteFilterAllFreqs",
        computeIndex: 1,
        displayName: "n. filter freqs",
        interleave: !1,
        isFilter: !0,
        maxCount: 1,
        effect: 5,
        compatibleInstruments: null
    }, {
        name: "noteFilterFreq",
        computeIndex: 21,
        displayName: "n. filter # freq",
        interleave: !1,
        isFilter: !0,
        maxCount: p.filterMaxPoints,
        effect: 5,
        compatibleInstruments: null
    }, {
        name: "decimalOffset",
        computeIndex: 37,
        displayName: "decimal offset",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [6, 8]
    }, {
        name: "supersawDynamism",
        computeIndex: 38,
        displayName: "dynamism",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [8]
    }, {
        name: "supersawSpread",
        computeIndex: 39,
        displayName: "spread",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [8]
    }, {
        name: "supersawShape",
        computeIndex: 40,
        displayName: "saw↔pulse",
        interleave: !1,
        isFilter: !1,
        maxCount: 1,
        effect: null,
        compatibleInstruments: [8]
    }]),
    p.operatorWaves = k([{
        name: "sine",
        samples: p.sineWave
    }, {
        name: "triangle",
        samples: function() {
            const t = new Float32Array(p.sineWaveLength + 1);
            for (let e = 0; e < p.sineWaveLength + 1; e++)
                t[e] = Math.asin(Math.sin(e * Math.PI * 2 / p.sineWaveLength)) / (Math.PI / 2);
            return t
        }()
    }, {
        name: "pulse width",
        samples: w()
    }, {
        name: "sawtooth",
        samples: v()
    }, {
        name: "ramp",
        samples: v(!0)
    }, {
        name: "trapezoid",
        samples: function(t=2) {
            const e = new Float32Array(p.sineWaveLength + 1);
            for (let i = 0; i < p.sineWaveLength + 1; i++)
                e[i] = Math.max(-1, Math.min(1, Math.asin(Math.sin(i * Math.PI * 2 / p.sineWaveLength)) * t));
            return e
        }(2)
    }, {
        name: "quasi-sine",
        samples: function() {
            const t = new Float32Array(p.sineWaveLength + 1);
            for (let e = 0; e < p.sineWaveLength + 1; e++)
                t[e] = Math.round(Math.sin(e * Math.PI * 2 / p.sineWaveLength));
            return t
        }()
    }]),
    p.pwmOperatorWaves = k([{
        name: "1%",
        samples: w(.01)
    }, {
        name: "5%",
        samples: w(.05)
    }, {
        name: "12.5%",
        samples: w(.125)
    }, {
        name: "25%",
        samples: w(.25)
    }, {
        name: "33%",
        samples: w(1 / 3)
    }, {
        name: "50%",
        samples: w(.5)
    }, {
        name: "66%",
        samples: w(2 / 3)
    }, {
        name: "75%",
        samples: w(.75)
    }, {
        name: "87.5%",
        samples: w(.875)
    }, {
        name: "95%",
        samples: w(.95)
    }, {
        name: "99%",
        samples: w(.99)
    }]),
    p.barEditorHeight = 10,
    p.modulators = k([{
        name: "none",
        pianoName: "None",
        maxRawVol: 6,
        newNoteVol: 6,
        forSong: !0,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "No Mod Setting",
        promptDesc: ["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.", "[$LO - $HI]"]
    }, {
        name: "song volume",
        pianoName: "Volume",
        maxRawVol: 100,
        newNoteVol: 100,
        forSong: !0,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Song Volume",
        promptDesc: ["This setting affects the overall volume of the song, just like the main volume slider.", "At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "tempo",
        pianoName: "Tempo",
        maxRawVol: p.tempoMax - p.tempoMin,
        newNoteVol: Math.ceil((p.tempoMax - p.tempoMin) / 2),
        forSong: !0,
        convertRealFactor: p.tempoMin,
        associatedEffect: 12,
        promptName: "Song Tempo",
        promptDesc: ["This setting controls the speed your song plays at, just like the tempo slider.", "When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.", "Note that you can make a 'swing' effect by rapidly changing between two tempo values.", "[OVERWRITING] [$LO - $HI] [BPM]"]
    }, {
        name: "song reverb",
        pianoName: "Reverb",
        maxRawVol: 2 * p.reverbRange,
        newNoteVol: p.reverbRange,
        forSong: !0,
        convertRealFactor: -p.reverbRange,
        associatedEffect: 12,
        promptName: "Song Reverb",
        promptDesc: ["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.", "At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"]
    }, {
        name: "next bar",
        pianoName: "Next Bar",
        maxRawVol: 1,
        newNoteVol: 1,
        forSong: !0,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Go To Next Bar",
        promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.", "This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.", "You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.", "[$LO - $HI]"]
    }, {
        name: "note volume",
        pianoName: "Note Vol.",
        maxRawVol: p.volumeRange,
        newNoteVol: Math.ceil(p.volumeRange / 2),
        forSong: !1,
        convertRealFactor: Math.ceil(-p.volumeRange / 2),
        associatedEffect: 12,
        promptName: "Note Volume",
        promptDesc: ["This setting affects the volume of your instrument as if its note size had been scaled.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.", "For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.", "[MULTIPLICATIVE] [$LO - $HI]"]
    }, {
        name: "pan",
        pianoName: "Pan",
        maxRawVol: p.panMax,
        newNoteVol: Math.ceil(p.panMax / 2),
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 2,
        promptName: "Instrument Panning",
        promptDesc: ["This setting controls the panning of your instrument, just like the panning slider.", "At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.", "[OVERWRITING] [$LO - $HI] [L-R]"]
    }, {
        name: "reverb",
        pianoName: "Reverb",
        maxRawVol: p.reverbRange,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 0,
        promptName: "Instrument Reverb",
        promptDesc: ["This setting controls the reverb of your insturment, just like the reverb slider.", "At $LO, your instrument will have no reverb. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "distortion",
        pianoName: "Distortion",
        maxRawVol: p.distortionRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 3,
        promptName: "Instrument Distortion",
        promptDesc: ["This setting controls the amount of distortion for your instrument, just like the distortion slider.", "At $LO, your instrument will have no distortion. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "fm slider 1",
        pianoName: "FM 1",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 1",
        promptDesc: ["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "fm slider 2",
        pianoName: "FM 2",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 2",
        promptDesc: ["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "fm slider 3",
        pianoName: "FM 3",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 3",
        promptDesc: ["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "fm slider 4",
        pianoName: "FM 4",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 4",
        promptDesc: ["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "fm feedback",
        pianoName: "FM Feedback",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Feedback",
        promptDesc: ["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "pulse width",
        pianoName: "Pulse Width",
        maxRawVol: p.pulseWidthRange,
        newNoteVol: p.pulseWidthRange,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Pulse Width",
        promptDesc: ["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.", "At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).", "Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.", "[OVERWRITING] [$LO - $HI] [%Duty]"]
    }, {
        name: "detune",
        pianoName: "Detune",
        maxRawVol: p.detuneMax - p.detuneMin,
        newNoteVol: p.detuneCenter,
        forSong: !1,
        convertRealFactor: -p.detuneCenter,
        associatedEffect: 8,
        promptName: "Instrument Detune",
        promptDesc: ["This setting controls the detune for this instrument, just like the detune slider.", "At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.", "[OVERWRITING] [$LO - $HI] [cents]"]
    }, {
        name: "vibrato depth",
        pianoName: "Vibrato Depth",
        maxRawVol: 50,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 9,
        promptName: "Vibrato Depth",
        promptDesc: ["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.", "At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.", "[OVERWRITING] [$LO - $HI] [pitch ÷25]"]
    }, {
        name: "song detune",
        pianoName: "Detune",
        maxRawVol: p.songDetuneMax - p.songDetuneMin,
        newNoteVol: Math.ceil((p.songDetuneMax - p.songDetuneMin) / 2),
        forSong: !0,
        convertRealFactor: -250,
        associatedEffect: 12,
        promptName: "Song Detune",
        promptDesc: ["This setting controls the overall detune of the entire song. There is no associated slider.", "At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.", "[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]
    }, {
        name: "vibrato speed",
        pianoName: "Vibrato Speed",
        maxRawVol: 30,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 9,
        promptName: "Vibrato Speed",
        promptDesc: ["This setting controls the speed your instrument will vibrato at, just like the slider.", "A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "vibrato delay",
        pianoName: "Vibrato Delay",
        maxRawVol: 50,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 9,
        promptName: "Vibrato Delay",
        promptDesc: ["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.", "A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).", "[OVERWRITING] [$LO - $HI] [beats ÷24]"]
    }, {
        name: "arp speed",
        pianoName: "Arp Speed",
        maxRawVol: 50,
        newNoteVol: 12,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 11,
        promptName: "Arpeggio Speed",
        promptDesc: ["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.", "Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.", "[0-4]: x0, x1/16, x⅛, x⅕, x¼,", "[5-9]: x⅓, x⅖, x½, x⅔, x¾,", "[10-14]: x⅘, x0.9, x1, x1.1, x1.2,", "[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,", "[20-24]: x1.8, x1.9, x2, x2.1, x2.2,", "[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,", "[30-34]: x2.8, x2.9, x3, x3.1, x3.2,", "[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,", "[40-44]: x3.8, x3.9, x4, x4.15, x4.3,", "[45-50]: x4.5, x4.8, x5, x5.5, x6, x8", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "pan delay",
        pianoName: "Pan Delay",
        maxRawVol: 20,
        newNoteVol: 10,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 2,
        promptName: "Panning Delay",
        promptDesc: ["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.", "With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "reset arp",
        pianoName: "Reset Arp",
        maxRawVol: 1,
        newNoteVol: 1,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 11,
        promptName: "Reset Arpeggio",
        promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.", "This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.", "[$LO - $HI]"]
    }, {
        name: "eq filter",
        pianoName: "EQFlt",
        maxRawVol: 10,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "EQ Filter",
        promptDesc: ["This setting controls a few separate things for your instrument's EQ filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "note filter",
        pianoName: "N.Flt",
        maxRawVol: 10,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 5,
        promptName: "Note Filter",
        promptDesc: ["This setting controls a few separate things for your instrument's note filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "bit crush",
        pianoName: "Bitcrush",
        maxRawVol: p.bitcrusherQuantizationRange - 1,
        newNoteVol: Math.round(p.bitcrusherQuantizationRange / 2),
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 4,
        promptName: "Instrument Bit Crush",
        promptDesc: ["This setting controls the bit crush of your instrument, just like the bit crush slider.", "At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "freq crush",
        pianoName: "Freq Crush",
        maxRawVol: p.bitcrusherFreqRange - 1,
        newNoteVol: Math.round(p.bitcrusherFreqRange / 2),
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 4,
        promptName: "Instrument Frequency Crush",
        promptDesc: ["This setting controls the frequency crush of your instrument, just like the freq crush slider.", "At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "echo",
        pianoName: "Echo",
        maxRawVol: p.echoSustainRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 6,
        promptName: "Instrument Echo Sustain",
        promptDesc: ["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.", "At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "echo delay",
        pianoName: "Echo Delay",
        maxRawVol: p.echoDelayRange,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Instrument Echo Delay",
        promptDesc: ["This setting controls the echo delay of your instrument, just like the echo delay slider.", "At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.", "[OVERWRITING] [$LO - $HI] [~beats ÷12]"]
    }, {
        name: "chorus",
        pianoName: "Chorus",
        maxRawVol: p.chorusRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 1,
        promptName: "Instrument Chorus",
        promptDesc: ["This setting controls the chorus strength of your instrument, just like the chorus slider.", "At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "eq filt cut",
        pianoName: "EQFlt Cut",
        maxRawVol: p.filterSimpleCutRange - 1,
        newNoteVol: p.filterSimpleCutRange - 1,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "EQ Filter Cutoff Frequency",
        promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "eq filt peak",
        pianoName: "EQFlt Peak",
        maxRawVol: p.filterSimplePeakRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "EQ Filter Peak Gain",
        promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "note filt cut",
        pianoName: "N.Flt Cut",
        maxRawVol: p.filterSimpleCutRange - 1,
        newNoteVol: p.filterSimpleCutRange - 1,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 5,
        promptName: "Note Filter Cutoff Frequency",
        promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "note filt peak",
        pianoName: "N.Flt Peak",
        maxRawVol: p.filterSimplePeakRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 5,
        promptName: "Note Filter Peak Gain",
        promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "pitch shift",
        pianoName: "Pitch Shift",
        maxRawVol: p.pitchShiftRange - 1,
        newNoteVol: p.pitchShiftCenter,
        forSong: !1,
        convertRealFactor: -p.pitchShiftCenter,
        associatedEffect: 7,
        promptName: "Pitch Shift",
        promptDesc: ["This setting controls the pitch offset of your instrument, just like the pitch shift slider.", "At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.", "[OVERWRITING] [$LO - $HI] [pitch]"]
    }, {
        name: "sustain",
        pianoName: "Sustain",
        maxRawVol: p.stringSustainRange - 1,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Picked String Sustain",
        promptDesc: ["This setting controls the sustain of your picked string instrument, just like the sustain slider.", "At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "mix volume",
        pianoName: "Mix Vol.",
        maxRawVol: p.volumeRange,
        newNoteVol: Math.ceil(p.volumeRange / 2),
        forSong: !1,
        convertRealFactor: Math.ceil(-p.volumeRange / 2),
        associatedEffect: 12,
        promptName: "Mix Volume",
        promptDesc: ["This setting affects the volume of your instrument as if its volume slider had been moved.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.", "[MULTIPLICATIVE] [$LO - $HI]"]
    }, {
        name: "fm slider 5",
        pianoName: "FM 5",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 5",
        promptDesc: ["This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "fm slider 6",
        pianoName: "FM 6",
        maxRawVol: 15,
        newNoteVol: 15,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "FM Slider 6",
        promptDesc: ["This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"]
    }, {
        name: "decimal offset",
        pianoName: "Decimal Offset",
        maxRawVol: 99,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        invertSliderIndicator: !0,
        associatedEffect: 12,
        promptName: "Decimal Offset",
        promptDesc: ["This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.", "[$LO - $HI]"]
    }, {
        name: "envelope speed",
        pianoName: "EnvelopeSpd",
        maxRawVol: 50,
        newNoteVol: 12,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Envelope Speed",
        promptDesc: ["This setting controls how fast all of the envelopes for the instrument play.", "At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:", "[0-4]: x0, x1/16, x⅛, x⅕, x¼,", "[5-9]: x⅓, x⅖, x½, x⅔, x¾,", "[10-14]: x⅘, x0.9, x1, x1.1, x1.2,", "[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,", "[20-24]: x1.8, x1.9, x2, x2.1, x2.2,", "[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,", "[30-34]: x2.8, x2.9, x3, x3.1, x3.2,", "[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,", "[40-44]: x3.8, x3.9, x4, x4.15, x4.3,", "[45-50]: x4.5, x4.8, x5, x5.5, x6, x8", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "dynamism",
        pianoName: "Dynamism",
        maxRawVol: p.supersawDynamismMax,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Supersaw Dynamism",
        promptDesc: ["This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.", "At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "spread",
        pianoName: "Spread",
        maxRawVol: p.supersawSpreadMax,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Supersaw Spread",
        promptDesc: ["This setting controls the supersaw spread of your instrument, just like the spread slider.", "At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.", "[OVERWRITING] [$LO - $HI]"]
    }, {
        name: "saw shape",
        pianoName: "Saw Shape",
        maxRawVol: p.supersawShapeMax,
        newNoteVol: 0,
        forSong: !1,
        convertRealFactor: 0,
        associatedEffect: 12,
        promptName: "Supersaw Shape",
        promptDesc: ["This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.", "As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.", "[OVERWRITING] [$LO - $HI] [%]"]
    }]);
    const z = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);
    function q(t) {
        return t.toFixed(2).replace(/\.?0*$/, "")
    }
    class N {
        static valueToPreset(t) {
            var e;
            const i = t >> 6
              , n = 63 & t;
            return null === (e = N.presetCategories[i]) || void 0 === e ? void 0 : e.presets[n]
        }
        static midiProgramToPresetValue(t) {
            for (let e = 0; e < N.presetCategories.length; e++) {
                const i = N.presetCategories[e];
                for (let n = 0; n < i.presets.length; n++) {
                    const s = i.presets[n];
                    if (s.generalMidi && s.midiProgram == t)
                        return (e << 6) + n
                }
            }
            return null
        }
        static nameToPresetValue(t) {
            for (let e = 0; e < N.presetCategories.length; e++) {
                const i = N.presetCategories[e];
                for (let n = 0; n < i.presets.length; n++) {
                    if (i.presets[n].name == t)
                        return (e << 6) + n
                }
            }
            return null
        }
        static instrumentToPreset(t) {
            var e;
            return null === (e = N.presetCategories[0].presets.dictionary) || void 0 === e ? void 0 : e[null == i ? void 0 : i[t]]
        }
    }
    N.version = "2.2.14",
    N.versionDisplayName = "UltraBox " + N.version,
    N.releaseNotesURL = "./patch_notes.html",
    N.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent),
    N.ctrlSymbol = N.isOnMac ? "⌘" : "Ctrl+",
    N.ctrlName = N.isOnMac ? "command" : "control",
    N.presetCategories = k([{
        name: "Custom Instruments",
        presets: k([{
            name: i[0],
            customType: 0
        }, {
            name: i[1],
            customType: 1
        }, {
            name: i[2],
            customType: 2
        }, {
            name: i[3],
            customType: 3
        }, {
            name: i[4],
            customType: 4
        }, {
            name: i[5],
            customType: 5
        }, {
            name: i[6],
            customType: 6
        }, {
            name: i[7],
            customType: 7
        }, {
            name: i[8],
            customType: 8
        }, {
            name: i[9],
            customType: 9
        }, {
            name: i[11],
            customType: 11
        }])
    }, {
        name: "Retro Presets",
        presets: k([{
            name: "square wave",
            midiProgram: 80,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["aliasing"],
                transition: "interrupt",
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                chord: "arpeggio",
                wave: "square",
                unison: "none",
                envelopes: []
            }
        }, {
            name: "triangle wave",
            midiProgram: 71,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["aliasing"],
                transition: "interrupt",
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                chord: "arpeggio",
                wave: "triangle",
                unison: "none",
                envelopes: []
            }
        }, {
            name: "square lead",
            midiProgram: 80,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .3536
                }],
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                wave: "square",
                unison: "hum",
                envelopes: []
            }
        }, {
            name: "sawtooth lead 1",
            midiProgram: 81,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .5
                }],
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "shimmer",
                envelopes: []
            }
        }, {
            name: "sawtooth lead 2",
            midiProgram: 81,
            settings: {
                type: "chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 1
                }],
                effects: ["vibrato", "aliasing"],
                vibrato: "light",
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "hum",
                envelopes: []
            }
        }, {
            name: "chip noise",
            midiProgram: 116,
            isNoise: !0,
            settings: {
                type: "noise",
                transition: "hard",
                effects: ["aliasing"],
                chord: "arpeggio",
                filterCutoffHz: 4e3,
                filterResonance: 0,
                filterEnvelope: "steady",
                wave: "retro"
            }
        }, {
            name: "supersaw lead",
            midiProgram: 81,
            settings: {
                type: "supersaw",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 2
                }],
                effects: ["reverb"],
                reverb: 67,
                fadeInSeconds: 0,
                fadeOutTicks: -6,
                pulseWidth: 50,
                dynamism: 100,
                spread: 58,
                shape: 0,
                envelopes: []
            }
        }, {
            name: "FM twang",
            midiProgram: 32,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: [],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 1
                }]
            }
        }, {
            name: "FM bass",
            midiProgram: 36,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: [],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "custom interval",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "2×",
                    amplitude: 11
                }, {
                    frequency: "1×",
                    amplitude: 7
                }, {
                    frequency: "1×",
                    amplitude: 9
                }, {
                    frequency: "20×",
                    amplitude: 3
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 3
                }]
            }
        }, {
            name: "FM flute",
            midiProgram: 73,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: [],
                transition: "normal",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 6
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 1
                }]
            }
        }, {
            name: "FM organ",
            midiProgram: 16,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["vibrato"],
                vibrato: "delayed",
                transition: "normal",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "custom interval",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 14
                }, {
                    frequency: "2×",
                    amplitude: 14
                }, {
                    frequency: "1×",
                    amplitude: 11
                }, {
                    frequency: "2×",
                    amplitude: 11
                }],
                envelopes: []
            }
        }, {
            name: "FM sine",
            midiProgram: 55,
            settings: {
                type: "FM",
                eqFilter: [],
                eqFilterType: !0,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                envelopeSpeed: 12,
                discreteEnvelope: !1,
                effects: [],
                panDelay: 10,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                algorithm: "1 2 3 4",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine"
                }],
                envelopes: []
            }
        }, {
            name: "NES Pulse",
            midiProgram: 80,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .5
                }],
                unison: "none",
                vibrato: "none",
                envelopes: [],
                customChipWave: [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17]
            }
        }, {
            name: "Gameboy Pulse",
            midiProgram: 80,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .5
                }],
                unison: "none",
                envelopes: [],
                customChipWave: [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3]
            }
        }, {
            name: "VRC6 Sawtooth",
            midiProgram: 81,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .5
                }],
                unison: "none",
                envelopes: [],
                customChipWave: [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]
            }
        }, {
            name: "Atari Square",
            midiProgram: 80,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .5
                }],
                unison: "none",
                envelopes: [],
                customChipWave: [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15]
            }
        }, {
            name: "Atari Bass",
            midiProgram: 36,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "interrupt",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .5
                }],
                unison: "none",
                envelopes: [],
                customChipWave: [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24]
            }
        }, {
            name: "Sunsoft Bass",
            midiProgram: 36,
            settings: {
                type: "custom chip",
                effects: ["aliasing"],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "arpeggio",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .5
                }],
                unison: "none",
                envelopes: [],
                customChipWave: [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24]
            }
        }])
    }, {
        name: "Keyboard Presets",
        presets: k([{
            name: "grand piano 1",
            midiProgram: 0,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .7071
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: 2.8284
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .125
                }],
                reverb: 67,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                harmonics: [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57],
                unison: "piano",
                stringSustain: 79,
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "note size"
                }]
            }
        }, {
            name: "bright piano",
            midiProgram: 1,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 1681.79,
                    linearGain: .7071
                }, {
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .5
                }, {
                    type: "peak",
                    cutoffHz: 3363.59,
                    linearGain: 1.4142
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 24,
                chord: "simultaneous",
                harmonics: [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57],
                unison: "piano",
                stringSustain: 86,
                envelopes: []
            }
        }, {
            name: "electric grand",
            midiProgram: 2,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: .5
                }],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                wave: "1/8 pulse",
                unison: "shimmer",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "honky-tonk piano",
            midiProgram: 3,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 5656.85,
                    linearGain: .3536
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                harmonics: [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43],
                unison: "honky tonk",
                stringSustain: 71,
                envelopes: []
            }
        }, {
            name: "electric piano 1",
            midiProgram: 4,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 3363.59,
                    linearGain: .5
                }],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                harmonics: [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0],
                unison: "none",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "electric piano 2",
            midiProgram: 5,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 13454.34,
                    linearGain: .25
                }],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 12
                }, {
                    frequency: "1×",
                    amplitude: 6
                }, {
                    frequency: "1×",
                    amplitude: 9
                }, {
                    frequency: "16×",
                    amplitude: 6
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 3
                }]
            }
        }, {
            name: "harpsichord",
            midiProgram: 6,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 250,
                    linearGain: .3536
                }, {
                    type: "peak",
                    cutoffHz: 11313.71,
                    linearGain: 2.8284
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 24,
                chord: "simultaneous",
                harmonics: [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71],
                unison: "none",
                stringSustain: 79,
                envelopes: []
            }
        }, {
            name: "clavinet",
            midiProgram: 7,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .3536
                }],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "3⟲",
                feedbackAmplitude: 6,
                operators: [{
                    frequency: "3×",
                    amplitude: 15
                }, {
                    frequency: "~1×",
                    amplitude: 6
                }, {
                    frequency: "8×",
                    amplitude: 4
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 2"
                }, {
                    target: "feedbackAmplitude",
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "dulcimer",
            midiProgram: 15,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .3536
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "strum",
                harmonics: [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86],
                unison: "piano",
                stringSustain: 79,
                envelopes: []
            }
        }, {
            name: "grand piano 2",
            midiProgram: 0,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .7071
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: 2.8284
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .125
                }],
                reverb: 67,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                harmonics: [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29],
                unison: "piano",
                stringSustain: 79,
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "note size"
                }]
            }
        }, {
            name: "grand piano 3",
            midiProgram: 0,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .7071
                }, {
                    type: "peak",
                    cutoffHz: 1681.79,
                    linearGain: 4
                }, {
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .1768
                }, {
                    type: "peak",
                    cutoffHz: 3363.59,
                    linearGain: 4
                }, {
                    type: "peak",
                    cutoffHz: 2378.41,
                    linearGain: .25
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .3536
                }, {
                    type: "high-pass",
                    cutoffHz: 125,
                    linearGain: .0884
                }],
                reverb: 67,
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                harmonics: [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57],
                unison: "piano",
                stringSustain: 86,
                stringSustainType: "acoustic",
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "note size",
                    index: 0
                }, {
                    target: "noteFilterFreq",
                    envelope: "twang 1",
                    index: 1
                }, {
                    target: "noteFilterFreq",
                    envelope: "twang 1",
                    index: 1
                }]
            }
        }])
    }, {
        name: "Idiophone Presets",
        presets: k([{
            name: "celesta",
            midiProgram: 8,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 5657,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "~1×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 6,
                    envelope: "custom"
                }, {
                    frequency: "20×",
                    amplitude: 3,
                    envelope: "twang 1"
                }, {
                    frequency: "3×",
                    amplitude: 1,
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "glockenspiel",
            midiProgram: 9,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 5657,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "decay 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "5×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "20×",
                    amplitude: 2,
                    envelope: "twang 1"
                }]
            }
        }, {
            name: "music box 1",
            midiProgram: 10,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .5
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "strum",
                harmonics: [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0],
                unison: "none",
                stringSustain: 64,
                envelopes: []
            }
        }, {
            name: "music box 2",
            midiProgram: 10,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: .7071
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "strum",
                harmonics: [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0],
                unison: "none",
                stringSustain: 29,
                envelopes: []
            }
        }, {
            name: "vibraphone",
            midiProgram: 11,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1→2→3→4",
                feedbackAmplitude: 3,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "~1×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "9×",
                    amplitude: 3,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 9,
                    envelope: "custom"
                }]
            }
        }, {
            name: "marimba",
            midiProgram: 12,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "decay 1",
                vibrato: "none",
                algorithm: "1 2←(3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 6,
                    envelope: "custom"
                }, {
                    frequency: "13×",
                    amplitude: 6,
                    envelope: "twang 1"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "kalimba",
            midiProgram: 108,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "decay 1",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "5×",
                    amplitude: 3,
                    envelope: "twang 2"
                }, {
                    frequency: "20×",
                    amplitude: 3,
                    envelope: "twang 1"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "xylophone",
            midiProgram: 13,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "11×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "20×",
                    amplitude: 6,
                    envelope: "twang 1"
                }]
            }
        }, {
            name: "tubular bell",
            midiProgram: 14,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .5
                }, {
                    type: "high-pass",
                    cutoffHz: 105.11,
                    linearGain: .3536
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 96,
                chord: "strum",
                harmonics: [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14],
                unison: "shimmer",
                stringSustain: 86,
                envelopes: []
            }
        }, {
            name: "bell synth",
            midiProgram: 14,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "twang 3",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "~2×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "7×",
                    amplitude: 6,
                    envelope: "twang 3"
                }, {
                    frequency: "20×",
                    amplitude: 1,
                    envelope: "twang 1"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "rain drop",
            midiProgram: 96,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 4,
                    envelope: "custom"
                }, {
                    frequency: "20×",
                    amplitude: 3,
                    envelope: "twang 1"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "tremolo1"
                }]
            }
        }, {
            name: "crystal",
            midiProgram: 98,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "delayed",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 4,
                    envelope: "custom"
                }, {
                    frequency: "13×",
                    amplitude: 4,
                    envelope: "custom"
                }]
            }
        }, {
            name: "tinkle bell",
            midiProgram: 112,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1→2→3→4",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "~2×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "5×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "7×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "16×",
                    amplitude: 7,
                    envelope: "custom"
                }]
            }
        }, {
            name: "agogo",
            midiProgram: 113,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "decay 1",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1→4",
                feedbackAmplitude: 15,
                feedbackEnvelope: "decay 1",
                operators: [{
                    frequency: "2×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "5×",
                    amplitude: 6,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "13×",
                    amplitude: 11,
                    envelope: "custom"
                }]
            }
        }])
    }, {
        name: "Guitar Presets",
        presets: k([{
            name: "nylon guitar",
            midiProgram: 24,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 5657,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←2←3←4",
                feedbackType: "3⟲",
                feedbackAmplitude: 6,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "5×",
                    amplitude: 2,
                    envelope: "steady"
                }, {
                    frequency: "7×",
                    amplitude: 4,
                    envelope: "steady"
                }]
            }
        }, {
            name: "steel guitar",
            midiProgram: 25,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "strum",
                harmonics: [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],
                unison: "none",
                stringSustain: 71,
                envelopes: []
            }
        }, {
            name: "jazz guitar",
            midiProgram: 26,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0]
            }
        }, {
            name: "clean guitar",
            midiProgram: 27,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                interval: "union",
                vibrato: "none",
                harmonics: [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43]
            }
        }, {
            name: "muted guitar",
            midiProgram: 28,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 7,
                feedbackEnvelope: "twang 2",
                operators: [{
                    frequency: "1×",
                    amplitude: 13,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 4,
                    envelope: "twang 3"
                }, {
                    frequency: "4×",
                    amplitude: 4,
                    envelope: "twang 2"
                }, {
                    frequency: "16×",
                    amplitude: 4,
                    envelope: "twang 1"
                }]
            }
        }])
    }, {
        name: "Picked Bass Presets",
        presets: k([{
            name: "acoustic bass",
            midiProgram: 32,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14]
            }
        }, {
            name: "fingered bass",
            midiProgram: 33,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0]
            }
        }, {
            name: "picked bass",
            midiProgram: 34,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 0,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "3⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 5,
                    envelope: "steady"
                }, {
                    frequency: "11×",
                    amplitude: 1,
                    envelope: "twang 3"
                }, {
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "steady"
                }]
            }
        }, {
            name: "fretless bass",
            midiProgram: 35,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 1e3,
                filterResonance: 14,
                filterEnvelope: "flare 2",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14]
            }
        }, {
            name: "slap bass 1",
            midiProgram: 36,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 4e3,
                filterResonance: 0,
                filterEnvelope: "twang 1",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71]
            }
        }, {
            name: "slap bass 2",
            midiProgram: 37,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 5657,
                filterResonance: 0,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←2←3←4",
                feedbackType: "3⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "3×",
                    amplitude: 13,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "13×",
                    amplitude: 3,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 11,
                    envelope: "steady"
                }]
            }
        }, {
            name: "bass synth 1",
            midiProgram: 38,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "strum",
                filterCutoffHz: 4e3,
                filterResonance: 43,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "3⟲ 4⟲",
                feedbackAmplitude: 9,
                feedbackEnvelope: "twang 2",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "twang 1"
                }, {
                    frequency: "~1×",
                    amplitude: 13,
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "bass synth 2",
            midiProgram: 39,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 1e3,
                filterResonance: 57,
                filterEnvelope: "punch",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "1→2",
                feedbackAmplitude: 4,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "steady"
                }, {
                    frequency: "3×",
                    amplitude: 0,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "bass & lead",
            midiProgram: 87,
            generalMidi: !0,
            settings: {
                type: "chip",
                transition: "hard",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 86,
                filterEnvelope: "twang 2",
                wave: "sawtooth",
                interval: "shimmer",
                vibrato: "none"
            }
        }, {
            name: "dubstep yoi yoi",
            midiProgram: 87,
            settings: {
                type: "chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: .7071
                }],
                effects: ["note filter", "bitcrusher"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 594.6,
                    linearGain: 11.3137
                }],
                bitcrusherOctave: 1.5,
                bitcrusherQuantization: 0,
                transition: "slide",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "arpeggio",
                wave: "sawtooth",
                unison: "none",
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "flare 2",
                    index: 0
                }]
            }
        }])
    }, {
        name: "Picked String Presets",
        presets: k([{
            name: "pizzicato strings",
            midiProgram: 45,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "medium fade",
                chord: "harmony",
                filterCutoffHz: 1e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 7,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "~1×",
                    amplitude: 10,
                    envelope: "steady"
                }]
            }
        }, {
            name: "harp",
            midiProgram: 46,
            generalMidi: !0,
            settings: {
                type: "FM",
                transition: "hard fade",
                effects: "reverb",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 0,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "3⟲",
                feedbackAmplitude: 6,
                feedbackEnvelope: "twang 2",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 6,
                    envelope: "custom"
                }, {
                    frequency: "~2×",
                    amplitude: 3,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }]
            }
        }, {
            name: "sitar",
            midiProgram: 104,
            generalMidi: !0,
            settings: {
                type: "FM",
                transition: "hard fade",
                effects: "reverb",
                chord: "strum",
                filterCutoffHz: 8e3,
                filterResonance: 57,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "twang 3"
                }, {
                    frequency: "9×",
                    amplitude: 3,
                    envelope: "twang 3"
                }, {
                    frequency: "16×",
                    amplitude: 9,
                    envelope: "swell 3"
                }]
            }
        }, {
            name: "banjo",
            midiProgram: 105,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "2⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "4×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "steady"
                }, {
                    frequency: "11×",
                    amplitude: 3,
                    envelope: "twang 3"
                }, {
                    frequency: "1×",
                    amplitude: 11,
                    envelope: "steady"
                }]
            }
        }, {
            name: "ukulele",
            midiProgram: 105,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 0,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "3⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "2×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "9×",
                    amplitude: 4,
                    envelope: "twang 2"
                }, {
                    frequency: "1×",
                    amplitude: 11,
                    envelope: "steady"
                }]
            }
        }, {
            name: "shamisen",
            midiProgram: 106,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "3⟲",
                feedbackAmplitude: 9,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "steady"
                }, {
                    frequency: "16×",
                    amplitude: 4,
                    envelope: "twang 3"
                }, {
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "steady"
                }]
            }
        }, {
            name: "koto",
            midiProgram: 107,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 2",
                operators: [{
                    frequency: "~1×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 8,
                    envelope: "twang 3"
                }, {
                    frequency: "~2×",
                    amplitude: 8,
                    envelope: "twang 3"
                }]
            }
        }])
    }, {
        name: "Distortion Presets",
        presets: k([{
            name: "overdrive guitar",
            midiProgram: 29,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .7071
                }, {
                    type: "high-pass",
                    cutoffHz: 210.22,
                    linearGain: 1
                }, {
                    type: "low-pass",
                    cutoffHz: 5656.85,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: .5
                }],
                effects: ["note filter", "distortion"],
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 297.3,
                    linearGain: 2
                }, {
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: .7071
                }],
                distortion: 71,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 12,
                chord: "strum",
                harmonics: [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57],
                unison: "none",
                stringSustain: 71,
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "note size",
                    index: 1
                }]
            }
        }, {
            name: "distortion guitar",
            midiProgram: 30,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .7071
                }, {
                    type: "high-pass",
                    cutoffHz: 210.22,
                    linearGain: 1
                }, {
                    type: "low-pass",
                    cutoffHz: 5656.85,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 594.6,
                    linearGain: .3536
                }, {
                    type: "peak",
                    cutoffHz: 1e3,
                    linearGain: .25
                }],
                effects: ["note filter", "distortion", "reverb"],
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 353.55,
                    linearGain: 2
                }, {
                    type: "low-pass",
                    cutoffHz: 2e3,
                    linearGain: 1
                }],
                distortion: 86,
                reverb: 67,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 12,
                chord: "strum",
                harmonics: [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57],
                unison: "none",
                stringSustain: 71,
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "note size",
                    index: 1
                }]
            }
        }, {
            name: "charango synth",
            midiProgram: 84,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 11313.71,
                    linearGain: 1
                }],
                effects: [],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                algorithm: "1←(2 3←4)",
                feedbackType: "1→2→3→4",
                feedbackAmplitude: 8,
                operators: [{
                    frequency: "3×",
                    amplitude: 13
                }, {
                    frequency: "~1×",
                    amplitude: 5
                }, {
                    frequency: "4×",
                    amplitude: 6
                }, {
                    frequency: "3×",
                    amplitude: 7
                }],
                envelopes: [{
                    target: "feedbackAmplitude",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "guitar harmonics",
            midiProgram: 31,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 2
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                algorithm: "1←(2 3)←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 2,
                operators: [{
                    frequency: "4×",
                    amplitude: 12
                }, {
                    frequency: "16×",
                    amplitude: 5
                }, {
                    frequency: "1×",
                    amplitude: 2
                }, {
                    frequency: "~1×",
                    amplitude: 12
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "punch",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 1",
                    index: 3
                }]
            }
        }, {
            name: "PWM overdrive",
            midiProgram: 29,
            settings: {
                type: "PWM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 5656.85,
                    linearGain: 1.4142
                }],
                effects: [],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                pulseWidth: 17.67767,
                envelopes: [{
                    target: "pulseWidth",
                    envelope: "punch"
                }]
            }
        }, {
            name: "PWM distortion",
            midiProgram: 30,
            settings: {
                type: "PWM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 3363.59,
                    linearGain: 2
                }],
                effects: ["vibrato"],
                vibrato: "delayed",
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                pulseWidth: 50,
                envelopes: [{
                    target: "pulseWidth",
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "FM overdrive",
            midiProgram: 29,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: 1
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                algorithm: "1←(2 3←4)",
                feedbackType: "1→2",
                feedbackAmplitude: 2,
                operators: [{
                    frequency: "~1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 12
                }, {
                    frequency: "~2×",
                    amplitude: 6
                }, {
                    frequency: "1×",
                    amplitude: 12
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "twang 1",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 3",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "punch"
                }]
            }
        }, {
            name: "FM distortion",
            midiProgram: 30,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 2
                }],
                effects: ["reverb"],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "strum",
                algorithm: "1←(2 3←4)",
                feedbackType: "1→2",
                feedbackAmplitude: 4,
                operators: [{
                    frequency: "~1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 11
                }, {
                    frequency: "1×",
                    amplitude: 9
                }, {
                    frequency: "~2×",
                    amplitude: 4
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 3",
                    index: 3
                }]
            }
        }])
    }, {
        name: "Bellows Presets",
        presets: k([{
            name: "drawbar organ 1",
            midiProgram: 16,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "none",
                harmonics: [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            }
        }, {
            name: "drawbar organ 2",
            midiProgram: 16,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "none",
                harmonics: [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0]
            }
        }, {
            name: "percussive organ",
            midiProgram: 17,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "FM",
                transition: "hard",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "punch",
                vibrato: "light",
                algorithm: "1 2 3 4",
                feedbackType: "1→3 2→4",
                feedbackAmplitude: 7,
                feedbackEnvelope: "decay 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 8,
                    envelope: "custom"
                }]
            }
        }, {
            name: "rock organ",
            midiProgram: 18,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "punch",
                vibrato: "delayed",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "flare 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 5,
                    envelope: "steady"
                }]
            }
        }, {
            name: "pipe organ",
            midiProgram: 19,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "FM",
                transition: "cross fade",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 8,
                    envelope: "custom"
                }]
            }
        }, {
            name: "reed organ",
            midiProgram: 20,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "none",
                harmonics: [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14]
            }
        }, {
            name: "accordion",
            midiProgram: 21,
            generalMidi: !0,
            settings: {
                type: "chip",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 0,
                filterEnvelope: "swell 1",
                wave: "double saw",
                interval: "honky tonk",
                vibrato: "none"
            }
        }, {
            name: "bandoneon",
            midiProgram: 23,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 29,
                filterEnvelope: "swell 1",
                interval: "hum",
                vibrato: "none",
                harmonics: [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29]
            }
        }, {
            name: "bagpipe",
            midiProgram: 109,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 43,
                filterEnvelope: "punch",
                interval: "hum",
                vibrato: "none",
                harmonics: [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43]
            }
        }])
    }, {
        name: "String Presets",
        presets: k([{
            name: "violin 1",
            midiProgram: 40,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 1.4142
                }, {
                    type: "high-pass",
                    cutoffHz: 105.11,
                    linearGain: .3536
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "delayed",
                reverb: 67,
                transition: "normal",
                fadeInSeconds: .0413,
                fadeOutTicks: 6,
                chord: "simultaneous",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "1→2",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "4×",
                    amplitude: 9
                }, {
                    frequency: "3×",
                    amplitude: 9
                }, {
                    frequency: "2×",
                    amplitude: 7
                }, {
                    frequency: "7×",
                    amplitude: 5
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "viola",
            midiProgram: 41,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "delayed",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 8,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "2×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "7×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "13×",
                    amplitude: 4,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 5,
                    envelope: "steady"
                }]
            }
        }, {
            name: "cello",
            midiProgram: 42,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: .1768
                }, {
                    type: "high-pass",
                    cutoffHz: 297.3,
                    linearGain: .7071
                }, {
                    type: "peak",
                    cutoffHz: 4756.83,
                    linearGain: 5.6569
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 16e3,
                    linearGain: .0884
                }],
                reverb: 67,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 12,
                chord: "simultaneous",
                algorithm: "(1 2)←3←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 3,
                operators: [{
                    frequency: "16×",
                    amplitude: 5
                }, {
                    frequency: "~1×",
                    amplitude: 10
                }, {
                    frequency: "1×",
                    amplitude: 9
                }, {
                    frequency: "6×",
                    amplitude: 3
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "swell 1"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 3
                }]
            }
        }, {
            name: "contrabass",
            midiProgram: 43,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "delayed",
                algorithm: "(1 2)←3←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "16×",
                    amplitude: 5,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "steady"
                }, {
                    frequency: "6×",
                    amplitude: 3,
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "fiddle",
            midiProgram: 110,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "delayed",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "3⟲ 4⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "2×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "steady"
                }, {
                    frequency: "16×",
                    amplitude: 3,
                    envelope: "steady"
                }]
            }
        }, {
            name: "tremolo strings",
            midiProgram: 44,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "medium fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 0,
                filterEnvelope: "tremolo4",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1→2→3→4",
                feedbackAmplitude: 12,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "~2×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "7×",
                    amplitude: 8,
                    envelope: "custom"
                }]
            }
        }, {
            name: "strings",
            midiProgram: 48,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "4⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "4×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 9,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "7×",
                    amplitude: 3,
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "slow strings",
            midiProgram: 49,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "soft fade",
                chord: "harmony",
                filterCutoffHz: 1414,
                filterResonance: 0,
                filterEnvelope: "swell 2",
                vibrato: "none",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "4⟲",
                feedbackAmplitude: 6,
                feedbackEnvelope: "flare 3",
                operators: [{
                    frequency: "4×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "7×",
                    amplitude: 4,
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "strings synth 1",
            midiProgram: 50,
            generalMidi: !0,
            settings: {
                type: "chip",
                transition: "soft fade",
                effects: "chorus & reverb",
                chord: "harmony",
                filterCutoffHz: 1414,
                filterResonance: 43,
                filterEnvelope: "steady",
                wave: "sawtooth",
                interval: "hum",
                vibrato: "delayed"
            }
        }, {
            name: "strings synth 2",
            midiProgram: 51,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "soft fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 12,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "3×",
                    amplitude: 6,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 9,
                    envelope: "custom"
                }]
            }
        }, {
            name: "orchestra hit 1",
            midiProgram: 55,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 14,
                filterEnvelope: "custom",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 14,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "twang 3"
                }, {
                    frequency: "2×",
                    amplitude: 15,
                    envelope: "flare 3"
                }, {
                    frequency: "4×",
                    amplitude: 15,
                    envelope: "flare 2"
                }, {
                    frequency: "8×",
                    amplitude: 15,
                    envelope: "flare 1"
                }]
            }
        }, {
            name: "violin 2",
            midiProgram: 40,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828,
                    linearGain: 1.4142
                }, {
                    type: "high-pass",
                    cutoffHz: 105.11,
                    linearGain: .3536
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "light",
                reverb: 67,
                transition: "normal",
                fadeInSeconds: .0413,
                fadeOutTicks: 6,
                chord: "simultaneous",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "4⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "twang 3",
                operators: [{
                    frequency: "4×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 13,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "7×",
                    amplitude: 8,
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "orchestra hit 2",
            midiProgram: 55,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "medium fade",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 0,
                filterEnvelope: "decay 1",
                vibrato: "delayed",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 14,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 14,
                    envelope: "custom"
                }]
            }
        }, {
            name: "supersaw string",
            midiProgram: 41,
            settings: {
                type: "supersaw",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 1.4142
                }, {
                    type: "low-pass",
                    cutoffHz: 3363.59,
                    linearGain: .1768
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 500,
                    linearGain: .1768
                }],
                reverb: 33,
                fadeInSeconds: .0263,
                fadeOutTicks: 6,
                pulseWidth: 35.35534,
                dynamism: 83,
                spread: 8,
                shape: 50,
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "twang 1",
                    index: 0
                }]
            }
        }, {
            name: "supersaw string 2",
            midiProgram: 41,
            settings: {
                type: "supersaw",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: .5
                }, {
                    type: "high-pass",
                    cutoffHz: 594.6,
                    linearGain: .25
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: 2.8284
                }, {
                    type: "peak",
                    cutoffHz: 4756.83,
                    linearGain: 2
                }],
                eqFilterType: !1,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                envelopeSpeed: 12,
                discreteEnvelope: !1,
                eqSubFilters0: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: .5
                }, {
                    type: "high-pass",
                    cutoffHz: 594.6,
                    linearGain: .25
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: 2.8284
                }, {
                    type: "peak",
                    cutoffHz: 4756.83,
                    linearGain: 2
                }],
                effects: ["note filter", "chorus", "reverb"],
                noteFilterType: !1,
                noteSimpleCut: 10,
                noteSimplePeak: 0,
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: 1
                }],
                noteSubFilters0: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: 1
                }],
                chorus: 57,
                reverb: 42,
                fadeInSeconds: .0575,
                fadeOutTicks: -6,
                pulseWidth: 50,
                dynamism: 67,
                spread: 58,
                shape: 0,
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "punch"
                }, {
                    target: "pulseWidth",
                    envelope: "flare 2"
                }]
            }
        }])
    }, {
        name: "Vocal Presets",
        presets: k([{
            name: "choir soprano",
            midiProgram: 94,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 2
                }, {
                    type: "peak",
                    cutoffHz: 1189.21,
                    linearGain: 5.6569
                }, {
                    type: "high-pass",
                    cutoffHz: 707.11,
                    linearGain: 2.8284
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: .25
                }, {
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 11.3137
                }],
                effects: ["vibrato", "chorus", "reverb"],
                vibrato: "shaky",
                chorus: 100,
                reverb: 33,
                fadeInSeconds: .0413,
                fadeOutTicks: 24,
                harmonics: [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "choir tenor",
            midiProgram: 52,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 1e3,
                    linearGain: 11.3137
                }, {
                    type: "peak",
                    cutoffHz: 707.11,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 1681.79,
                    linearGain: .0884
                }, {
                    type: "high-pass",
                    cutoffHz: 297.3,
                    linearGain: .7071
                }, {
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 11.3137
                }],
                effects: ["vibrato", "chorus", "reverb"],
                vibrato: "shaky",
                chorus: 100,
                reverb: 67,
                transition: "normal",
                fadeInSeconds: .0413,
                fadeOutTicks: 48,
                chord: "simultaneous",
                harmonics: [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "choir bass",
            midiProgram: 52,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: 11.3137
                }, {
                    type: "peak",
                    cutoffHz: 594.6,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 1681.79,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 707.11,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: 11.3137
                }],
                effects: ["vibrato", "chorus", "reverb"],
                vibrato: "shaky",
                chorus: 100,
                reverb: 67,
                transition: "normal",
                fadeInSeconds: .0413,
                fadeOutTicks: 48,
                chord: "simultaneous",
                harmonics: [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "solo soprano",
            midiProgram: 85,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 2
                }, {
                    type: "peak",
                    cutoffHz: 1189.21,
                    linearGain: 5.6569
                }, {
                    type: "high-pass",
                    cutoffHz: 707.11,
                    linearGain: 2.8284
                }, {
                    type: "peak",
                    cutoffHz: 2e3,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: .25
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "shaky",
                reverb: 33,
                fadeInSeconds: .0413,
                fadeOutTicks: 12,
                harmonics: [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "solo tenor",
            midiProgram: 85,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 1e3,
                    linearGain: 11.3137
                }, {
                    type: "peak",
                    cutoffHz: 707.11,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 1681.79,
                    linearGain: .0884
                }, {
                    type: "high-pass",
                    cutoffHz: 297.3,
                    linearGain: .7071
                }, {
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 11.3137
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "shaky",
                reverb: 33,
                fadeInSeconds: .0413,
                fadeOutTicks: 12,
                harmonics: [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "solo bass",
            midiProgram: 85,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 594.6,
                    linearGain: 8
                }, {
                    type: "peak",
                    cutoffHz: 1681.79,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 707.11,
                    linearGain: .0884
                }, {
                    type: "peak",
                    cutoffHz: 840.9,
                    linearGain: 8
                }, {
                    type: "high-pass",
                    cutoffHz: 210.22,
                    linearGain: 1.4142
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "shaky",
                reverb: 33,
                transition: "normal",
                fadeInSeconds: .0263,
                fadeOutTicks: 12,
                chord: "simultaneous",
                harmonics: [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "voice ooh",
            midiProgram: 53,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 1414,
                filterResonance: 57,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "shaky",
                harmonics: [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            }
        }, {
            name: "voice synth",
            midiProgram: 54,
            generalMidi: !0,
            settings: {
                type: "chip",
                transition: "medium fade",
                effects: "chorus & reverb",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 57,
                filterEnvelope: "steady",
                wave: "rounded",
                interval: "union",
                vibrato: "light"
            }
        }, {
            name: "vox synth lead",
            midiProgram: 85,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "steady",
                vibrato: "light",
                algorithm: "(1 2 3)←4",
                feedbackType: "1→2→3→4",
                feedbackAmplitude: 2,
                feedbackEnvelope: "punch",
                operators: [{
                    frequency: "2×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "9×",
                    amplitude: 5,
                    envelope: "custom"
                }, {
                    frequency: "20×",
                    amplitude: 1,
                    envelope: "custom"
                }, {
                    frequency: "~1×",
                    amplitude: 4,
                    envelope: "steady"
                }]
            }
        }, {
            name: "tiny robot",
            midiProgram: 85,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["vibrato", "reverb"],
                vibrato: "delayed",
                reverb: 33,
                transition: "slide",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 2,
                operators: [{
                    frequency: "2×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 7
                }, {
                    frequency: "~1×",
                    amplitude: 7
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "punch",
                    index: 1
                }, {
                    target: "feedbackAmplitude",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "yowie",
            midiProgram: 85,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 86,
                filterEnvelope: "tremolo5",
                vibrato: "none",
                algorithm: "1←2←(3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 12,
                feedbackEnvelope: "tremolo3",
                operators: [{
                    frequency: "2×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "16×",
                    amplitude: 5,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 5,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "mouse",
            midiProgram: 85,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["vibrato", "reverb"],
                vibrato: "light",
                reverb: 33,
                transition: "slide in pattern",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "2×",
                    amplitude: 13
                }, {
                    frequency: "5×",
                    amplitude: 12
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "noteVolume",
                    envelope: "note size"
                }, {
                    target: "feedbackAmplitude",
                    envelope: "flare 2"
                }]
            }
        }, {
            name: "gumdrop",
            midiProgram: 85,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 0,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 0,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "2×",
                    amplitude: 15,
                    envelope: "punch"
                }, {
                    frequency: "4×",
                    amplitude: 15,
                    envelope: "punch"
                }, {
                    frequency: "7×",
                    amplitude: 15,
                    envelope: "punch"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "twang 1"
                }]
            }
        }, {
            name: "echo drop",
            midiProgram: 102,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "punch",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "~2×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "~1×",
                    amplitude: 5,
                    envelope: "steady"
                }, {
                    frequency: "11×",
                    amplitude: 2,
                    envelope: "steady"
                }, {
                    frequency: "16×",
                    amplitude: 5,
                    envelope: "swell 3"
                }]
            }
        }, {
            name: "dark choir",
            midiProgram: 85,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 29,
                filterEnvelope: "swell 1",
                spectrum: [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0]
            }
        }])
    }, {
        name: "Brass Presets",
        presets: k([{
            name: "trumpet",
            midiProgram: 56,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 9,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 5,
                    envelope: "flare 2"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "trombone",
            midiProgram: 57,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "2⟲",
                feedbackAmplitude: 7,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "tuba",
            midiProgram: 58,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "2⟲",
                feedbackAmplitude: 8,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "muted trumpet",
            midiProgram: 59,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: 2.8284
                }, {
                    type: "peak",
                    cutoffHz: 4e3,
                    linearGain: 2.8284
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 3363.59,
                    linearGain: 1
                }],
                reverb: 33,
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "1×",
                    amplitude: 13
                }, {
                    frequency: "1×",
                    amplitude: 5
                }, {
                    frequency: "9×",
                    amplitude: 5
                }, {
                    frequency: "13×",
                    amplitude: 7
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "swell 1"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "flare 2"
                }]
            }
        }, {
            name: "french horn",
            midiProgram: 60,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 2378.41,
                    linearGain: 2.8284
                }],
                effects: ["reverb"],
                reverb: 33,
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 3,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 12
                }, {
                    frequency: "1×",
                    amplitude: 10
                }, {
                    frequency: "~1×",
                    amplitude: 8
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 2",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "brass section",
            midiProgram: 61,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "punch",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 6,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "swell 1"
                }, {
                    frequency: "~1×",
                    amplitude: 10,
                    envelope: "swell 1"
                }]
            }
        }, {
            name: "brass synth 1",
            midiProgram: 62,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 11,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "flare 1"
                }, {
                    frequency: "~1×",
                    amplitude: 8,
                    envelope: "flare 2"
                }]
            }
        }, {
            name: "brass synth 2",
            midiProgram: 63,
            generalMidi: !0,
            settings: {
                type: "FM",
                transition: "soft",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 43,
                filterEnvelope: "twang 3",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 9,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "flare 1"
                }, {
                    frequency: "~1×",
                    amplitude: 7,
                    envelope: "flare 1"
                }]
            }
        }, {
            name: "pulse brass",
            midiProgram: 62,
            settings: {
                type: "PWM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 29,
                filterEnvelope: "swell 1",
                pulseWidth: 50,
                pulseEnvelope: "flare 3",
                vibrato: "none"
            }
        }])
    }, {
        name: "Reed Presets",
        presets: k([{
            name: "soprano sax",
            midiProgram: 64,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←2←3←4",
                feedbackType: "4⟲",
                feedbackAmplitude: 5,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 13,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 4,
                    envelope: "swell 1"
                }, {
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "5×",
                    amplitude: 4,
                    envelope: "punch"
                }]
            }
        }, {
            name: "alto sax",
            midiProgram: 65,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "punch",
                operators: [{
                    frequency: "1×",
                    amplitude: 13,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "4×",
                    amplitude: 6,
                    envelope: "swell 1"
                }, {
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "steady"
                }]
            }
        }, {
            name: "tenor sax",
            midiProgram: 66,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 29,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←2←3←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 6,
                feedbackEnvelope: "swell 1",
                operators: [{
                    frequency: "2×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 7,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 3,
                    envelope: "steady"
                }, {
                    frequency: "8×",
                    amplitude: 3,
                    envelope: "steady"
                }]
            }
        }, {
            name: "baritone sax",
            midiProgram: 67,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 0,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "swell 2",
                operators: [{
                    frequency: "1×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "8×",
                    amplitude: 4,
                    envelope: "steady"
                }, {
                    frequency: "4×",
                    amplitude: 5,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 4,
                    envelope: "punch"
                }]
            }
        }, {
            name: "sax synth",
            midiProgram: 64,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 0,
                filterEnvelope: "steady",
                vibrato: "light",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 4,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "4×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "shehnai",
            midiProgram: 111,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 8e3,
                filterResonance: 0,
                filterEnvelope: "steady",
                vibrato: "light",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 3,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "4×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "oboe",
            midiProgram: 68,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "swell 1",
                vibrato: "none",
                algorithm: "1 2←(3 4)",
                feedbackType: "2⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "tremolo5",
                operators: [{
                    frequency: "1×",
                    amplitude: 7,
                    envelope: "custom"
                }, {
                    frequency: "4×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "6×",
                    amplitude: 2,
                    envelope: "steady"
                }]
            }
        }, {
            name: "english horn",
            midiProgram: 69,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1 2←(3 4)",
                feedbackType: "2⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "4×",
                    amplitude: 12,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    envelope: "punch"
                }, {
                    frequency: "8×",
                    amplitude: 4,
                    envelope: "steady"
                }]
            }
        }, {
            name: "bassoon",
            midiProgram: 70,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 707,
                filterResonance: 57,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 2,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "2×",
                    amplitude: 11,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 6,
                    envelope: "steady"
                }, {
                    frequency: "6×",
                    amplitude: 6,
                    envelope: "swell 1"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }, {
            name: "clarinet",
            midiProgram: 71,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 1414,
                filterResonance: 14,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0]
            }
        }, {
            name: "harmonica",
            midiProgram: 22,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 29,
                filterEnvelope: "swell 1",
                vibrato: "none",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 9,
                feedbackEnvelope: "tremolo5",
                operators: [{
                    frequency: "2×",
                    amplitude: 14,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "steady"
                }, {
                    frequency: "~2×",
                    amplitude: 2,
                    envelope: "twang 3"
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    envelope: "steady"
                }]
            }
        }])
    }, {
        name: "Flute Presets",
        presets: k([{
            name: "flute 1",
            midiProgram: 73,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 14,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←(2 3 4)",
                feedbackType: "4⟲",
                feedbackAmplitude: 7,
                feedbackEnvelope: "decay 2",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 4,
                    envelope: "steady"
                }, {
                    frequency: "1×",
                    amplitude: 3,
                    envelope: "steady"
                }, {
                    frequency: "~1×",
                    amplitude: 1,
                    envelope: "punch"
                }]
            }
        }, {
            name: "recorder",
            midiProgram: 74,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 29,
                filterEnvelope: "swell 2",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0]
            }
        }, {
            name: "whistle",
            midiProgram: 78,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "chorus & reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 43,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "delayed",
                harmonics: [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            }
        }, {
            name: "ocarina",
            midiProgram: 79,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 43,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "none",
                harmonics: [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            }
        }, {
            name: "piccolo",
            midiProgram: 72,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 43,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1←3 2←4",
                feedbackType: "4⟲",
                feedbackAmplitude: 15,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "1×",
                    amplitude: 10,
                    envelope: "custom"
                }, {
                    frequency: "~2×",
                    amplitude: 3,
                    envelope: "punch"
                }, {
                    frequency: "~1×",
                    amplitude: 5,
                    envelope: "punch"
                }]
            }
        }, {
            name: "shakuhachi",
            midiProgram: 77,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "steady",
                vibrato: "delayed",
                algorithm: "1←(2 3←4)",
                feedbackType: "3→4",
                feedbackAmplitude: 15,
                feedbackEnvelope: "steady",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "2×",
                    amplitude: 3,
                    envelope: "punch"
                }, {
                    frequency: "~1×",
                    amplitude: 4,
                    envelope: "twang 1"
                }, {
                    frequency: "20×",
                    amplitude: 15,
                    envelope: "steady"
                }]
            }
        }, {
            name: "pan flute",
            midiProgram: 75,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 9513.66,
                    linearGain: 5.6569
                }],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 4756.83,
                    linearGain: .7071
                }],
                reverb: 33,
                fadeInSeconds: .0125,
                fadeOutTicks: -3,
                spectrum: [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14],
                envelopes: [{
                    target: "noteFilterFreq",
                    envelope: "twang 1",
                    index: 0
                }, {
                    target: "noteVolume",
                    envelope: "punch"
                }]
            }
        }, {
            name: "blown bottle",
            midiProgram: 76,
            generalMidi: !0,
            settings: {
                type: "FM",
                effects: "chorus & reverb",
                transition: "cross fade",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 57,
                filterEnvelope: "steady",
                vibrato: "none",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 7,
                feedbackEnvelope: "twang 1",
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    envelope: "custom"
                }, {
                    frequency: "3×",
                    amplitude: 4,
                    envelope: "custom"
                }, {
                    frequency: "6×",
                    amplitude: 2,
                    envelope: "custom"
                }, {
                    frequency: "11×",
                    amplitude: 2,
                    envelope: "custom"
                }]
            }
        }, {
            name: "calliope",
            midiProgram: 82,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                transition: "cross fade",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 5657,
                filterResonance: 14,
                filterEnvelope: "steady",
                spectrum: [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14]
            }
        }, {
            name: "chiffer",
            midiProgram: 83,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "punch",
                spectrum: [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14]
            }
        }, {
            name: "breath noise",
            midiProgram: 121,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                eqFilter: [],
                effects: ["chord type", "note filter", "reverb"],
                chord: "strum",
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 840.9,
                    linearGain: .3536
                }, {
                    type: "low-pass",
                    cutoffHz: 16e3,
                    linearGain: .3536
                }],
                reverb: 33,
                fadeInSeconds: .0413,
                fadeOutTicks: 12,
                spectrum: [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 1"
                }]
            }
        }, {
            name: "flute 2",
            midiProgram: 73,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                effects: "reverb",
                transition: "seamless",
                chord: "harmony",
                filterCutoffHz: 1414,
                filterResonance: 14,
                filterEnvelope: "steady",
                interval: "union",
                vibrato: "delayed",
                harmonics: [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0]
            }
        }])
    }, {
        name: "Pad Presets",
        presets: k([{
            name: "new age pad",
            midiProgram: 88,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["chorus"],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 3,
                operators: [{
                    frequency: "2×",
                    amplitude: 14
                }, {
                    frequency: "~1×",
                    amplitude: 4
                }, {
                    frequency: "6×",
                    amplitude: 3
                }, {
                    frequency: "13×",
                    amplitude: 3
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 2",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 2
                }, {
                    target: "feedbackAmplitude",
                    envelope: "swell 3"
                }]
            }
        }, {
            name: "warm pad",
            midiProgram: 89,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 3363.59,
                    linearGain: 1
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: 96,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 7,
                operators: [{
                    frequency: "1×",
                    amplitude: 14
                }, {
                    frequency: "1×",
                    amplitude: 6
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "swell 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 1",
                    index: 1
                }]
            }
        }, {
            name: "polysynth pad",
            midiProgram: 90,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["vibrato", "note filter", "chorus"],
                vibrato: "delayed",
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 1
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "honky tonk",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "space voice pad",
            midiProgram: 91,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 2828.43,
                    linearGain: 5.6569
                }, {
                    type: "peak",
                    cutoffHz: 1414.21,
                    linearGain: .1768
                }],
                effects: ["chorus"],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                algorithm: "(1 2 3)←4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "1×",
                    amplitude: 10
                }, {
                    frequency: "2×",
                    amplitude: 8
                }, {
                    frequency: "3×",
                    amplitude: 7
                }, {
                    frequency: "11×",
                    amplitude: 2
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "punch",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "swell 2"
                }]
            }
        }, {
            name: "bowed glass pad",
            midiProgram: 92,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .5
                }],
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: 96,
                chord: "simultaneous",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 10
                }, {
                    frequency: "2×",
                    amplitude: 12
                }, {
                    frequency: "3×",
                    amplitude: 7
                }, {
                    frequency: "7×",
                    amplitude: 4
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 3",
                    index: 3
                }]
            }
        }, {
            name: "metallic pad",
            midiProgram: 93,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: .5
                }],
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲",
                feedbackAmplitude: 13,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "~1×",
                    amplitude: 9
                }, {
                    frequency: "1×",
                    amplitude: 7
                }, {
                    frequency: "11×",
                    amplitude: 7
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 2",
                    index: 2
                }, {
                    target: "feedbackAmplitude",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "sweep pad",
            midiProgram: 95,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 4
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: 96,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "hum",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "flare 3"
                }]
            }
        }, {
            name: "atmosphere",
            midiProgram: 99,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: 1
                }],
                effects: ["chorus", "reverb"],
                chorus: 100,
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "strum",
                algorithm: "1←(2 3 4)",
                feedbackType: "3⟲ 4⟲",
                feedbackAmplitude: 3,
                operators: [{
                    frequency: "1×",
                    amplitude: 14
                }, {
                    frequency: "~1×",
                    amplitude: 10
                }, {
                    frequency: "3×",
                    amplitude: 7
                }, {
                    frequency: "1×",
                    amplitude: 7
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "swell 3",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 3
                }]
            }
        }, {
            name: "brightness",
            midiProgram: 100,
            generalMidi: !0,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: 2
                }],
                effects: ["chorus"],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                harmonics: [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14],
                unison: "octave",
                stringSustain: 86,
                envelopes: []
            }
        }, {
            name: "goblins",
            midiProgram: 101,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 2828.43,
                    linearGain: 11.3137
                }],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 1681.79,
                    linearGain: .5
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: 96,
                chord: "simultaneous",
                algorithm: "1←2←3←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 10,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "4×",
                    amplitude: 5
                }, {
                    frequency: "1×",
                    amplitude: 10
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "swell 2"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 3",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "tremolo1",
                    index: 2
                }, {
                    target: "feedbackAmplitude",
                    envelope: "flare 3"
                }]
            }
        }, {
            name: "sci-fi",
            midiProgram: 103,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 9513.66,
                    linearGain: 2.8284
                }],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: .5
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 48,
                chord: "simultaneous",
                algorithm: "(1 2)←3←4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 8,
                operators: [{
                    frequency: "~1×",
                    amplitude: 13
                }, {
                    frequency: "2×",
                    amplitude: 10
                }, {
                    frequency: "5×",
                    amplitude: 5
                }, {
                    frequency: "11×",
                    amplitude: 8
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "tremolo5",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "flutter pad",
            midiProgram: 90,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["vibrato", "note filter", "chorus"],
                vibrato: "delayed",
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 4e3,
                    linearGain: 4
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                algorithm: "(1 2)←(3 4)",
                feedbackType: "1⟲ 2⟲ 3⟲",
                feedbackAmplitude: 9,
                operators: [{
                    frequency: "1×",
                    amplitude: 13
                }, {
                    frequency: "5×",
                    amplitude: 7
                }, {
                    frequency: "7×",
                    amplitude: 5
                }, {
                    frequency: "~1×",
                    amplitude: 6
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }, {
                    target: "operatorAmplitude",
                    envelope: "tremolo1",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "punch",
                    index: 3
                }]
            }
        }, {
            name: "feedback pad",
            midiProgram: 89,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 2378.41,
                    linearGain: 8
                }],
                effects: [],
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: 96,
                chord: "custom interval",
                algorithm: "1 2 3 4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 8,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "~1×",
                    amplitude: 15
                }],
                envelopes: [{
                    target: "feedbackAmplitude",
                    envelope: "swell 2"
                }]
            }
        }, {
            name: "supersaw pad",
            midiProgram: 93,
            settings: {
                type: "supersaw",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .1768
                }],
                effects: ["reverb"],
                reverb: 100,
                fadeInSeconds: .0263,
                fadeOutTicks: 24,
                pulseWidth: 50,
                dynamism: 100,
                spread: 58,
                shape: 0,
                envelopes: []
            }
        }])
    }, {
        name: "Drum Presets",
        presets: k([{
            name: "standard drumset",
            midiProgram: 116,
            isNoise: !0,
            settings: {
                type: "drumset",
                effects: "reverb",
                drums: [{
                    filterEnvelope: "twang 1",
                    spectrum: [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
                }, {
                    filterEnvelope: "twang 1",
                    spectrum: [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43]
                }, {
                    filterEnvelope: "twang 1",
                    spectrum: [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43]
                }, {
                    filterEnvelope: "twang 1",
                    spectrum: [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43]
                }, {
                    filterEnvelope: "decay 2",
                    spectrum: [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57]
                }, {
                    filterEnvelope: "decay 1",
                    spectrum: [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43]
                }, {
                    filterEnvelope: "twang 3",
                    spectrum: [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57]
                }, {
                    filterEnvelope: "decay 3",
                    spectrum: [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71]
                }, {
                    filterEnvelope: "twang 3",
                    spectrum: [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71]
                }, {
                    filterEnvelope: "decay 3",
                    spectrum: [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86]
                }, {
                    filterEnvelope: "flare 1",
                    spectrum: [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0]
                }, {
                    filterEnvelope: "decay 2",
                    spectrum: [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0]
                }]
            }
        }, {
            name: "steel pan",
            midiProgram: 114,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 62.5,
                    linearGain: .1768
                }],
                effects: ["note filter", "chorus", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 13454.34,
                    linearGain: .25
                }],
                chorus: 67,
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 24,
                chord: "simultaneous",
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "~1×",
                    amplitude: 14
                }, {
                    frequency: "7×",
                    amplitude: 3
                }, {
                    frequency: "3×",
                    amplitude: 5
                }, {
                    frequency: "4×",
                    amplitude: 4
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "decay 2"
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 1",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 2",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 2",
                    index: 3
                }]
            }
        }, {
            name: "steel pan synth",
            midiProgram: 114,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 13454.34,
                    linearGain: .25
                }],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                chord: "simultaneous",
                algorithm: "1 2 3←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "~1×",
                    amplitude: 12
                }, {
                    frequency: "2×",
                    amplitude: 15
                }, {
                    frequency: "4×",
                    amplitude: 14
                }, {
                    frequency: "~1×",
                    amplitude: 3
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 1"
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 0
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 1",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 2",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "flare 1"
                }]
            }
        }, {
            name: "timpani",
            midiProgram: 47,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                eqFilter: [{
                    type: "peak",
                    cutoffHz: 6727.17,
                    linearGain: 5.6569
                }],
                effects: ["pitch shift", "note filter", "reverb"],
                pitchShiftSemitones: 15,
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .5
                }],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                spectrum: [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 1"
                }, {
                    target: "pitchShift",
                    envelope: "twang 1"
                }]
            }
        }, {
            name: "dark strike",
            midiProgram: 47,
            settings: {
                type: "spectrum",
                eqFilter: [],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: .7071
                }],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                spectrum: [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "woodblock",
            midiProgram: 115,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -2.5,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                spectrum: [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71]
            }
        }, {
            name: "taiko drum",
            midiProgram: 116,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -.5,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 29,
                filterEnvelope: "twang 1",
                spectrum: [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43]
            }
        }, {
            name: "melodic drum",
            midiProgram: 117,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -1.5,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2828,
                filterResonance: 43,
                filterEnvelope: "twang 1",
                spectrum: [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
            }
        }, {
            name: "drum synth",
            midiProgram: 118,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -2,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 43,
                filterEnvelope: "decay 1",
                spectrum: [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
            }
        }, {
            name: "tom-tom",
            midiProgram: 116,
            isNoise: !0,
            midiSubharmonicOctaves: -1,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "twang 1",
                spectrum: [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43]
            }
        }, {
            name: "metal pipe",
            midiProgram: 117,
            isNoise: !0,
            midiSubharmonicOctaves: -1.5,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 8e3,
                filterResonance: 14,
                filterEnvelope: "twang 2",
                spectrum: [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0]
            }
        }, {
            name: "synth kick",
            midiProgram: 47,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: [],
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: -6,
                chord: "simultaneous",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "8×",
                    amplitude: 15
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "operatorFrequency",
                    envelope: "twang 1",
                    index: 0
                }, {
                    target: "noteVolume",
                    envelope: "twang 2"
                }]
            }
        }])
    }, {
        name: "Novelty Presets",
        presets: k([{
            name: "guitar fret noise",
            midiProgram: 120,
            generalMidi: !0,
            settings: {
                type: "spectrum",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 1e3,
                    linearGain: .1768
                }],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 5.6569
                }],
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: -3,
                chord: "simultaneous",
                spectrum: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "flare 1"
                }, {
                    target: "noteVolume",
                    envelope: "twang 2"
                }]
            }
        }, {
            name: "fifth saw lead",
            midiProgram: 86,
            generalMidi: !0,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 1.4142
                }],
                chorus: 67,
                transition: "normal",
                fadeInSeconds: 0,
                fadeOutTicks: 48,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "fifth",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 3"
                }]
            }
        }, {
            name: "fifth swell",
            midiProgram: 86,
            midiSubharmonicOctaves: 1,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 2e3,
                    linearGain: 2
                }],
                chorus: 100,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "fifth",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "swell 3"
                }]
            }
        }, {
            name: "soundtrack",
            midiProgram: 97,
            generalMidi: !0,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter", "chorus"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 2378.41,
                    linearGain: .5
                }],
                chorus: 67,
                transition: "normal",
                fadeInSeconds: .0413,
                fadeOutTicks: 72,
                chord: "simultaneous",
                wave: "sawtooth",
                unison: "fifth",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "flare 3"
                }]
            }
        }, {
            name: "reverse cymbal",
            midiProgram: 119,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -3,
            settings: {
                type: "spectrum",
                effects: "none",
                transition: "soft",
                chord: "harmony",
                filterCutoffHz: 4e3,
                filterResonance: 14,
                filterEnvelope: "swell 3",
                spectrum: [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86]
            }
        }, {
            name: "seashore",
            midiProgram: 122,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -3,
            settings: {
                type: "spectrum",
                transition: "soft fade",
                effects: "reverb",
                chord: "harmony",
                filterCutoffHz: 2828,
                filterResonance: 0,
                filterEnvelope: "swell 3",
                spectrum: [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57]
            }
        }, {
            name: "bird tweet",
            midiProgram: 123,
            generalMidi: !0,
            settings: {
                type: "harmonics",
                eqFilter: [],
                effects: ["chord type", "vibrato", "reverb"],
                chord: "strum",
                vibrato: "heavy",
                reverb: 67,
                fadeInSeconds: .0575,
                fadeOutTicks: -6,
                harmonics: [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                unison: "hum",
                envelopes: [{
                    target: "noteVolume",
                    envelope: "decay 1"
                }]
            }
        }, {
            name: "telephone ring",
            midiProgram: 124,
            generalMidi: !0,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 5656.85,
                    linearGain: 1
                }],
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: -3,
                chord: "arpeggio",
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "2×",
                    amplitude: 12
                }, {
                    frequency: "1×",
                    amplitude: 4
                }, {
                    frequency: "20×",
                    amplitude: 1
                }, {
                    frequency: "1×",
                    amplitude: 0
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "tremolo4"
                }, {
                    target: "operatorAmplitude",
                    envelope: "tremolo1",
                    index: 1
                }]
            }
        }, {
            name: "helicopter",
            midiProgram: 125,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -.5,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "seamless",
                chord: "arpeggio",
                filterCutoffHz: 1414,
                filterResonance: 14,
                filterEnvelope: "tremolo4",
                spectrum: [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57]
            }
        }, {
            name: "applause",
            midiProgram: 126,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -3,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "soft fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "swell 3",
                spectrum: [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57]
            }
        }, {
            name: "gunshot",
            midiProgram: 127,
            generalMidi: !0,
            isNoise: !0,
            midiSubharmonicOctaves: -2,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "strum",
                filterCutoffHz: 1414,
                filterResonance: 29,
                filterEnvelope: "twang 1",
                spectrum: [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43]
            }
        }, {
            name: "scoot",
            midiProgram: 92,
            settings: {
                type: "chip",
                eqFilter: [],
                effects: ["note filter"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 707.11,
                    linearGain: 4
                }],
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: -3,
                chord: "simultaneous",
                wave: "double saw",
                unison: "shimmer",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "flare 1"
                }]
            }
        }, {
            name: "buzz saw",
            midiProgram: 30,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 9513.66,
                    linearGain: .5
                }],
                effects: [],
                transition: "normal",
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                chord: "custom interval",
                algorithm: "1←2←3←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 4,
                operators: [{
                    frequency: "5×",
                    amplitude: 13
                }, {
                    frequency: "1×",
                    amplitude: 10
                }, {
                    frequency: "~1×",
                    amplitude: 6
                }, {
                    frequency: "11×",
                    amplitude: 12
                }],
                envelopes: []
            }
        }, {
            name: "mosquito",
            midiProgram: 93,
            settings: {
                type: "PWM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 2828.43,
                    linearGain: 2
                }],
                effects: ["vibrato"],
                vibrato: "shaky",
                transition: "normal",
                fadeInSeconds: .0575,
                fadeOutTicks: -6,
                chord: "simultaneous",
                pulseWidth: 4.41942,
                envelopes: [{
                    target: "pulseWidth",
                    envelope: "tremolo6"
                }]
            }
        }, {
            name: "breathing",
            midiProgram: 126,
            isNoise: !0,
            midiSubharmonicOctaves: -1,
            settings: {
                type: "spectrum",
                effects: "reverb",
                transition: "hard fade",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 14,
                filterEnvelope: "swell 2",
                spectrum: [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57]
            }
        }, {
            name: "klaxon synth",
            midiProgram: 125,
            isNoise: !0,
            midiSubharmonicOctaves: -1,
            settings: {
                type: "noise",
                effects: "reverb",
                transition: "slide",
                chord: "harmony",
                filterCutoffHz: 2e3,
                filterResonance: 86,
                filterEnvelope: "steady",
                wave: "buzz"
            }
        }, {
            name: "theremin",
            midiProgram: 40,
            settings: {
                type: "harmonics",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 8e3,
                    linearGain: .7071
                }],
                effects: ["vibrato", "reverb"],
                vibrato: "heavy",
                reverb: 33,
                transition: "slide in pattern",
                fadeInSeconds: .0263,
                fadeOutTicks: -6,
                chord: "simultaneous",
                harmonics: [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                unison: "none",
                envelopes: []
            }
        }, {
            name: "sonar ping",
            midiProgram: 121,
            settings: {
                type: "spectrum",
                eqFilter: [],
                effects: ["note filter", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 1681.79,
                    linearGain: .5
                }],
                reverb: 33,
                transition: "normal",
                fadeInSeconds: .0125,
                fadeOutTicks: 72,
                chord: "simultaneous",
                spectrum: [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "twang 2"
                }]
            }
        }])
    }, {
        name: "UltraBox Presets",
        presets: k([{
            name: "nes white",
            midiProgram: 116,
            generalMidi: !0,
            isNoise: !0,
            settings: {
                type: "noise",
                eqFilter: [],
                eqFilterType: !1,
                eqSimpleCut: 8,
                eqSimplePeak: 0,
                eqSubFilters1: [],
                effects: ["panning"],
                pan: 0,
                panDelay: 10,
                fadeInSeconds: 0,
                fadeOutTicks: 0,
                wave: "1-bit white",
                envelopes: []
            }
        }, {
            name: "nes ping",
            midiProgram: 116,
            generalMidi: !0,
            isNoise: !0,
            settings: {
                type: "noise",
                eqFilter: [],
                eqFilterType: !1,
                eqSimpleCut: 8,
                eqSimplePeak: 0,
                eqSubFilters1: [],
                effects: ["panning"],
                pan: 0,
                panDelay: 10,
                fadeInSeconds: 0,
                fadeOutTicks: 0,
                wave: "1-bit metallic",
                envelopes: []
            }
        }, {
            name: "distorted pulse vocal",
            generalMidi: !1,
            settings: {
                type: "chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .0884
                }],
                eqFilterType: !1,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters0: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .0884
                }],
                effects: ["panning", "transition type", "pitch shift", "vibrato", "note filter", "bitcrusher", "echo", "reverb"],
                transition: "normal",
                clicklessTransition: !1,
                pitchShiftSemitones: 0,
                vibrato: "delayed",
                vibratoDepth: .3,
                vibratoDelay: 18.5,
                vibratoSpeed: 10,
                vibratoType: 0,
                noteFilterType: !1,
                noteSimpleCut: 10,
                noteSimplePeak: 0,
                noteFilter: [{
                    type: "high-pass",
                    cutoffHz: 840.9,
                    linearGain: 11.3137
                }, {
                    type: "low-pass",
                    cutoffHz: 297.3,
                    linearGain: 8
                }, {
                    type: "peak",
                    cutoffHz: 500,
                    linearGain: 11.3137
                }, {
                    type: "high-pass",
                    cutoffHz: 62.5,
                    linearGain: 1.4142
                }, {
                    type: "peak",
                    cutoffHz: 176.78,
                    linearGain: 11.3137
                }, {
                    type: "high-pass",
                    cutoffHz: 250,
                    linearGain: 11.3137
                }],
                noteSubFilters0: [{
                    type: "high-pass",
                    cutoffHz: 840.9,
                    linearGain: 11.3137
                }, {
                    type: "low-pass",
                    cutoffHz: 297.3,
                    linearGain: 8
                }, {
                    type: "peak",
                    cutoffHz: 500,
                    linearGain: 11.3137
                }, {
                    type: "high-pass",
                    cutoffHz: 62.5,
                    linearGain: 1.4142
                }, {
                    type: "peak",
                    cutoffHz: 176.78,
                    linearGain: 11.3137
                }, {
                    type: "high-pass",
                    cutoffHz: 250,
                    linearGain: 11.3137
                }],
                bitcrusherOctave: 6.5,
                bitcrusherQuantization: 71,
                pan: 0,
                panDelay: 10,
                echoSustain: 14,
                echoDelayBeats: .167,
                reverb: 0,
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                wave: "1/8 pulse",
                unison: "none",
                envelopes: []
            }
        }, {
            name: "dubsteb bwah",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .7071
                }],
                eqFilterType: !0,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters1: [],
                effects: ["panning", "transition type", "chord type"],
                transition: "interrupt",
                clicklessTransition: !1,
                chord: "custom interval",
                fastTwoNoteArp: !1,
                arpeggioSpeed: 12,
                pan: 0,
                panDelay: 10,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 10,
                operators: [{
                    frequency: "2×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "4×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 11,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 13,
                    waveform: "sine",
                    pulseWidth: 5
                }],
                envelopes: [{
                    target: "noteVolume",
                    envelope: "note size"
                }, {
                    target: "operatorAmplitude",
                    envelope: "swell 2",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "punch",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 3
                }]
            }
        }, {
            name: "FM cool bass",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 1
                }, {
                    type: "high-pass",
                    cutoffHz: 88.39,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 1e3,
                    linearGain: .7071
                }],
                eqFilterType: !1,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters0: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 1
                }, {
                    type: "high-pass",
                    cutoffHz: 88.39,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 1e3,
                    linearGain: .7071
                }],
                effects: ["panning", "transition type", "note filter", "reverb"],
                transition: "interrupt",
                clicklessTransition: !1,
                noteFilterType: !0,
                noteSimpleCut: 9,
                noteSimplePeak: 2,
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 7231.23,
                    linearGain: 1
                }],
                noteSubFilters1: [{
                    type: "low-pass",
                    cutoffHz: 7231.23,
                    linearGain: 1
                }],
                pan: 0,
                panDelay: 10,
                reverb: 0,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                algorithm: "1←(2 3←4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "2×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 8,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 7,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "13×",
                    amplitude: 11,
                    waveform: "sine",
                    pulseWidth: 5
                }],
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "punch"
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 3",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "twang 2",
                    index: 3
                }]
            }
        }, {
            name: "FM funky bass",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 9513.66,
                    linearGain: .1768
                }],
                eqFilterType: !0,
                eqSimpleCut: 5,
                eqSimplePeak: 0,
                eqSubFilters1: [],
                effects: ["panning", "transition type", "reverb"],
                transition: "normal",
                clicklessTransition: !1,
                pan: 0,
                panDelay: 10,
                reverb: 0,
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                algorithm: "1←(2 3 4)",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "~1×",
                    amplitude: 8,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }],
                envelopes: [{
                    target: "noteVolume",
                    envelope: "punch"
                }, {
                    target: "noteVolume",
                    envelope: "note size"
                }]
            }
        }, {
            name: "talking bass",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [],
                effects: ["chord type"],
                chord: "custom interval",
                fadeInSeconds: 0,
                fadeOutTicks: -3,
                algorithm: "1←(2 3)←4",
                feedbackType: "1⟲",
                feedbackAmplitude: 15,
                operators: [{
                    frequency: "1×",
                    amplitude: 15
                }, {
                    frequency: "2×",
                    amplitude: 8
                }, {
                    frequency: "2×",
                    amplitude: 5
                }, {
                    frequency: "1×",
                    amplitude: 12
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "note size"
                }]
            }
        }, {
            name: "synth marimba",
            generalMidi: !1,
            settings: {
                type: "Picked String",
                eqFilter: [{
                    type: "high-pass",
                    cutoffHz: 176.78,
                    linearGain: 1
                }, {
                    type: "peak",
                    cutoffHz: 4e3,
                    linearGain: .5
                }],
                effects: ["note filter", "echo"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 6727.17,
                    linearGain: 1.4142
                }],
                echoSustain: 71,
                echoDelayBeats: .5,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                harmonics: [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86],
                unison: "fifth",
                stringSustain: 7,
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "punch"
                }]
            }
        }, {
            name: "italian accordian",
            generalMidi: !1,
            settings: {
                type: "custom chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 6e3,
                    linearGain: .5
                }],
                eqFilterType: !0,
                eqSimpleCut: 8,
                eqSimplePeak: 1,
                eqSubFilters1: [],
                effects: ["panning", "chorus", "reverb"],
                pan: 0,
                panDelay: 10,
                chorus: 71,
                reverb: 45,
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                wave: "square",
                unison: "honky tonk",
                customChipWave: {
                    0: -24,
                    1: -24,
                    2: -24,
                    3: -24,
                    4: -24,
                    5: -24,
                    6: -24,
                    7: -24,
                    8: -24,
                    9: -24,
                    10: -24,
                    11: -24,
                    12: -24,
                    13: -24,
                    14: -24,
                    15: -24,
                    16: 24,
                    17: 24,
                    18: 24,
                    19: 24,
                    20: 24,
                    21: 24,
                    22: 24,
                    23: 24,
                    24: -24,
                    25: -24,
                    26: -24,
                    27: -24,
                    28: -24,
                    29: -24,
                    30: -24,
                    31: -24,
                    32: -24,
                    33: -24,
                    34: -24,
                    35: -24,
                    36: -24,
                    37: -24,
                    38: -24,
                    39: -24,
                    40: 24,
                    41: 24,
                    42: 24,
                    43: 24,
                    44: 24,
                    45: 24,
                    46: 24,
                    47: 24,
                    48: -24,
                    49: -24,
                    50: -24,
                    51: -24,
                    52: -24,
                    53: -24,
                    54: -24,
                    55: -24,
                    56: -24,
                    57: -24,
                    58: -24,
                    59: -24,
                    60: -24,
                    61: -24,
                    62: -24,
                    63: -24
                },
                customChipWaveIntegral: {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 0,
                    4: 0,
                    5: 0,
                    6: 0,
                    7: 0,
                    8: 0,
                    9: 0,
                    10: 0,
                    11: 0,
                    12: 0,
                    13: 0,
                    14: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                    18: 0,
                    19: 0,
                    20: 0,
                    21: 0,
                    22: 0,
                    23: 0,
                    24: 0,
                    25: 0,
                    26: 0,
                    27: 0,
                    28: 0,
                    29: 0,
                    30: 0,
                    31: 0,
                    32: 0,
                    33: 0,
                    34: 0,
                    35: 0,
                    36: 0,
                    37: 0,
                    38: 0,
                    39: 0,
                    40: 0,
                    41: 0,
                    42: 0,
                    43: 0,
                    44: 0,
                    45: 0,
                    46: 0,
                    47: 0,
                    48: 0,
                    49: 0,
                    50: 0,
                    51: 0,
                    52: 0,
                    53: 0,
                    54: 0,
                    55: 0,
                    56: 0,
                    57: 0,
                    58: 0,
                    59: 0,
                    60: 0,
                    61: 0,
                    62: 0,
                    63: 0,
                    64: 0
                },
                envelopes: []
            }
        }, {
            name: "chip supersaw",
            generalMidi: !1,
            settings: {
                type: "custom chip",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: .7071
                }],
                eqFilterType: !0,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters1: [],
                effects: ["panning", "transition type", "vibrato", "chorus", "reverb"],
                transition: "interrupt",
                clicklessTransition: !1,
                vibrato: "delayed",
                vibratoDepth: .3,
                vibratoDelay: 18.5,
                vibratoSpeed: 10,
                vibratoType: 0,
                pan: 0,
                panDelay: 10,
                chorus: 29,
                reverb: 29,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                wave: "square",
                unison: "dissonant",
                customChipWave: {
                    0: 22,
                    1: 22,
                    2: 16,
                    3: 6,
                    4: 0,
                    5: -3,
                    6: -8,
                    7: -10,
                    8: -13,
                    9: -16,
                    10: -19,
                    11: -19,
                    12: -20,
                    13: -22,
                    14: -22,
                    15: -24,
                    16: -24,
                    17: -24,
                    18: -24,
                    19: -24,
                    20: -24,
                    21: -24,
                    22: -24,
                    23: -24,
                    24: -24,
                    25: -24,
                    26: -24,
                    27: -24,
                    28: -24,
                    29: -24,
                    30: -24,
                    31: 24,
                    32: 24,
                    33: 16,
                    34: 9,
                    35: 6,
                    36: 4,
                    37: 2,
                    38: 0,
                    39: -1,
                    40: -3,
                    41: -4,
                    42: -4,
                    43: -6,
                    44: -6,
                    45: -6,
                    46: -6,
                    47: -5,
                    48: -5,
                    49: -4,
                    50: -2,
                    51: -2,
                    52: 1,
                    53: 4,
                    54: 6,
                    55: 8,
                    56: 10,
                    57: 12,
                    58: 14,
                    59: 16,
                    60: 18,
                    61: 19,
                    62: 22,
                    63: 24
                },
                customChipWaveIntegral: {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 0,
                    4: 0,
                    5: 0,
                    6: 0,
                    7: 0,
                    8: 0,
                    9: 0,
                    10: 0,
                    11: 0,
                    12: 0,
                    13: 0,
                    14: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                    18: 0,
                    19: 0,
                    20: 0,
                    21: 0,
                    22: 0,
                    23: 0,
                    24: 0,
                    25: 0,
                    26: 0,
                    27: 0,
                    28: 0,
                    29: 0,
                    30: 0,
                    31: 0,
                    32: 0,
                    33: 0,
                    34: 0,
                    35: 0,
                    36: 0,
                    37: 0,
                    38: 0,
                    39: 0,
                    40: 0,
                    41: 0,
                    42: 0,
                    43: 0,
                    44: 0,
                    45: 0,
                    46: 0,
                    47: 0,
                    48: 0,
                    49: 0,
                    50: 0,
                    51: 0,
                    52: 0,
                    53: 0,
                    54: 0,
                    55: 0,
                    56: 0,
                    57: 0,
                    58: 0,
                    59: 0,
                    60: 0,
                    61: 0,
                    62: 0,
                    63: 0,
                    64: 0
                },
                envelopes: []
            }
        }, {
            name: "fm supersaw",
            generalMidi: !1,
            settings: {
                type: "FM6op",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: 1.4142
                }, {
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .7071
                }],
                eqFilterType: !1,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters0: [{
                    type: "low-pass",
                    cutoffHz: 19027.31,
                    linearGain: 1.4142
                }, {
                    type: "high-pass",
                    cutoffHz: 148.65,
                    linearGain: .7071
                }],
                effects: ["panning", "transition type", "pitch shift", "note filter", "chorus", "reverb"],
                transition: "continue",
                clicklessTransition: !1,
                pitchShiftSemitones: 0,
                noteFilterType: !1,
                noteSimpleCut: 10,
                noteSimplePeak: 0,
                noteFilter: [],
                noteSubFilters0: [],
                noteSubFilters1: [{
                    type: "low-pass",
                    cutoffHz: 4756.83,
                    linearGain: 1
                }],
                pan: 0,
                panDelay: 10,
                chorus: 71,
                reverb: 0,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                algorithm: "1 2 3 4 5 6",
                feedbackType: "1⟲",
                feedbackAmplitude: 0,
                operators: [{
                    frequency: "1×",
                    amplitude: 13,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }, {
                    frequency: "~1×",
                    amplitude: 15,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }, {
                    frequency: "2×",
                    amplitude: 10,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }, {
                    frequency: "3×",
                    amplitude: 7,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }, {
                    frequency: "4×",
                    amplitude: 9,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }, {
                    frequency: "8×",
                    amplitude: 6,
                    waveform: "sawtooth",
                    pulseWidth: 5
                }],
                envelopes: []
            }
        }, {
            name: "wind",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [{
                    type: "low-pass",
                    cutoffHz: 250.03,
                    linearGain: 11.3137
                }],
                eqFilterType: !0,
                eqSimpleCut: 0,
                eqSimplePeak: 7,
                envelopeSpeed: 12,
                discreteEnvelope: !1,
                eqSubFilters1: [],
                effects: ["transition type", "reverb"],
                transition: "continue",
                clicklessTransition: !1,
                panDelay: 10,
                reverb: 0,
                fadeInSeconds: 0,
                fadeOutTicks: -1,
                algorithm: "1←(2 3 4)",
                feedbackType: "1→3 2→4",
                feedbackAmplitude: 15,
                operators: [{
                    frequency: "16×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "16×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "16×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "16×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "1×",
                    amplitude: 0,
                    waveform: "sine",
                    pulseWidth: 5
                }],
                envelopes: []
            }
        }, {
            name: "mrow",
            generalMidi: !1,
            settings: {
                type: "FM",
                eqFilter: [],
                eqFilterType: !1,
                eqSimpleCut: 10,
                eqSimplePeak: 0,
                eqSubFilters0: [],
                effects: ["panning", "chord type", "reverb"],
                chord: "custom interval",
                fastTwoNoteArp: !1,
                arpeggioSpeed: 12,
                pan: 0,
                panDelay: 10,
                reverb: 35,
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                algorithm: "1←3 2←4",
                feedbackType: "1⟲ 2⟲ 3⟲ 4⟲",
                feedbackAmplitude: 5,
                operators: [{
                    frequency: "4×",
                    amplitude: 15,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "~2×",
                    amplitude: 13,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "~2×",
                    amplitude: 8,
                    waveform: "sine",
                    pulseWidth: 5
                }, {
                    frequency: "~2×",
                    amplitude: 9,
                    waveform: "sine",
                    pulseWidth: 5
                }],
                envelopes: [{
                    target: "operatorAmplitude",
                    envelope: "flare 1",
                    index: 0
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 1
                }, {
                    target: "operatorAmplitude",
                    envelope: "note size",
                    index: 2
                }, {
                    target: "operatorAmplitude",
                    envelope: "flare 3",
                    index: 3
                }, {
                    target: "feedbackAmplitude",
                    envelope: "flare 1"
                }]
            }
        }, {
            name: "vocal why",
            generalMidi: !1,
            settings: {
                type: "harmonics",
                eqFilter: [],
                effects: ["note filter", "panning", "reverb"],
                noteFilter: [{
                    type: "low-pass",
                    cutoffHz: 840.9,
                    linearGain: 11.3137
                }],
                pan: 0,
                reverb: 0,
                fadeInSeconds: .0263,
                fadeOutTicks: -3,
                harmonics: [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0],
                unison: "octave",
                envelopes: [{
                    target: "noteFilterAllFreqs",
                    envelope: "note size"
                }]
            }
        }])
    }]);
    var O = t && t.i || function(t) {
        var e = "function" == typeof Symbol && Symbol.iterator
          , i = e && t[e]
          , n = 0;
        if (i)
            return i.call(t);
        if (t && "number" == typeof t.length)
            return {
                next: function() {
                    return t && n >= t.length && (t = void 0),
                    {
                        value: t && t[n++],
                        done: !t
                    }
                }
            };
        throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.")
    }
      , R = t && t.o || function(t, e) {
        var i = "function" == typeof Symbol && t[Symbol.iterator];
        if (!i)
            return t;
        var n, s, o = i.call(t), a = [];
        try {
            for (; (void 0 === e || e-- > 0) && !(n = o.next()).done; )
                a.push(n.value)
        } catch (t) {
            s = {
                error: t
            }
        } finally {
            try {
                n && !n.done && (i = o.return) && i.call(o)
            } finally {
                if (s)
                    throw s.error
            }
        }
        return a
    }
      , H = t && t.h || function() {
        for (var t = [], e = 0; e < arguments.length; e++)
            t = t.concat(R(arguments[e]));
        return t
    }
    ;
    function _(t, e) {
        var i, n, s, o, a, r;
        try {
            for (var h = O(e), l = h.next(); !l.done; l = h.next()) {
                var c = l.value;
                if (c instanceof Node)
                    t.appendChild(c);
                else if ("string" == typeof c)
                    t.appendChild(document.createTextNode(c));
                else if ("function" == typeof c)
                    _(t, [c()]);
                else if (Array.isArray(c))
                    _(t, c);
                else if (c && "undefined" != typeof Symbol && "function" == typeof c[Symbol.iterator])
                    _(t, H(c));
                else if (c && c.constructor === Object && t instanceof Element)
                    try {
                        for (var d = (s = void 0,
                        O(Object.keys(c))), p = d.next(); !p.done; p = d.next()) {
                            var m = p.value
                              , u = c[m];
                            if ("class" === m)
                                "string" == typeof u ? t.setAttribute("class", u) : Array.isArray(c) || u && "undefined" != typeof Symbol && "function" == typeof u[Symbol.iterator] ? t.setAttribute("class", H(u).join(" ")) : console.warn("Invalid " + m + ' value "' + u + '" on ' + t.tagName + " element.");
                            else if ("style" === m)
                                if (u && u.constructor === Object)
                                    try {
                                        for (var f = (a = void 0,
                                        O(Object.keys(u))), y = f.next(); !y.done; y = f.next()) {
                                            var b = y.value;
                                            b in t.style ? t.style[b] = u[b] : t.style.setProperty(b, u[b])
                                        }
                                    } catch (t) {
                                        a = {
                                            error: t
                                        }
                                    } finally {
                                        try {
                                            y && !y.done && (r = f.return) && r.call(f)
                                        } finally {
                                            if (a)
                                                throw a.error
                                        }
                                    }
                                else
                                    t.setAttribute(m, u);
                            else
                                "function" == typeof u ? t[m] = u : "boolean" == typeof u ? u ? t.setAttribute(m, "") : t.removeAttribute(m) : t.setAttribute(m, u)
                        }
                    } catch (t) {
                        s = {
                            error: t
                        }
                    } finally {
                        try {
                            p && !p.done && (o = d.return) && o.call(d)
                        } finally {
                            if (s)
                                throw s.error
                        }
                    }
                else
                    t.appendChild(document.createTextNode(c))
            }
        } catch (t) {
            i = {
                error: t
            }
        } finally {
            try {
                l && !l.done && (n = h.return) && n.call(h)
            } finally {
                if (i)
                    throw i.error
            }
        }
        return t
    }
    var V = "http://www.w3.org/2000/svg";
    var G, W, j, U, K = t && t.i || function(t) {
        var e = "function" == typeof Symbol && Symbol.iterator
          , i = e && t[e]
          , n = 0;
        if (i)
            return i.call(t);
        if (t && "number" == typeof t.length)
            return {
                next: function() {
                    return t && n >= t.length && (t = void 0),
                    {
                        value: t && t[n++],
                        done: !t
                    }
                }
            };
        throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.")
    }
    , J = function() {
        for (var t = [], e = 0; e < arguments.length; e++)
            t[e] = arguments[e];
        return document.createRange().createContextualFragment(t.join())
    }, Y = function() {
        for (var t = [], e = 0; e < arguments.length; e++)
            t[e] = arguments[e];
        for (var i = document.createDocumentFragment(), n = (new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg">' + t.join() + "</svg>", "image/svg+xml").documentElement; null !== n.firstChild; )
            document.importNode(n.firstChild, !0),
            i.appendChild(n.firstChild);
        return i
    }, Q = function(t) {
        J[t] = function() {
            for (var e = [], i = 0; i < arguments.length; i++)
                e[i] = arguments[i];
            return _(document.createElement(t), e)
        }
    };
    try {
        for (var Z = K("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")), X = Z.next(); !X.done; X = Z.next()) {
            Q(X.value)
        }
    } catch (Fh) {
        G = {
            error: Fh
        }
    } finally {
        try {
            X && !X.done && (W = Z.return) && W.call(Z)
        } finally {
            if (G)
                throw G.error
        }
    }
    var tt = function(t) {
        if (Y[t] = function() {
            for (var e = [], i = 0; i < arguments.length; i++)
                e[i] = arguments[i];
            return _(document.createElementNS(V, t), e)
        }
        ,
        /-/.test(t)) {
            var e = t.replace(/-/g, "_");
            Y[e] = function() {
                for (var e = [], i = 0; i < arguments.length; i++)
                    e[i] = arguments[i];
                return _(document.createElementNS(V, t), e)
            }
        }
    };
    try {
        for (var et = K("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")), it = et.next(); !it.done; it = et.next()) {
            tt(it.value)
        }
    } catch (Ch) {
        j = {
            error: Ch
        }
    } finally {
        try {
            it && !it.done && (U = et.return) && U.call(et)
        } finally {
            if (j)
                throw j.error
        }
    }
    class nt {
        static resetColors() {
            this.colorLookup.clear()
        }
        static getArbitaryChannelColor(t, e) {
            if (!this.usesColorFormula) {
                let n;
                switch (t) {
                case "noise":
                    n = nt.noiseChannels[e % +nt.getComputed("--noise-channel-limit") % nt.noiseChannels.length];
                    break;
                case "mod":
                    n = nt.modChannels[e % +nt.getComputed("--mod-channel-limit") % nt.modChannels.length];
                    break;
                default:
                    n = nt.pitchChannels[e % +nt.getComputed("--pitch-channel-limit") % nt.pitchChannels.length]
                }
                var i = /\(([^\,)]+)/;
                return {
                    secondaryChannel: nt.getComputed(i.exec(n.secondaryChannel)[1]),
                    primaryChannel: nt.getComputed(i.exec(n.primaryChannel)[1]),
                    secondaryNote: nt.getComputed(i.exec(n.secondaryNote)[1]),
                    primaryNote: nt.getComputed(i.exec(n.primaryNote)[1])
                }
            }
            let n = +nt.getComputed("--formula-pitch-channel-limit")
              , s = +nt.getComputed("--formula-noise-channel-limit")
              , o = +nt.getComputed("--formula-mod-channel-limit");
            switch (t) {
            case "noise":
                return {
                    secondaryChannel: "hsl(" + (this.c_noiseSecondaryChannelHue + e * this.c_noiseSecondaryChannelHueScale / this.c_noiseChannelCountOverride * 256) % s + "," + (this.c_noiseSecondaryChannelSat + e * this.c_noiseSecondaryChannelSatScale) + "%," + (this.c_noiseSecondaryChannelLum + e * this.c_noiseSecondaryChannelLumScale) + "%)",
                    primaryChannel: "hsl(" + (this.c_noisePrimaryChannelHue + e * this.c_noisePrimaryChannelHueScale / this.c_noiseChannelCountOverride * 256) % s + "," + (this.c_noisePrimaryChannelSat + e * this.c_noisePrimaryChannelSatScale) + "%," + (this.c_noisePrimaryChannelLum + e * this.c_noisePrimaryChannelLumScale) + "%)",
                    secondaryNote: "hsl(" + (this.c_noiseSecondaryNoteHue + e * this.c_noiseSecondaryNoteHueScale / this.c_noiseChannelCountOverride * 256) % s + "," + (this.c_noiseSecondaryNoteSat + e * this.c_noiseSecondaryNoteSatScale) + "%," + (this.c_noiseSecondaryNoteLum + e * this.c_noiseSecondaryNoteLumScale) + "%)",
                    primaryNote: "hsl(" + (this.c_noisePrimaryNoteHue + e * this.c_noisePrimaryNoteHueScale / this.c_noiseChannelCountOverride * 256) % s + "," + (this.c_noisePrimaryNoteSat + e * this.c_noisePrimaryNoteSatScale) + "%," + (this.c_noisePrimaryNoteLum + e * this.c_noisePrimaryNoteLumScale) + "%)"
                };
            case "mod":
                return {
                    secondaryChannel: "hsl(" + (this.c_modSecondaryChannelHue + e * this.c_modSecondaryChannelHueScale / this.c_modChannelCountOverride * 256) % o + "," + (this.c_modSecondaryChannelSat + e * this.c_modSecondaryChannelSatScale) + "%," + (this.c_modSecondaryChannelLum + e * this.c_modSecondaryChannelLumScale) + "%)",
                    primaryChannel: "hsl(" + (this.c_modPrimaryChannelHue + e * this.c_modPrimaryChannelHueScale / this.c_modChannelCountOverride * 256) % o + "," + (this.c_modPrimaryChannelSat + e * this.c_modPrimaryChannelSatScale) + "%," + (this.c_modPrimaryChannelLum + e * this.c_modPrimaryChannelLumScale) + "%)",
                    secondaryNote: "hsl(" + (this.c_modSecondaryNoteHue + e * this.c_modSecondaryNoteHueScale / this.c_modChannelCountOverride * 256) % o + "," + (this.c_modSecondaryNoteSat + e * this.c_modSecondaryNoteSatScale) + "%," + (this.c_modSecondaryNoteLum + e * this.c_modSecondaryNoteLumScale) + "%)",
                    primaryNote: "hsl(" + (this.c_modPrimaryNoteHue + e * this.c_modPrimaryNoteHueScale / this.c_modChannelCountOverride * 256) % o + "," + (this.c_modPrimaryNoteSat + e * this.c_modPrimaryNoteSatScale) + "%," + (this.c_modPrimaryNoteLum + e * this.c_modPrimaryNoteLumScale) + "%)"
                };
            default:
                return {
                    secondaryChannel: "hsl(" + (this.c_pitchSecondaryChannelHue + e * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride * 256) % n + "," + this.c_pitchSecondaryChannelSat * (1 - this.c_pitchSecondaryChannelSatScale * Math.floor(e / 7)) + "%," + this.c_pitchSecondaryChannelLum * (1 - this.c_pitchSecondaryChannelLumScale * Math.floor(e / 7)) + "%)",
                    primaryChannel: "hsl(" + (this.c_pitchPrimaryChannelHue + e * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride * 256) % n + "," + this.c_pitchPrimaryChannelSat * (1 - this.c_pitchPrimaryChannelSatScale * Math.floor(e / 7)) + "%," + this.c_pitchPrimaryChannelLum * (1 - this.c_pitchPrimaryChannelLumScale * Math.floor(e / 7)) + "%)",
                    secondaryNote: "hsl(" + (this.c_pitchSecondaryNoteHue + e * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride * 256) % n + "," + this.c_pitchSecondaryNoteSat * (1 - this.c_pitchSecondaryNoteSatScale * Math.floor(e / 7)) + "%," + this.c_pitchSecondaryNoteLum * (1 - this.c_pitchSecondaryNoteLumScale * Math.floor(e / 7)) + "%)",
                    primaryNote: "hsl(" + (this.c_pitchPrimaryNoteHue + e * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride * 256) % n + "," + this.c_pitchPrimaryNoteSat * (1 - this.c_pitchPrimaryNoteSatScale * Math.floor(e / 7)) + "%," + this.c_pitchPrimaryNoteLum * (1 - this.c_pitchPrimaryNoteLumScale * Math.floor(e / 7)) + "%)"
                }
            }
        }
        static getComputedChannelColor(t, e) {
            if (this.usesColorFormula)
                return nt.getChannelColor(t, e);
            {
                let n = nt.getChannelColor(t, e);
                var i = /\(([^\,)]+)/;
                return {
                    secondaryChannel: nt.getComputed(i.exec(n.secondaryChannel)[1]),
                    primaryChannel: nt.getComputed(i.exec(n.primaryChannel)[1]),
                    secondaryNote: nt.getComputed(i.exec(n.secondaryNote)[1]),
                    primaryNote: nt.getComputed(i.exec(n.primaryNote)[1])
                }
            }
        }
        static getChannelColor(t, e) {
            if (this.usesColorFormula) {
                if (nt.colorLookup.has(e))
                    return nt.colorLookup.get(e);
                {
                    let i = +nt.getComputed("--formula-pitch-channel-limit")
                      , n = +nt.getComputed("--formula-noise-channel-limit")
                      , s = +nt.getComputed("--formula-mod-channel-limit");
                    if (e < t.pitchChannelCount) {
                        let t = {
                            secondaryChannel: "hsl(" + (this.c_pitchSecondaryChannelHue + e * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride * 256) % i + "," + this.c_pitchSecondaryChannelSat * (1 - this.c_pitchSecondaryChannelSatScale * Math.floor(e / 9)) + "%," + this.c_pitchSecondaryChannelLum * (1 - this.c_pitchSecondaryChannelLumScale * Math.floor(e / 9)) + "%)",
                            primaryChannel: "hsl(" + (this.c_pitchPrimaryChannelHue + e * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride * 256) % i + "," + this.c_pitchPrimaryChannelSat * (1 - this.c_pitchPrimaryChannelSatScale * Math.floor(e / 9)) + "%," + this.c_pitchPrimaryChannelLum * (1 - this.c_pitchPrimaryChannelLumScale * Math.floor(e / 9)) + "%)",
                            secondaryNote: "hsl(" + (this.c_pitchSecondaryNoteHue + e * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride * 256) % i + "," + this.c_pitchSecondaryNoteSat * (1 - this.c_pitchSecondaryNoteSatScale * Math.floor(e / 9)) + "%," + this.c_pitchSecondaryNoteLum * (1 - this.c_pitchSecondaryNoteLumScale * Math.floor(e / 9)) + "%)",
                            primaryNote: "hsl(" + (this.c_pitchPrimaryNoteHue + e * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride * 256) % i + "," + this.c_pitchPrimaryNoteSat * (1 - this.c_pitchPrimaryNoteSatScale * Math.floor(e / 9)) + "%," + this.c_pitchPrimaryNoteLum * (1 - this.c_pitchPrimaryNoteLumScale * Math.floor(e / 9)) + "%)"
                        };
                        return nt.colorLookup.set(e, t),
                        t
                    }
                    if (e < t.pitchChannelCount + t.noiseChannelCount) {
                        let i = {
                            secondaryChannel: "hsl(" + (this.c_noiseSecondaryChannelHue + (e - t.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale / this.c_noiseChannelCountOverride * 256) % n + "," + (this.c_noiseSecondaryChannelSat + e * this.c_noiseSecondaryChannelSatScale) + "%," + (this.c_noiseSecondaryChannelLum + e * this.c_noiseSecondaryChannelLumScale) + "%)",
                            primaryChannel: "hsl(" + (this.c_noisePrimaryChannelHue + (e - t.pitchChannelCount) * this.c_noisePrimaryChannelHueScale / this.c_noiseChannelCountOverride * 256) % n + "," + (this.c_noisePrimaryChannelSat + e * this.c_noisePrimaryChannelSatScale) + "%," + (this.c_noisePrimaryChannelLum + e * this.c_noisePrimaryChannelLumScale) + "%)",
                            secondaryNote: "hsl(" + (this.c_noiseSecondaryNoteHue + (e - t.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale / this.c_noiseChannelCountOverride * 256) % n + "," + (this.c_noiseSecondaryNoteSat + e * this.c_noiseSecondaryNoteSatScale) + "%," + (this.c_noiseSecondaryNoteLum + e * this.c_noiseSecondaryNoteLumScale) + "%)",
                            primaryNote: "hsl(" + (this.c_noisePrimaryNoteHue + (e - t.pitchChannelCount) * this.c_noisePrimaryNoteHueScale / this.c_noiseChannelCountOverride * 256) % n + "," + (this.c_noisePrimaryNoteSat + e * this.c_noisePrimaryNoteSatScale) + "%," + (this.c_noisePrimaryNoteLum + e * this.c_noisePrimaryNoteLumScale) + "%)"
                        };
                        return nt.colorLookup.set(e, i),
                        i
                    }
                    {
                        let i = {
                            secondaryChannel: "hsl(" + (this.c_modSecondaryChannelHue + (e - t.pitchChannelCount - t.noiseChannelCount) * this.c_modSecondaryChannelHueScale / this.c_modChannelCountOverride * 256) % s + "," + (this.c_modSecondaryChannelSat + e * this.c_modSecondaryChannelSatScale) + "%," + (this.c_modSecondaryChannelLum + e * this.c_modSecondaryChannelLumScale) + "%)",
                            primaryChannel: "hsl(" + (this.c_modPrimaryChannelHue + (e - t.pitchChannelCount - t.noiseChannelCount) * this.c_modPrimaryChannelHueScale / this.c_modChannelCountOverride * 256) % s + "," + (this.c_modPrimaryChannelSat + e * this.c_modPrimaryChannelSatScale) + "%," + (this.c_modPrimaryChannelLum + e * this.c_modPrimaryChannelLumScale) + "%)",
                            secondaryNote: "hsl(" + (this.c_modSecondaryNoteHue + (e - t.pitchChannelCount - t.noiseChannelCount) * this.c_modSecondaryNoteHueScale / this.c_modChannelCountOverride * 256) % s + "," + (this.c_modSecondaryNoteSat + e * this.c_modSecondaryNoteSatScale) + "%," + (this.c_modSecondaryNoteLum + e * this.c_modSecondaryNoteLumScale) + "%)",
                            primaryNote: "hsl(" + (this.c_modPrimaryNoteHue + (e - t.pitchChannelCount - t.noiseChannelCount) * this.c_modPrimaryNoteHueScale / this.c_modChannelCountOverride * 256) % s + "," + (this.c_modPrimaryNoteSat + e * this.c_modPrimaryNoteSatScale) + "%," + (this.c_modPrimaryNoteLum + e * this.c_modPrimaryNoteLumScale) + "%)"
                        };
                        return nt.colorLookup.set(e, i),
                        i
                    }
                }
            }
            return e < t.pitchChannelCount ? nt.pitchChannels[e % +nt.getComputed("--pitch-channel-limit") % nt.pitchChannels.length] : e < t.pitchChannelCount + t.noiseChannelCount ? nt.noiseChannels[(e - t.pitchChannelCount) % +nt.getComputed("--noise-channel-limit") % nt.noiseChannels.length] : nt.modChannels[(e - t.pitchChannelCount - t.noiseChannelCount) % +nt.getComputed("--mod-channel-limit") % nt.modChannels.length]
        }
        static setTheme(t) {
            let e = this.themes[t];
            null == e && (e = nt.defaultTheme),
            this.l.textContent = e;
            let i = ":root{";
            "" == getComputedStyle(this.l).getPropertyValue("--oscilloscope-line-L") && (i += "--oscilloscope-line-L:var(--primary-text,white);"),
            "" == getComputedStyle(this.l).getPropertyValue("--oscilloscope-line-R") && (i += "--oscilloscope-line-R:var(--text-selection,rgba(119,68,255,0.99));"),
            "" == getComputedStyle(this.l).getPropertyValue("--text-enabled-icon") && (i += "--text-enabled-icon:✓ ;"),
            "" == getComputedStyle(this.l).getPropertyValue("--text-disabled-icon") && (i += "--text-disabled-icon:　;"),
            "" == getComputedStyle(this.l).getPropertyValue("--text-spacing-icon") && (i += "--text-spacing-icon:　;"),
            "" == getComputedStyle(this.l).getPropertyValue("--note-flash") && (i += "--note-flash:#ffffff;"),
            "" == getComputedStyle(this.l).getPropertyValue("--note-flash-secondary") && (i += "--note-flash-secondary:#ffffff77;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch-channel-limit") && (i += "--pitch-channel-limit:" + p.pitchChannelCountMax + ";"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise-channel-limit") && (i += "--noise-channel-limit:" + p.noiseChannelCountMax + ";"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod-channel-limit") && (i += "--mod-channel-limit:" + p.modChannelCountMax + ";"),
            "" == getComputedStyle(this.l).getPropertyValue("--formula-pitch-channel-limit") && (i += "--formula-pitch-channel-limit:360;"),
            "" == getComputedStyle(this.l).getPropertyValue("--formula-noise-channel-limit") && (i += "--formula-noise-channel-limit:360;"),
            "" == getComputedStyle(this.l).getPropertyValue("--formula-mod-channel-limit") && (i += "--formula-mod-channel-limit:360;"),
            "" == getComputedStyle(this.l).getPropertyValue("--editor-background") && (i += "--editor-background:black;"),
            "" == getComputedStyle(this.l).getPropertyValue("--ui-widget-background") && (i += "--ui-widget-background:#444;"),
            "" == getComputedStyle(this.l).getPropertyValue("--loop-accent") && (i += "--loop-accent:#74f;"),
            "" == getComputedStyle(this.l).getPropertyValue("--box-selection-fill") && (i += "--box-selection-fill:rgba(255,255,255,0.2);"),
            "" == getComputedStyle(this.l).getPropertyValue("--primary-text") && (i += "--primary-text:white;"),
            "" == getComputedStyle(this.l).getPropertyValue("--inverted-text") && (i += "--inverted-text:black;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-pitch") && (i += "--track-editor-bg-pitch:#444;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-pitch-dim") && (i += "--track-editor-bg-pitch-dim:#333;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-noise") && (i += "--track-editor-bg-noise:#444;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-noise-dim") && (i += "--track-editor-bg-noise-dim:#333;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-mod") && (i += "--track-editor-bg-mod:#234;"),
            "" == getComputedStyle(this.l).getPropertyValue("--track-editor-bg-mod-dim") && (i += "--track-editor-bg-mod-dim:#123;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mute-button-normal") && (i += "--mute-button-normal:#ffa033;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mute-button-mod") && (i += "--mute-button-mod:#9a6bff;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch1-secondary-channel") && (i += "--pitch1-secondary-channel:#0099A1;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch1-primary-channel") && (i += "--pitch1-primary-channel:#25F3FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch1-secondary-note") && (i += "--pitch1-secondary-note:#00BDC7;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch1-primary-note") && (i += "--pitch1-primary-note:#92F9FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch2-secondary-channel") && (i += "--pitch2-secondary-channel:#A1A100;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch2-primary-channel") && (i += "--pitch2-primary-channel:#FFFF25;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch2-secondary-note") && (i += "--pitch2-secondary-note:#C7C700;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch2-primary-note") && (i += "--pitch2-primary-note:#FFFF92;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch3-secondary-channel") && (i += "--pitch3-secondary-channel:#C75000;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch3-primary-channel") && (i += "--pitch3-primary-channel:#FF9752;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch3-secondary-note") && (i += "--pitch3-secondary-note:#FF771C;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch3-primary-note") && (i += "--pitch3-primary-note:#FFCDAB;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch4-secondary-channel") && (i += "--pitch4-secondary-channel:#00A100;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch4-primary-channel") && (i += "--pitch4-primary-channel:#50FF50;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch4-secondary-note") && (i += "--pitch4-secondary-note:#00C700;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch4-primary-note") && (i += "--pitch4-primary-note:#A0FFA0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch5-secondary-channel") && (i += "--pitch5-secondary-channel:#D020D0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch5-primary-channel") && (i += "--pitch5-primary-channel:#FF90FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch5-secondary-note") && (i += "--pitch5-secondary-note:#E040E0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch5-primary-note") && (i += "--pitch5-primary-note:#FFC0FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch6-secondary-channel") && (i += "--pitch6-secondary-channel:#7777B0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch6-primary-channel") && (i += "--pitch6-primary-channel:#A0A0FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch6-secondary-note") && (i += "--pitch6-secondary-note:#8888D0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch6-primary-note") && (i += "--pitch6-primary-note:#D0D0FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch7-secondary-channel") && (i += "--pitch7-secondary-channel:#8AA100;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch7-primary-channel") && (i += "--pitch7-primary-channel:#DEFF25;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch7-secondary-note") && (i += "--pitch7-secondary-note:#AAC700;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch7-primary-note") && (i += "--pitch7-primary-note:#E6FF92;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch8-secondary-channel") && (i += "--pitch8-secondary-channel:#DF0019;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch8-primary-channel") && (i += "--pitch8-primary-channel:#FF98A4;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch8-secondary-note") && (i += "--pitch8-secondary-note:#FF4E63;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch8-primary-note") && (i += "--pitch8-primary-note:#FFB2BB;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch9-secondary-channel") && (i += "--pitch9-secondary-channel:#00A170;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch9-primary-channel") && (i += "--pitch9-primary-channel:#50FFC9;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch9-secondary-note") && (i += "--pitch9-secondary-note:#00C78A;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch9-primary-note") && (i += "--pitch9-primary-note:#83FFD9;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch10-secondary-channel") && (i += "--pitch10-secondary-channel:#A11FFF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch10-primary-channel") && (i += "--pitch10-primary-channel:#CE8BFF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch10-secondary-note") && (i += "--pitch10-secondary-note:#B757FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--pitch10-primary-note") && (i += "--pitch10-primary-note:#DFACFF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise1-secondary-channel") && (i += "--noise1-secondary-channel:#6F6F6F;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise1-primary-channel") && (i += "--noise1-primary-channel:#AAAAAA;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise1-secondary-note") && (i += "--noise1-secondary-note:#A7A7A7;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise1-primary-note") && (i += "--noise1-primary-note:#E0E0E0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise2-secondary-channel") && (i += "--noise2-secondary-channel:#996633;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise2-primary-channel") && (i += "--noise2-primary-channel:#DDAA77;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise2-secondary-note") && (i += "--noise2-secondary-note:#CC9966;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise2-primary-note") && (i += "--noise2-primary-note:#F0D0BB;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise3-secondary-channel") && (i += "--noise3-secondary-channel:#4A6D8F;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise3-primary-channel") && (i += "--noise3-primary-channel:#77AADD;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise3-secondary-note") && (i += "--noise3-secondary-note:#6F9FCF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise3-primary-note") && (i += "--noise3-primary-note:#BBD7FF;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise4-secondary-channel") && (i += "--noise4-secondary-channel:#7A4F9A;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise4-primary-channel") && (i += "--noise4-primary-channel:#AF82D2;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise4-secondary-note") && (i += "--noise4-secondary-note:#9E71C1;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise4-primary-note") && (i += "--noise4-primary-note:#D4C1EA;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise5-secondary-channel") && (i += "--noise5-secondary-channel:#607837;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise5-primary-channel") && (i += "--noise5-primary-channel:#A2BB77;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise5-secondary-note") && (i += "--noise5-secondary-note:#91AA66;"),
            "" == getComputedStyle(this.l).getPropertyValue("--noise5-primary-note") && (i += "--noise5-primary-note:#C5E2B2;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod1-secondary-channel") && (i += "--mod1-secondary-channel:#339955;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod1-primary-channel") && (i += "--mod1-primary-channel:#77fc55;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod1-secondary-note") && (i += "--mod1-secondary-note:#77ff8a;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod1-primary-note") && (i += "--mod1-primary-note:#cdffee;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod2-secondary-channel") && (i += "--mod2-secondary-channel:#993355;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod2-primary-channel") && (i += "--mod2-primary-channel:#f04960;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod2-secondary-note") && (i += "--mod2-secondary-note:#f057a0;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod2-primary-note") && (i += "--mod2-primary-note:#ffb8de;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod3-secondary-channel") && (i += "--mod3-secondary-channel:#553399;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod3-primary-channel") && (i += "--mod3-primary-channel:#8855fc;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod3-secondary-note") && (i += "--mod3-secondary-note:#aa64ff;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod3-primary-note") && (i += "--mod3-primary-note:#f8ddff;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod4-secondary-channel") && (i += "--mod4-secondary-channel:#a86436;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod4-primary-channel") && (i += "--mod4-primary-channel:#c8a825;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod4-secondary-note") && (i += "--mod4-secondary-note:#e8ba46;"),
            "" == getComputedStyle(this.l).getPropertyValue("--mod4-primary-note") && (i += "--mod4-primary-note:#fff6d3;"),
            i += "}",
            this.l.textContent = i + this.l.textContent;
            const n = document.querySelector("meta[name='theme-color']");
            null != n && n.setAttribute("content", getComputedStyle(document.documentElement).getPropertyValue("--ui-widget-background")),
            this.resetColors(),
            this.usesColorFormula = "true" == getComputedStyle(this.l).getPropertyValue("--use-color-formula").trim(),
            this.c_invertedText = getComputedStyle(this.l).getPropertyValue("--inverted-text"),
            this.c_trackEditorBgNoiseDim = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-noise-dim"),
            this.c_trackEditorBgNoise = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-noise"),
            this.c_trackEditorBgModDim = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-mod-dim"),
            this.c_trackEditorBgMod = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-mod"),
            this.c_trackEditorBgPitchDim = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-pitch-dim"),
            this.c_trackEditorBgPitch = getComputedStyle(this.l).getPropertyValue("--track-editor-bg-pitch"),
            this.usesColorFormula && (this.c_pitchSecondaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-hue"),
            this.c_pitchSecondaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-hue-scale"),
            this.c_pitchSecondaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-sat"),
            this.c_pitchSecondaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-sat-scale"),
            this.c_pitchSecondaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-lum"),
            this.c_pitchSecondaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-channel-lum-scale"),
            this.c_pitchPrimaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-hue"),
            this.c_pitchPrimaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-hue-scale"),
            this.c_pitchPrimaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-sat"),
            this.c_pitchPrimaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-sat-scale"),
            this.c_pitchPrimaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-lum"),
            this.c_pitchPrimaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-channel-lum-scale"),
            this.c_pitchSecondaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-hue"),
            this.c_pitchSecondaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-hue-scale"),
            this.c_pitchSecondaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-sat"),
            this.c_pitchSecondaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-sat-scale"),
            this.c_pitchSecondaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-lum"),
            this.c_pitchSecondaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--pitch-secondary-note-lum-scale"),
            this.c_pitchPrimaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-hue"),
            this.c_pitchPrimaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-hue-scale"),
            this.c_pitchPrimaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-sat"),
            this.c_pitchPrimaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-sat-scale"),
            this.c_pitchPrimaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-lum"),
            this.c_pitchPrimaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--pitch-primary-note-lum-scale"),
            this.c_noiseSecondaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-hue"),
            this.c_noiseSecondaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-hue-scale"),
            this.c_noiseSecondaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-sat"),
            this.c_noiseSecondaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-sat-scale"),
            this.c_noiseSecondaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-lum"),
            this.c_noiseSecondaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-channel-lum-scale"),
            this.c_noisePrimaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-hue"),
            this.c_noisePrimaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-hue-scale"),
            this.c_noisePrimaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-sat"),
            this.c_noisePrimaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-sat-scale"),
            this.c_noisePrimaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-lum"),
            this.c_noisePrimaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-channel-lum-scale"),
            this.c_noiseSecondaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-hue"),
            this.c_noiseSecondaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-hue-scale"),
            this.c_noiseSecondaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-sat"),
            this.c_noiseSecondaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-sat-scale"),
            this.c_noiseSecondaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-lum"),
            this.c_noiseSecondaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--noise-secondary-note-lum-scale"),
            this.c_noisePrimaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-hue"),
            this.c_noisePrimaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-hue-scale"),
            this.c_noisePrimaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-sat"),
            this.c_noisePrimaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-sat-scale"),
            this.c_noisePrimaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-lum"),
            this.c_noisePrimaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--noise-primary-note-lum-scale"),
            this.c_modSecondaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-hue"),
            this.c_modSecondaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-hue-scale"),
            this.c_modSecondaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-sat"),
            this.c_modSecondaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-sat-scale"),
            this.c_modSecondaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-lum"),
            this.c_modSecondaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-channel-lum-scale"),
            this.c_modPrimaryChannelHue = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-hue"),
            this.c_modPrimaryChannelHueScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-hue-scale"),
            this.c_modPrimaryChannelSat = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-sat"),
            this.c_modPrimaryChannelSatScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-sat-scale"),
            this.c_modPrimaryChannelLum = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-lum"),
            this.c_modPrimaryChannelLumScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-channel-lum-scale"),
            this.c_modSecondaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-hue"),
            this.c_modSecondaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-hue-scale"),
            this.c_modSecondaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-sat"),
            this.c_modSecondaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-sat-scale"),
            this.c_modSecondaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-lum"),
            this.c_modSecondaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--mod-secondary-note-lum-scale"),
            this.c_modPrimaryNoteHue = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-hue"),
            this.c_modPrimaryNoteHueScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-hue-scale"),
            this.c_modPrimaryNoteSat = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-sat"),
            this.c_modPrimaryNoteSatScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-sat-scale"),
            this.c_modPrimaryNoteLum = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-lum"),
            this.c_modPrimaryNoteLumScale = +getComputedStyle(this.l).getPropertyValue("--mod-primary-note-lum-scale"),
            "" != getComputedStyle(this.l).getPropertyValue("--formula-pitch-channel-count-override") && (this.c_pitchChannelCountOverride = +getComputedStyle(this.l).getPropertyValue("--formula-pitch-channel-count-override")),
            "" != getComputedStyle(this.l).getPropertyValue("--formula-noise-channel-count-override") && (this.c_noiseChannelCountOverride = +getComputedStyle(this.l).getPropertyValue("--formula-noise-channel-count-override")),
            "" != getComputedStyle(this.l).getPropertyValue("--formula-mod-channel-count-override") && (this.c_modChannelCountOverride = +getComputedStyle(this.l).getPropertyValue("--formula-mod-channel-count-override")))
        }
        static getComputed(t) {
            return getComputedStyle(this.l).getPropertyValue(t)
        }
    }
    nt.colorLookup = new Map,
    nt.usesColorFormula = !1,
    nt.defaultTheme = "ultrabox dark",
    nt.themes = {
        "dark classic": "",
        "dark competition": "\n\t\t\t\t:root {\n\t\t\t\t\t--hover-preview: #ddd;\n\t\t\t\t\t--playhead: #ddd;\n\t\t\t\t\t--primary-text: #ddd;\n\t\t\t\t\t--secondary-text: #8e695b;\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\n\t\t\t\t\t--loop-accent: #bf15ba;\n\t\t\t\t\t--link-accent: #f888ff;\n\t\t\t\t\t--ui-widget-background: #443a3a;\n\t\t\t\t\t--pitch-background: #353333;\n\t\t\t\t\t--tonic: #884a44;\n\t\t\t\t\t--fifth-note: #415498;\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\n\t\t\t}\n\t\t",
        "light classic": "\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\n\t\t\t\t\t--multiplicative-mod-slider: #789;\n\t\t\t\t\t--overwriting-mod-slider: #987;\n\t\t\t\t\t--indicator-primary: #98f;\n\t\t\t\t\t--indicator-secondary: #cde;\n\t\t\t\t\t--select2-opt-group: #cecece;\n\t\t\t\t\t--input-box-outline: #ddd;\n\t\t\t\t\t--mute-button-normal: #c0b47f;\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\n\t\t\t\t\t--mod4-primary-note:        #a86810;\n\t\t\t\t\t--mod-label-primary:        #dddddd;\n\t\t\t\t\t--mod-label-secondary-text: #777;\n\t\t\t\t\t--disabled-note-primary:    #666;\n\t\t\t\t\t--disabled-note-secondary:  #aaa;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.promptContainerBG::before {\n\t\t\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n\t\t\t\t}\t\n\t\t",
        "jummbox classic": "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #040410;\n\t\t\t\t\t--editor-background: #040410;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t\t--pitch-background: #393e4f;\n\t\t\t\t\t--tonic: #725491;\n\t\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t\t--black-piano-key: #666;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t\t--input-box-outline: #222;\n\t\t\t\t\t--mute-button-normal: #dda85d;\n\t\t\t\t\t--mute-button-mod: #886eae;\n\t\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.5;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.5;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.5;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.5;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #91879f;\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\n\t\t\t\t}\n\t\t\t",
        forest: "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #010c03;\n\t\t\t\t\t--editor-background: #010c03;\n\t\t\t\t\t--hover-preview: #efe;\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\n\t\t\t\t\t--primary-text: #efe;\n\t\t\t\t\t--secondary-text: #70A070;\n\t\t\t\t\t--inverted-text: #280228;\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\n\t\t\t\t\t--box-selection-fill: #267aa3;\n\t\t\t\t\t--loop-accent: #ffe845;\n\t\t\t\t\t--link-accent: #9f8;\n\t\t\t\t\t--ui-widget-background: #203829;\n\t\t\t\t\t--ui-widget-focus: #487860;\n\t\t\t\t\t--pitch-background: #203829;\n\t\t\t\t\t--tonic: #2b8d20;\n\t\t\t\t\t--fifth-note: #385840;\n\t\t\t\t\t--white-piano-key: #bda;\n\t\t\t\t\t--black-piano-key: #573;\n                    --black-piano-key-text: #ffffff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\n\t\t\t\t\t--track-editor-bg-noise: #304050;\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\n\t\t\t\t\t--track-editor-bg-mod: #506030;\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\n\t\t\t\t\t--indicator-primary: #dcd866;\n\t\t\t\t\t--indicator-secondary: #203829;\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\n\t\t\t\t\t--input-box-outline: #242;\n\t\t\t\t\t--mute-button-normal: #49e980;\n\t\t\t\t\t--mute-button-mod: #c2e502;\n\t\t\t\t\t--mod-label-primary: #133613;\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\n\t\t\t\t\t--mod-label-primary-text: #efe;\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-note-hue: 120;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 80;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 200;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-channel-sat: 48;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 65;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 200;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 33;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 200;\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 64;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 40;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-channel-sat: 60;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 40;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-note-sat: 62;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 55;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 40;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-note-sat: 66;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #536e5c;\n\t\t\t\t\t--disabled-note-secondary:  #395440;\n\t\t\t\t}\n\t\t\t",
        canyon: "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0a0000;\n\t\t\t\t\t--editor-background: #0a0000;\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\n\t\t\t\t\t--primary-text: #f5d6bf;\n\t\t\t\t\t--secondary-text: #934050;\n\t\t\t\t\t--inverted-text: #290505;\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\n\t\t\t\t\t--box-selection-fill: #94044870;\n\t\t\t\t\t--loop-accent: #ff1e1e;\n\t\t\t\t\t--link-accent: #da7b76;\n\t\t\t\t\t--ui-widget-background: #533137;\n\t\t\t\t\t--ui-widget-focus: #743e4b;\n\t\t\t\t\t--pitch-background: #4f3939;\n\t\t\t\t\t--tonic: #9e4145;\n\t\t\t\t\t--fifth-note: #5b3e6b;\n\t\t\t\t\t--white-piano-key: #d89898;\n\t\t\t\t\t--black-piano-key: #572b29;\n                    --black-piano-key-text: #ffffff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\n\t\t\t\t\t--track-editor-bg-mod: #552045;\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\n\t\t\t\t\t--indicator-primary: #f2f764;\n\t\t\t\t\t--indicator-secondary: #4f3939;\n\t\t\t\t\t--select2-opt-group: #673030;\n\t\t\t\t\t--input-box-outline: #443131;\n\t\t\t\t\t--mute-button-normal: #d81833;\n\t\t\t\t\t--mute-button-mod: #9e2691;\n\t\t\t\t\t--mod-label-primary: #5f2b39;\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 60;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 60;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 60;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 222;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 222;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 54;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 222;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 75;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #515164;\n\t\t\t\t\t--disabled-note-secondary:  #2a2a3a;\n\t\t\t\t}\n\t\t\t",
        midnight: "\n\t\t:root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #757575;\n\t\t\t--playhead: #fff;\n\t\t\t--primary-text: #fff;\n\t\t\t--secondary-text: #acacac;\n\t\t\t--inverted-text: #290505;\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\n\t\t\t--box-selection-fill: #79797970;\n\t\t\t--loop-accent: #646464;\n\t\t\t--link-accent: #707070;\n\t\t\t--ui-widget-background: #353535;\n\t\t\t--ui-widget-focus: #464646;\n\t\t\t--pitch-background: #222121;\n\t\t\t--tonic: #555955;\n\t\t\t--fifth-note: #1a1818;\n\t\t\t--white-piano-key: #a89e9e;\n\t\t\t--black-piano-key: #2d2424;\n            --black-piano-key-text: #ffffff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #373737;\n\t\t\t--track-editor-bg-pitch-dim: #131313;\n\t\t\t--track-editor-bg-noise: #484848;\n\t\t\t--track-editor-bg-noise-dim: #131313;\n\t\t\t--track-editor-bg-mod: #373737;\n\t\t\t--track-editor-bg-mod-dim: #131313;\n\t\t\t--multiplicative-mod-slider: #555;\n\t\t\t--overwriting-mod-slider: #464545;\n\t\t\t--indicator-primary: #e0e0e0;\n\t\t\t--indicator-secondary: #404040;\n\t\t\t--select2-opt-group: #3c3b3b;\n\t\t\t--input-box-outline: #757575;\n\t\t\t--mute-button-normal: #8e8d8d;\n\t\t\t--mute-button-mod: #ddd;\n\t\t\t--mod-label-primary: #262526;\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\n\t\t\t--mod-label-primary-text: #b9b9b9;\n\t\t\t--pitch-secondary-channel-hue: 240;\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\n\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 25;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 240;\n\t\t\t--pitch-primary-channel-hue-scale: 228;\n\t\t\t--pitch-primary-channel-sat: 80;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 60.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 240;\n\t\t\t--pitch-secondary-note-hue-scale: 228;\n\t\t\t--pitch-secondary-note-sat: 73.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 32;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 240;\n\t\t\t--pitch-primary-note-hue-scale: 228;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 80.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 160;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 160;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 160;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 62;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 30;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 62;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 62;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 34;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 62;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 75;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary:    #66a;\n\t\t\t--disabled-note-secondary:  #447;\n\t\t}\n\t",
        "jummbox light": "\n\t\t\t\t:root {\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t\t--page-margin: #cab1d3;\n\t\t\t\t\t--editor-background: #f4f4f4;\n\t\t\t\t\t--hover-preview: #2d26a2;\n\t\t\t\t\t--playhead: rgb(20 25 153 / 90%);\n\t\t\t\t\t--primary-text: #b686c3;\n\t\t\t\t\t--secondary-text: #970f38;\n\t\t\t\t\t--inverted-text: #fefdff;\n\t\t\t\t\t--text-selection: rgb(56 21 8 / 99%);\n\t\t\t\t\t--box-selection-fill: rgb(20 203 160 / 61%);\n\t\t\t\t\t--loop-accent: #09dc0e;\n\t\t\t\t\t--link-accent: #3ee669;\n\t\t\t\t\t--ui-widget-background: #0e0a42;\n\t\t\t\t\t--ui-widget-focus: #380c42;\n\t\t\t\t\t--pitch-background: #8daf96;\n\t\t\t\t\t--tonic: #a16fb1;\n\t\t\t\t\t--fifth-note: #d08c8c;\n\t\t\t\t\t--white-piano-key: #fbffee;\n\t\t\t\t\t--black-piano-key: #c9d8e5;\n\t\t\t\t\t--white-piano-key-text: #101160;\n\t\t\t\t\t--black-piano-key-text: #231b03;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #34456a;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #88afad;\n\t\t\t\t\t--track-editor-bg-noise: #564566;\n\t\t\t\t\t--track-editor-bg-noise-dim: #aaa;\n\t\t\t\t\t--track-editor-bg-mod: #7f779d;\n\t\t\t\t\t--track-editor-bg-mod-dim: #aaa;\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\n\t\t\t\t\t--indicator-primary: #ae38ff;\n\t\t\t\t\t--indicator-secondary: #5c8dbb;\n\t\t\t\t\t--select2-opt-group: #581b50;\n\t\t\t\t\t--input-box-outline: #6f7074;\n\t\t\t\t\t--mute-button-normal: #db1e00;\n\t\t\t\t\t--mute-button-mod: #883bf9;\n\t\t\t\t\t--mod-label-primary: #525297;\n\t\t\t\t\t--mod-label-secondary-text: rgb(197 147 245);\n\t\t\t\t\t--mod-label-primary-text: #a3aae9;\n                    --pitch-secondary-channel-hue: 26;\n                    --pitch-secondary-channel-hue-scale: 214.5;\n                    --pitch-secondary-channel-sat: 74.3;\n                    --pitch-secondary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 55;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 26;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 214.5;\n\t\t\t\t\t--pitch-primary-channel-sat: 74;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 65.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 26;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 214.5;\n\t\t\t\t\t--pitch-secondary-note-sat: 74.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 70;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 26;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 214.5;\n\t\t\t\t\t--pitch-primary-note-sat: 85;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 64.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-primary-channel-hue: 220;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 53;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-secondary-note-hue: 220;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 85;\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\n\t\t\t\t\t--noise-primary-note-hue: 220;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 54;\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 90;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 89;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 65;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 90;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 79;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 95;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 90;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 79;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 55;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #868;\n\t\t\t\t\t--disabled-note-secondary:  #767;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\t\tbackground-color: var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbackground-color: var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor .piano-button::before {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t.promptContainerBG::before {\n\t\t\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n\t\t\t\t}\n\t\t\t",
        "amoled dark": "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #000;\n\t\t\t\t\t--editor-background: #020406;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--secondary-text: #8e88ce;\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--loop-accent: #ad38f9;\n\t\t\t\t\t--link-accent: #bd25ff;\n\t\t\t\t\t--ui-widget-background: #080d1f;\n\t\t\t\t\t--ui-widget-focus: #060f2d;\n\t\t\t\t\t--pitch-background: #02060b;\n\t\t\t\t\t--tonic: #00113a;\n\t\t\t\t\t--fifth-note: #1b0019;\n\t\t\t\t\t--white-piano-key: #02040c;\n\t\t\t\t\t--black-piano-key: #02040c;\n                    --white-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #050829;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #010213;\n\t\t\t\t\t--track-editor-bg-noise: #051529;\n\t\t\t\t\t--track-editor-bg-noise-dim: #010b13;\n\t\t\t\t\t--track-editor-bg-mod: #150529;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a0113;\n\t\t\t\t\t--multiplicative-mod-slider: #2b409c;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #7f3bec;\n\t\t\t\t\t--indicator-secondary: #213888;\n\t\t\t\t\t--select2-opt-group: #1d123c;\n\t\t\t\t\t--input-box-outline: #1b1e48;\n\t\t\t\t\t--mute-button-normal: #d234b0;\n\t\t\t\t\t--mute-button-mod: #263d98;\n\t\t\t\t\t--mod-label-primary: #090910;\n\t\t\t\t\t--mod-label-secondary-text: rgb(73, 69, 214);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 183;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 158.7;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 183;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 158.7;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 183;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 158.7;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 183;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 158.7;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 30;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 30;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 30;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 30;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 0;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 0;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 0;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 0;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary: #91879f;\n\t\t\t\t\t--disabled-note-secondary: #6a677a;\n\t\t\t\t}\n\n\t\t\t",
        beachcombing: "\n\t\t\t:root {\n\t\t\t  --page-margin: #010121;\n  --editor-background: #020222;\n  --hover-preview: #f3ffff;\n  --playhead: #fff;\n  --primary-text: #c1f1ff;\n  --secondary-text: #546775;\n  --box-selection-fill: #3e0028;\n  --loop-accent: #5e68fffc;\n  --link-accent: #ff3ad5fc;\n  --ui-widget-background: #1f2b52;\n  --ui-widget-focus: #384e91;\n  --pitch-background: #2c3155;\n  --tonic: #935175;\n  --fifth-note: #1f569f;\n  --white-piano-key: #f3f2ff;\n  --black-piano-key: #4b4471;\n  --white-piano-key-text: #4b4471;\n  --track-editor-bg-pitch: #34406c;\n  --track-editor-bg-pitch-dim: #121931;\n  --track-editor-bg-noise: #562e3b;\n  --track-editor-bg-noise-dim: #161313;\n  --track-editor-bg-mod: #372e66;\n  --track-editor-bg-mod-dim: #2a1640;\n  --multiplicative-mod-slider: #606c9f;\n  --overwriting-mod-slider: #6850b5;\n  --indicator-primary: #ff8bd1;\n  --indicator-secondary: #393e4f;\n  --select2-opt-group: #5d576f;\n  --input-box-outline: #222;\n  --mute-button-normal: #7ce1ff;\n  --mute-button-mod: #db519d;\n  --pitch1-secondary-channel: #329b70;\n  --pitch1-primary-channel: #53ffb8;\n  --pitch1-secondary-note: #4cb98c;\n  --pitch1-primary-note: #98ffd4;\n  --pitch2-secondary-channel: #b08e4d;\n  --pitch2-primary-channel: #ffe185;\n  --pitch2-secondary-note: #91782e;\n  --pitch2-primary-note: #ffd968;\n  --pitch3-secondary-channel: #018e8e;\n  --pitch3-primary-channel: #3de4ff;\n  --pitch3-secondary-note: #24b7b7;\n  --pitch3-primary-note: #a7ffff;\n  --pitch4-secondary-channel: #792354;\n  --pitch4-primary-channel: #ff68bd;\n  --pitch4-secondary-note: #a73c78;\n  --pitch4-primary-note: #ff98d2;\n  --pitch5-secondary-channel: #185aab;\n  --pitch5-primary-channel: #6493ff;\n  --pitch5-secondary-note: #3e99d9;\n  --pitch5-primary-note: #b3e3ff;\n  --pitch6-secondary-channel: #953C47;\n  --pitch6-primary-channel: #FF7888;\n  --pitch6-secondary-note: #DF4F60;\n  --pitch6-primary-note: #FFB2BB;\n  --pitch7-secondary-channel: #4f007d;\n  --pitch7-primary-channel: #a54cd9;\n  --pitch7-secondary-note: #732b9d;\n  --pitch7-primary-note: #d386ff;\n  --pitch8-secondary-channel: #323c99;\n  --pitch8-primary-channel: #1b61ff;\n  --pitch8-secondary-note: #1848b3;\n  --pitch8-primary-note: #6f9bff;\n  --pitch9-secondary-channel: #1F605A;\n  --pitch9-primary-channel: #69FFEA;\n  --pitch9-secondary-note: #178076;\n  --pitch10-secondary-channel: #6D438C;\n  --pitch10-secondary-note: #8040B0;\n  --noise1-secondary-channel: #635070;\n  --noise1-primary-channel: #9071db;\n  --noise1-secondary-note: #915dc1;\n  --noise1-primary-note: #c5a5ff;\n  --noise2-secondary-channel: #993367;\n  --noise2-primary-channel: #dd777c;\n  --noise2-secondary-note: #cc6695;\n  --noise2-primary-note: #f0bbd1;\n  --noise3-secondary-channel: #4a8c8f;\n  --noise3-primary-channel: #77c5dd;\n  --noise3-secondary-note: #6fb4cf;\n  --noise3-primary-note: #bbf2ff;\n  --noise4-secondary-channel: #8e3e7d;\n  --noise4-primary-channel: #c682d2;\n  --noise4-secondary-note: #b871c1;\n  --noise4-primary-note: #ffb8f0;\n  --noise5-secondary-channel: #785e37;\n  --noise5-primary-channel: #bb9d77;\n  --noise5-secondary-note: #aa8c66;\n  --noise5-primary-note: #e2d1b2;\n  --mod1-secondary-channel: #4e8397;\n  --mod1-primary-channel: #92e6f3;\n  --mod1-secondary-note: #76b9d9;\n  --mod1-primary-note: #cde3ff;\n  --mod2-secondary-channel: #ad5774;\n  --mod2-primary-channel: #eba4ae;\n  --mod2-secondary-note: #c9719b;\n  --mod2-primary-note: #fdcee7;\n  --mod3-secondary-channel: #6f579f;\n  --mod3-primary-channel: #b192f7;\n  --mod3-secondary-note: #7c3fc8;\n  --mod4-secondary-channel: #a88a36;\n  --mod4-primary-channel: #bec825;\n  --mod4-secondary-note: #aecb57;\n  --mod4-primary-note: #dee9bd;\n  --mod-label-primary: #2c2c56;\n  --mod-label-secondary-text: rgb(71,69,147);\n  --mod-label-primary-text: white;\n  --disabled-note-primary: #91879f;\n  --disabled-note-secondary: #6a677a;\n\n\n\t\t\t}\n\t\t",
        roe: "\n\t\t\t:root {\n\t\t\t--page-margin: #050000;\n\t\t\t--editor-background: #050000;\n\t\t\t--primary-text: #b8cee0;\n\t\t\t--secondary-text: #cb3434;\n\t\t\t--text-selection: rgb(255 68 68 / 99%);\n\t\t\t--box-selection-fill: rgb(255 0 0 / 30%);\n\t\t\t--loop-accent: #7744FF;\n\t\t\t--link-accent: #FF2A2A;\n\t\t\t--ui-widget-background: #1a2642;\n\t\t\t--ui-widget-focus: #2c3f6d;\n\t\t\t--pitch-background: #15111a;\n\t\t\t--tonic: #1b3041;\n\t\t\t--fifth-note: #381818;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--track-editor-bg-pitch: #302938;\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\n\t\t\t--track-editor-bg-noise: #261f42;\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\n\t\t\t--track-editor-bg-mod: #183049;\n\t\t\t--track-editor-bg-mod-dim: #102132;\n\t\t\t--multiplicative-mod-slider: #344a7f;\n\t\t\t--overwriting-mod-slider: #344a7f;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #800000;\n\t\t\t--select2-opt-group: #141e34;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #299eff;\n\t\t\t--mute-button-mod: #165a93;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #4281FF;\n\t\t\t--noise1-primary-channel: #96b9ff;\n\t\t\t--noise1-secondary-note: #4281FF;\n\t\t\t--noise1-primary-note: #96b9ff;\n\t\t\t--noise2-secondary-channel: #7347FF;\n\t\t\t--noise2-primary-channel: #c3b0ff;\n\t\t\t--noise2-secondary-note: #7347FF;\n\t\t\t--noise2-primary-note: #c3b0ff;\n\t\t\t--noise3-secondary-channel: #9F3CBF;\n\t\t\t--noise3-primary-channel: #e29cf9;\n\t\t\t--noise3-secondary-note: #9F3CBF;\n\t\t\t--noise3-primary-note: #e29cf9;\n\t\t\t--noise4-secondary-channel: #D3326F;\n\t\t\t--noise4-primary-channel: #fb9bbf;\n\t\t\t--noise4-secondary-note: #D3326F;\n\t\t\t--noise4-primary-note: #fb9bbf;\n\t\t\t--noise5-secondary-channel: #FF2A2A;\n\t\t\t--noise5-primary-channel: #ffa2a2;\n\t\t\t--noise5-secondary-note: #FF2A2A;\n\t\t\t--noise5-primary-note: #ffa2a2;\n\t\t\t--mod1-secondary-channel: #47587a;\n\t\t\t--mod1-primary-channel: #96b9ff;\n\t\t\t--mod1-secondary-note: #47587a;\n\t\t\t--mod1-primary-note: #96b9ff;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #c3b0ff;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #c3b0ff;\n\t\t\t--mod3-secondary-channel: #6f4c7b;\n\t\t\t--mod3-primary-channel: #e29cf9;\n\t\t\t--mod3-secondary-note: #6f4c7b;\n\t\t\t--mod3-primary-note: #e29cf9;\n\t\t\t--mod4-secondary-channel: #9e6279;\n\t\t\t--mod4-primary-channel: #fb9bbf;\n\t\t\t--mod4-secondary-note: #9e6279;\n\t\t\t--mod4-primary-note: #fb9bbf;\n\t\t\t--mod-label-primary: #15111a;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #c9c9c9;\n\t\t\t--disabled-note-secondary: #616161;\n\t\t}",
        moonlight: "\n\t\t\t:root {\n\t\t\t--page-margin: #020514;\n\t\t\t--editor-background: #020514;\n\t\t\t--primary-text: #D4DCE9;\n\t\t\t--secondary-text: #3E87DA;\n\t\t\t--text-selection: #03599bd9;\n\t\t\t--box-selection-fill: hsl(206deg 66% 41% / 85%);\n\t\t\t--loop-accent: #639BD6;\n\t\t\t--link-accent: #A8C6E8;\n\t\t\t--ui-widget-background: #1e2940;\n\t\t\t--ui-widget-focus: #324b81;\n\t\t\t--pitch-background: #223849;\n\t\t\t--tonic: #33536c;\n\t\t\t--fifth-note: hsl(206deg 36% 16%);\n\t\t\t--white-piano-key: #c1bfe9;\n\t\t\t--black-piano-key: #454354;\n\t\t\t--track-editor-bg-pitch: #25568d80;\n\t\t\t--track-editor-bg-pitch-dim: #10253c80;\n\t\t\t--track-editor-bg-noise: #25568d80;\n\t\t\t--track-editor-bg-noise-dim: #10253c80;\n\t\t\t--track-editor-bg-mod: #25568d80;\n\t\t\t--track-editor-bg-mod-dim: #10253c80;\n\t\t\t--multiplicative-mod-slider: #0476cd;\n\t\t\t--overwriting-mod-slider: #035899;\n\t\t\t--indicator-primary: #57a1f4;\n\t\t\t--indicator-secondary: #2e5684;\n\t\t\t--select2-opt-group: #24355c;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #6ebffc;\n\t\t\t--mute-button-mod: #0a92fa;\n\t\t\t--pitch1-secondary-channel: #47425c;\n\t\t\t--pitch1-primary-channel: #918bac;\n\t\t\t--pitch1-secondary-note: #6b6489;\n\t\t\t--pitch1-primary-note: #a8a3bf;\n\t\t\t--pitch2-secondary-channel: #626493;\n\t\t\t--pitch2-primary-channel: #bdbed3;\n\t\t\t--pitch2-secondary-note: #626493;\n\t\t\t--pitch2-primary-note: #bdbed3;\n\t\t\t--pitch3-secondary-channel: #6e89b4;\n\t\t\t--pitch3-primary-channel: #d4dce9;\n\t\t\t--pitch3-secondary-note: #6e89b4;\n\t\t\t--pitch3-primary-note: #d4dce9;\n\t\t\t--pitch4-secondary-channel: #4c77a9;\n\t\t\t--pitch4-primary-channel: #a8c6e8;\n\t\t\t--pitch4-secondary-note: #4c77a9;\n\t\t\t--pitch4-primary-note: #a8c6e8;\n\t\t\t--pitch5-secondary-channel: #314e6d;\n\t\t\t--pitch5-primary-channel: #639bd6;\n\t\t\t--pitch5-secondary-note: #46698f;\n\t\t\t--pitch5-primary-note: #639bd6;\n\t\t\t--pitch6-secondary-channel: #143d6b;\n\t\t\t--pitch6-primary-channel: #3e87da;\n\t\t\t--pitch6-secondary-note: #143d6b;\n\t\t\t--pitch6-primary-note: #3e87da;\n\t\t\t--pitch7-secondary-channel: #314e6d;\n\t\t\t--pitch7-primary-channel: #639bd6;\n\t\t\t--pitch7-secondary-note: #314e6d;\n\t\t\t--pitch7-primary-note: #639bd6;\n\t\t\t--pitch8-secondary-channel: #4c77a9;\n\t\t\t--pitch8-primary-channel: #a8c6e8;\n\t\t\t--pitch8-secondary-note: #4c77a9;\n\t\t\t--pitch8-primary-note: #a8c6e8;\n\t\t\t--pitch9-secondary-channel: #6e89b4;\n\t\t\t--pitch9-primary-channel: #d4dce9;\n\t\t\t--pitch9-secondary-note: #6e89b4;\n\t\t\t--pitch9-primary-note: #d4dce9;\n\t\t\t--pitch10-secondary-channel: #626493;\n\t\t\t--pitch10-primary-channel: #bdbed3;\n\t\t\t--pitch10-secondary-note: #626493;\n\t\t\t--pitch10-primary-note: #bdbed3;\n\t\t\t--noise1-secondary-channel: #4b4a55;\n\t\t\t--noise1-primary-channel: #9795a3;\n\t\t\t--noise1-secondary-note: #4b4a55;\n\t\t\t--noise1-primary-note: #9795a3;\n\t\t\t--noise2-secondary-channel: #858e9d;\n\t\t\t--noise2-primary-channel: #d7dce5;\n\t\t\t--noise2-secondary-note: #858e9d;\n\t\t\t--noise2-primary-note: #d7dce5;\n\t\t\t--noise3-secondary-channel: #394e65;\n\t\t\t--noise3-primary-channel: #809bb7;\n\t\t\t--noise3-secondary-note: #394e65;\n\t\t\t--noise3-primary-note: #809bb7;\n\t\t\t--noise4-secondary-channel: #37577b;\n\t\t\t--noise4-primary-channel: #6189b8;\n\t\t\t--noise4-secondary-note: #37577b;\n\t\t\t--noise4-primary-note: #6189b8;\n\t\t\t--noise5-secondary-channel: #223849;\n\t\t\t--noise5-primary-channel: #5588af;\n\t\t\t--noise5-secondary-note: #223849;\n\t\t\t--noise5-primary-note: #5588af;\n\t\t\t--mod1-secondary-channel: #3e336c;\n\t\t\t--mod1-primary-channel: #6d60a4;\n\t\t\t--mod1-secondary-note: #3e336c;\n\t\t\t--mod1-primary-note: #6d60a4;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #bdbed3;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #bdbed3;\n\t\t\t--mod3-secondary-channel: #6b91bd;\n\t\t\t--mod3-primary-channel: #4b8fdd;\n\t\t\t--mod3-secondary-note: #597ca7;\n\t\t\t--mod3-primary-note: #7eade3;\n\t\t\t--mod4-secondary-channel: #14559f;\n\t\t\t--mod4-primary-channel: #3386e6;\n\t\t\t--mod4-secondary-note: #14559f;\n\t\t\t--mod4-primary-note: #3386e6;\n\t\t\t--mod-label-primary: #1e2940;\n\t\t\t--mod-label-secondary-text: #748ebe;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #828282;\n\t\t\t--disabled-note-secondary: #4f4f4f;\n\t\t\t}",
        autumn: "\n\t\t:root {\n\t\t\t--page-margin: #060304;\n\t\t\t--editor-background: #060304;\n\t\t\t--text-selection: rgb(115 80 76);\n\t\t\t--box-selection-fill: rgb(174 73 81 / 45%);\n\t\t\t--loop-accent: #834A69;\n\t\t\t--ui-widget-background: #2a2523;\n\t\t\t--ui-widget-focus: #4e4c44;\n\t\t\t--pitch-background: #121212;\n\t\t\t--tonic: #4f4f4f;\n\t\t\t--fifth-note: #222;\n\t\t\t--white-piano-key: #b59b9b;\n\t\t\t--black-piano-key: #231e1e;\n\t\t\t--track-editor-bg-pitch: #352f38;\n\t\t\t--track-editor-bg-pitch-dim: #232025;\n\t\t\t--track-editor-bg-noise: #3c3029;\n\t\t\t--track-editor-bg-noise-dim: #251d19;\n\t\t\t--track-editor-bg-mod: #202623;\n\t\t\t--track-editor-bg-mod-dim: #131715;\n\t\t\t--multiplicative-mod-slider: #D9D16E;\n\t\t\t--overwriting-mod-slider: #2D826F;\n\t\t\t--indicator-primary: #D9D16E;\n\t\t\t--indicator-secondary: #444226;\n\t\t\t--select2-opt-group: #20191c;\n\t\t\t--input-box-outline: #20191c;\n\t\t\t--mute-button-normal: var(--pitch2-primary-channel);\n\t\t\t--mute-button-mod: var(--pitch4-primary-channel);\n\t\t\t--pitch1-secondary-channel: #704a34;\n\t\t\t--pitch1-primary-channel: #D9895A;\n\t\t\t--pitch1-secondary-note: #704a34;\n\t\t\t--pitch1-primary-note: #D9895A;\n\t\t\t--pitch2-secondary-channel: #5f3538;\n\t\t\t--pitch2-primary-channel: #AE4951;\n\t\t\t--pitch2-secondary-note: #5f3538;\n\t\t\t--pitch2-primary-note: #AE4951;\n\t\t\t--pitch3-secondary-channel: #5c4336;\n\t\t\t--pitch3-primary-channel: #CA9A81;\n\t\t\t--pitch3-secondary-note: #5c4336;\n\t\t\t--pitch3-primary-note: #CA9A81;\n\t\t\t--pitch4-secondary-channel: #1d3143;\n\t\t\t--pitch4-primary-channel: #386995;\n\t\t\t--pitch4-secondary-note: #1d3143;\n\t\t\t--pitch4-primary-note: #386995;\n\t\t\t--pitch5-secondary-channel: #9c8a58;\n\t\t\t--pitch5-primary-channel: #D9D16E;\n\t\t\t--pitch5-secondary-note: #7c783f;\n\t\t\t--pitch5-primary-note: #D9D16E;\n\t\t\t--pitch6-secondary-channel: #886562;\n\t\t\t--pitch6-primary-channel: #D3A9A5;\n\t\t\t--pitch6-secondary-note: #886562;\n\t\t\t--pitch6-primary-note: #D3A9A5;\n\t\t\t--pitch7-secondary-channel: #1c3f37;\n\t\t\t--pitch7-primary-channel: #2D826F;\n\t\t\t--pitch7-secondary-note: #1c3f37;\n\t\t\t--pitch7-primary-note: #2D826F;\n\t\t\t--pitch8-secondary-channel: #442e2d;\n\t\t\t--pitch8-primary-channel: #815150;\n\t\t\t--pitch8-secondary-note: #442e2d;\n\t\t\t--pitch8-primary-note: #815150;\n\t\t\t--pitch9-secondary-channel: #8e6f60;\n\t\t\t--pitch9-primary-channel: #E5B8A1;\n\t\t\t--pitch9-secondary-note: #8e6f60;\n\t\t\t--pitch9-primary-note: #E5B8A1;\n\t\t\t--pitch10-secondary-channel: #4f3142;\n\t\t\t--pitch10-primary-channel: #834A69;\n\t\t\t--pitch10-secondary-note: #4f3142;\n\t\t\t--pitch10-primary-note: #834A69;\n\t\t\t--noise1-secondary-channel: #6b5346;\n\t\t\t--noise1-primary-channel: #b99c89;\n\t\t\t--noise1-secondary-note: #6b5346;\n\t\t\t--noise1-primary-note: #F0D0BB;\n\t\t\t--noise2-secondary-channel: #4a3839;\n\t\t\t--noise2-primary-channel: #9c6b6e;\n\t\t\t--noise2-secondary-note: #4a3839;\n\t\t\t--noise2-primary-note: #c18b8f;\n\t\t\t--noise3-secondary-channel: #2d3c4a;\n\t\t\t--noise3-primary-channel: #536e86;\n\t\t\t--noise3-secondary-note: #2d3c4a;\n\t\t\t--noise3-primary-note: #8fa8c0;\n\t\t\t--noise4-secondary-channel: #273f3a;\n\t\t\t--noise4-primary-channel: #4e8377;\n\t\t\t--noise4-secondary-note: #273f3a;\n\t\t\t--noise4-primary-note: #87baae;\n\t\t\t--noise5-secondary-channel: #372730;\n\t\t\t--noise5-primary-channel: #7f5e70;\n\t\t\t--noise5-secondary-note: #372730;\n\t\t\t--noise5-primary-note: #cc96b3;\n\t\t\t--mod1-secondary-channel: #783f1f;\n\t\t\t--mod1-primary-channel: #dc6d2c;\n\t\t\t--mod1-secondary-note: #783f1f;\n\t\t\t--mod1-primary-note: #dc6d2c;\n\t\t\t--mod2-secondary-channel: #0b3153;\n\t\t\t--mod2-primary-channel: #1464ac;\n\t\t\t--mod2-secondary-note: #0b3153;\n\t\t\t--mod2-primary-note: #1464ac;\n\t\t\t--mod3-secondary-channel: #075040;\n\t\t\t--mod3-primary-channel: #08a17f;\n\t\t\t--mod3-secondary-note: #075040;\n\t\t\t--mod3-primary-note: #08a17f;\n\t\t\t--mod4-secondary-channel: #631640;\n\t\t\t--mod4-primary-channel: #b4186d;\n\t\t\t--mod4-secondary-note: #631640;\n\t\t\t--mod4-primary-note: #b4186d;\n\t\t\t--mod-label-primary: #000;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}",
        fruit: "\n\t\t:root {\n\t\t\t--page-margin: #040507;\n\t\t\t--editor-background: #040507;\n\t\t\t--text-selection: rgb(115 103 76);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #22222c;\n\t\t\t--ui-widget-focus: #39394c;\n\t\t\t--pitch-background: #101010;\n\t\t\t--tonic: #2c2d34;\n\t\t\t--fifth-note: #191a20;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--track-editor-bg-pitch: #2b2d40;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #3c3644;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #322a2a;\n\t\t\t--track-editor-bg-mod-dim: #191515;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #EAAC9D;\n\t\t\t--indicator-secondary: #5e413a;\n\t\t\t--select2-opt-group: #191920;\n\t\t\t--input-box-outline: #191920;\n\t\t\t--mute-button-normal: #798FA7;\n\t\t\t--mute-button-mod: #354457;\n\t\t\t--pitch1-secondary-channel: #91655a;\n\t\t\t--pitch1-primary-channel: #EAAC9D;\n\t\t\t--pitch1-secondary-note: #91655a;\n\t\t\t--pitch1-primary-note: #EAAC9D;\n\t\t\t--pitch2-secondary-channel: #8f6513;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #8f6513;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #212f46;\n\t\t\t--pitch3-primary-channel: #34558B;\n\t\t\t--pitch3-secondary-note: #212f46;\n\t\t\t--pitch3-primary-note: #34558B;\n\t\t\t--pitch4-secondary-channel: #2e6b5b;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #2e6b5b;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #555D46;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #555D46;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #A2553B;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #A2553B;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #7b4021;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #7b4021;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #847753;\n\t\t\t--pitch8-primary-channel: #EFDAA3;\n\t\t\t--pitch8-secondary-note: #847753;\n\t\t\t--pitch8-primary-note: #EFDAA3;\n\t\t\t--pitch9-secondary-channel: #2c3642;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #2c3642;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #0d4453;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #0d4453;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #3B3D4A;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #3B3D4A;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #625f5e;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #625f5e;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}",
        sunset: "\n\t\t:root {\n\t\t\t--page-margin: #040300;\n\t\t\t--editor-background: #040300;\n\t\t\t--text-selection: rgb(94 0 157);\n\t\t\t--box-selection-fill: rgb(174 173 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #241b24;\n\t\t\t--ui-widget-focus: #3a2e39;\n\t\t\t--pitch-background: #141414;\n\t\t\t--tonic: #2C212B;\n\t\t\t--fifth-note: #2E2A15;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--track-editor-bg-pitch: #2d2e42;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #393340;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #232a2c;\n\t\t\t--track-editor-bg-mod-dim: #151819;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #F28891;\n\t\t\t--indicator-secondary: #601d23;\n\t\t\t--select2-opt-group: #151015;\n\t\t\t--input-box-outline: #151015;\n\t\t\t--mute-button-normal: #E4739D;\n\t\t\t--mute-button-mod: #9650A6;\n\t\t\t--pitch1-secondary-channel: #7F7721;\n\t\t\t--pitch1-primary-channel: #F3E79A;\n\t\t\t--pitch1-secondary-note: #7F7721;\n\t\t\t--pitch1-primary-note: #F3E79A;\n\t\t\t--pitch2-secondary-channel: #785E20;\n\t\t\t--pitch2-primary-channel: #F7D086;\n\t\t\t--pitch2-secondary-note: #785E20;\n\t\t\t--pitch2-primary-note: #F7D086;\n\t\t\t--pitch3-secondary-channel: #6E4219;\n\t\t\t--pitch3-primary-channel: #F9B881;\n\t\t\t--pitch3-secondary-note: #6E4219;\n\t\t\t--pitch3-primary-note: #F9B881;\n\t\t\t--pitch4-secondary-channel: #79351F;\n\t\t\t--pitch4-primary-channel: #F7A086;\n\t\t\t--pitch4-secondary-note: #79351F;\n\t\t\t--pitch4-primary-note: #F7A086;\n\t\t\t--pitch5-secondary-channel: #81272F;\n\t\t\t--pitch5-primary-channel: #F28891;\n\t\t\t--pitch5-secondary-note: #81272F;\n\t\t\t--pitch5-primary-note: #F28891;\n\t\t\t--pitch6-secondary-channel: #8F224D;\n\t\t\t--pitch6-primary-channel: #E4739D;\n\t\t\t--pitch6-secondary-note: #8F224D;\n\t\t\t--pitch6-primary-note: #E4739D;\n\t\t\t--pitch7-secondary-channel: #611548;\n\t\t\t--pitch7-primary-channel: #CF63A6;\n\t\t\t--pitch7-secondary-note: #611548;\n\t\t\t--pitch7-primary-note: #CF63A6;\n\t\t\t--pitch8-secondary-channel: #561253;\n\t\t\t--pitch8-primary-channel: #B557A9;\n\t\t\t--pitch8-secondary-note: #4D104A;\n\t\t\t--pitch8-primary-note: #B557A9;\n\t\t\t--pitch9-secondary-channel: #4c1260;\n\t\t\t--pitch9-primary-channel: #9650A6;\n\t\t\t--pitch9-secondary-note: #3C0F4C;\n\t\t\t--pitch9-primary-note: #9650A6;\n\t\t\t--pitch10-secondary-channel: #3e1d78;\n\t\t\t--pitch10-primary-channel: #704D9E;\n\t\t\t--pitch10-secondary-note: #27124C;\n\t\t\t--pitch10-primary-note: #704D9E;\n\t\t\t--noise1-secondary-channel: #A7A578;\n\t\t\t--noise1-primary-channel: #EFE9AC;\n\t\t\t--noise1-secondary-note: #A7A578;\n\t\t\t--noise1-primary-note: #EFE9AC;\n\t\t\t--noise2-secondary-channel: #947A5F;\n\t\t\t--noise2-primary-channel: #FBCEA8;\n\t\t\t--noise2-secondary-note: #947A5F;\n\t\t\t--noise2-primary-note: #FBCEA8;\n\t\t\t--noise3-secondary-channel: #A3635D;\n\t\t\t--noise3-primary-channel: #F4A5AB;\n\t\t\t--noise3-secondary-note: #A3635D;\n\t\t\t--noise3-primary-note: #F4A5AB;\n\t\t\t--noise4-secondary-channel: #724D60;\n\t\t\t--noise4-primary-channel: #CD90B6;\n\t\t\t--noise4-secondary-note: #724D60;\n\t\t\t--noise4-primary-note: #CD90B6;\n\t\t\t--noise5-secondary-channel: #503F5C;\n\t\t\t--noise5-primary-channel: #7C6A9E;\n\t\t\t--noise5-secondary-note: #503F5C;\n\t\t\t--noise5-primary-note: #7C6A9E;\n\t\t\t--mod1-secondary-channel: #371883;\n\t\t\t--mod1-primary-channel: #6416C6;\n\t\t\t--mod1-secondary-note: #1F0A52;\n\t\t\t--mod1-primary-note: #6416C6;\n\t\t\t--mod2-secondary-channel: #690645;\n\t\t\t--mod2-primary-channel: #E52FA2;\n\t\t\t--mod2-secondary-note: #690645;\n\t\t\t--mod2-primary-note: #E52FA2;\n\t\t\t--mod3-secondary-channel: #943618;\n\t\t\t--mod3-primary-channel: #eb5b2c;\n\t\t\t--mod3-secondary-note: #943618;\n\t\t\t--mod3-primary-note: #eb5b2c;\n\t\t\t--mod4-secondary-channel: #928409;\n\t\t\t--mod4-primary-channel: #ecd50e;\n\t\t\t--mod4-secondary-note: #928409;\n\t\t\t--mod4-primary-note: #ecd50e;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}",
        toxic: "\n\t\t:root {\n\t\t\t--page-margin: #010003;\n\t\t\t--editor-background: #010003;\n\t\t\t--text-selection: rgb(147 195 0);\n\t\t\t--box-selection-fill: rgb(145 174 73 / 49%);\n\t\t\t--loop-accent: #BCDE2C;\n\t\t\t--link-accent: #edff9f;\n\t\t\t--ui-widget-background: #261e2e;\n\t\t\t--ui-widget-focus: #322042;\n\t\t\t--pitch-background: #141c15;\n\t\t\t--tonic: #282c21;\n\t\t\t--fifth-note: #18221a;\n\t\t\t--white-piano-key: #e3e3e3;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--track-editor-bg-pitch: #38293e;\n\t\t\t--track-editor-bg-pitch-dim: #251c29;\n\t\t\t--track-editor-bg-noise: #2c304c;\n\t\t\t--track-editor-bg-noise-dim: #191b2b;\n\t\t\t--track-editor-bg-mod: #311b32;\n\t\t\t--track-editor-bg-mod-dim: #1d101e;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #aae9ff;\n\t\t\t--indicator-secondary: #253e46;\n\t\t\t--select2-opt-group: #110d15;\n\t\t\t--input-box-outline: #110d15;\n\t\t\t--mute-button-normal: #8f5ad1;\n\t\t\t--mute-button-mod: #482574;\n\t\t\t--pitch1-secondary-channel: #6b7f19;\n\t\t\t--pitch1-primary-channel: #BCDE2C;\n\t\t\t--pitch1-secondary-note: #6b7f19;\n\t\t\t--pitch1-primary-note: #BCDE2C;\n\t\t\t--pitch2-secondary-channel: #497a31;\n\t\t\t--pitch2-primary-channel: #7BD152;\n\t\t\t--pitch2-secondary-note: #497a31;\n\t\t\t--pitch2-primary-note: #7BD152;\n\t\t\t--pitch3-secondary-channel: #286b40;\n\t\t\t--pitch3-primary-channel: #45BE71;\n\t\t\t--pitch3-secondary-note: #286b40;\n\t\t\t--pitch3-primary-note: #45BE71;\n\t\t\t--pitch4-secondary-channel: #125140;\n\t\t\t--pitch4-primary-channel: #25A884;\n\t\t\t--pitch4-secondary-note: #125140;\n\t\t\t--pitch4-primary-note: #25A884;\n\t\t\t--pitch5-secondary-channel: #114c49;\n\t\t\t--pitch5-primary-channel: #21908C;\n\t\t\t--pitch5-secondary-note: #114c49;\n\t\t\t--pitch5-primary-note: #21908C;\n\t\t\t--pitch6-secondary-channel: #143843;\n\t\t\t--pitch6-primary-channel: #2B788E;\n\t\t\t--pitch6-secondary-note: #143843;\n\t\t\t--pitch6-primary-note: #2B788E;\n\t\t\t--pitch7-secondary-channel: #1d354e;\n\t\t\t--pitch7-primary-channel: #355F8D;\n\t\t\t--pitch7-secondary-note: #1a2f46;\n\t\t\t--pitch7-primary-note: #355F8D;\n\t\t\t--pitch8-secondary-channel: #2c2e5a;\n\t\t\t--pitch8-primary-channel: #414486;\n\t\t\t--pitch8-secondary-note: #1e1f3d;\n\t\t\t--pitch8-primary-note: #414486;\n\t\t\t--pitch9-secondary-channel: #3c1f5e;\n\t\t\t--pitch9-primary-channel: #5e3b89;\n\t\t\t--pitch9-secondary-note: #25133b;\n\t\t\t--pitch9-primary-note: #5e3b89;\n\t\t\t--pitch10-secondary-channel: #510264;\n\t\t\t--pitch10-primary-channel: #720d8a;\n\t\t\t--pitch10-secondary-note: #440154;\n\t\t\t--pitch10-primary-note: #720d8a;\n\t\t\t--noise1-secondary-channel: #BCDE2C;\n\t\t\t--noise1-primary-channel: #edff9f;\n\t\t\t--noise1-secondary-note: #BCDE2C;\n\t\t\t--noise1-primary-note: #edff9f;\n\t\t\t--noise2-secondary-channel: #45BE71;\n\t\t\t--noise2-primary-channel: #89ffb4;\n\t\t\t--noise2-secondary-note: #45BE71;\n\t\t\t--noise2-primary-note: #89ffb4;\n\t\t\t--noise3-secondary-channel: #21908C;\n\t\t\t--noise3-primary-channel: #72fffa;\n\t\t\t--noise3-secondary-note: #21908C;\n\t\t\t--noise3-primary-note: #72fffa;\n\t\t\t--noise4-secondary-channel: #355F8D;\n\t\t\t--noise4-primary-channel: #7cb6f5;\n\t\t\t--noise4-secondary-note: #355F8D;\n\t\t\t--noise4-primary-note: #7cb6f5;\n\t\t\t--noise5-secondary-channel: #482574;\n\t\t\t--noise5-primary-channel: #8f5ad1;\n\t\t\t--noise5-secondary-note: #48257A;\n\t\t\t--noise5-primary-note: #8f5ad1;\n\t\t\t--mod1-secondary-channel: #815a16;\n\t\t\t--mod1-primary-channel: #F5AB29;\n\t\t\t--mod1-secondary-note: #815a16;\n\t\t\t--mod1-primary-note: #F5AB29;\n\t\t\t--mod2-secondary-channel: #4d341a;\n\t\t\t--mod2-primary-channel: #C98540;\n\t\t\t--mod2-secondary-note: #4d341a;\n\t\t\t--mod2-primary-note: #C98540;\n\t\t\t--mod3-secondary-channel: #643734;\n\t\t\t--mod3-primary-channel: #A75D58;\n\t\t\t--mod3-secondary-note: #643734;\n\t\t\t--mod3-primary-note: #A75D58;\n\t\t\t--mod4-secondary-channel: #461430;\n\t\t\t--mod4-primary-channel: #812359;\n\t\t\t--mod4-secondary-note: #3f112b;\n\t\t\t--mod4-primary-note: #812359;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}",
        "violet verdant": "\n\t\t:root {\n\t\t\t--page-margin: #0e031a;\n\t\t\t--editor-background: #0e031a;\n\t\t\t--hover-preview: #e5ffea;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #f0e0ff;\n\t\t\t--secondary-text: #706087;\n\t\t\t--box-selection-fill: #225835;\n\t\t\t--loop-accent: #8f00fb;\n\t\t\t--link-accent: #82dd5d;\n\t\t\t--ui-widget-background: #303c66;\n\t\t\t--ui-widget-focus: #62559b;\n\t\t\t--pitch-background: #293b52;\n\t\t\t--tonic: #5b46ad;\n\t\t\t--fifth-note: #42604d;\n\t\t\t--white-piano-key: #f6e8ff;\n\t\t\t--black-piano-key: #5a4972;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #392a46;\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t--track-editor-bg-noise: #403150;\n\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t--track-editor-bg-mod: #253c25;\n\t\t\t--track-editor-bg-mod-dim: #0c1811;\n\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t--indicator-primary: #9c64f7;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #403150;\n\t\t\t--mute-button-normal: #82dd5d;\n\t\t\t--mute-button-mod: #945de5;\n\t\t\t--mod-label-primary: #312840;\n\t\t\t--mod-label-secondary-text: rgb(88 70 104);\n\t\t\t--mod-label-primary-text: #82dd5d;\n\t\t\t--pitch-secondary-channel-hue: 64;\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t--pitch-secondary-channel-sat: 63.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 64;\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 32;\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t--pitch-secondary-note-sat: 87.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 64;\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 192;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 45;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 32;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 192;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 43.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 45;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 192;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 132;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 132;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 100;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 132;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #91879f;\n\t\t\t--disabled-note-secondary: #6a677a;\n\t\t}",
        portal: "\n\t\t:root {\n\t\t\t--page-margin: #04081a;\n\t\t\t--editor-background: #04081a;\n\t\t\t--box-selection-fill: rgb(0 72 181);\n\t\t\t--loop-accent: #44d4ff;\n\t\t\t--link-accent: #ffa500;\n\t\t\t--ui-widget-background: #212c4a;\n\t\t\t--ui-widget-focus: #121f42;\n\t\t\t--pitch-background: #1b263e;\n\t\t\t--tonic: #995d00;\n\t\t\t--fifth-note: #0898a1;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #516d7a;\n\t\t\t--track-editor-bg-pitch: #213352;\n\t\t\t--track-editor-bg-pitch-dim: #152032;\n\t\t\t--track-editor-bg-noise: #403524;\n\t\t\t--track-editor-bg-noise-dim: #2a1f0e;\n\t\t\t--indicator-primary: #5490ff;\n\t\t\t--mute-button-normal: #3372ff;\n\t\t\t--mute-button-mod: #dd872f;\n\t\t\t--pitch1-primary-channel: #77f7ff;\n\t\t\t--pitch2-secondary-channel: #0083a1;\n\t\t\t--pitch2-primary-channel: #35d9ff;\n\t\t\t--pitch2-secondary-note: #0083a1;\n\t\t\t--pitch2-primary-note: #a4eeff;\n\t\t\t--pitch3-secondary-channel: #0074c7;\n\t\t\t--pitch3-primary-channel: #3caeff;\n\t\t\t--pitch3-secondary-note: #00477a;\n\t\t\t--pitch3-primary-note: #aadcff;\n\t\t\t--pitch4-secondary-channel: #0039a1;\n\t\t\t--pitch4-primary-channel: #2673ff;\n\t\t\t--pitch4-secondary-note: #001f56;\n\t\t\t--pitch4-primary-note: #9bbeff;\n\t\t\t--pitch5-secondary-channel: #31148b;\n\t\t\t--pitch5-primary-channel: #7042ff;\n\t\t\t--pitch5-secondary-note: #190656;\n\t\t\t--pitch5-primary-note: #b79fff;\n\t\t\t--pitch6-secondary-channel: #979934;\n\t\t\t--pitch6-primary-channel: #fbff2f;\n\t\t\t--pitch6-secondary-note: #5d5e0a;\n\t\t\t--pitch6-primary-note: #fdff9a;\n\t\t\t--pitch7-secondary-channel: #b78f00;\n\t\t\t--pitch7-primary-channel: #ffd747;\n\t\t\t--pitch7-secondary-note: #5e3d00;\n\t\t\t--pitch7-primary-note: #ffe381;\n\t\t\t--pitch8-secondary-channel: #9d6500;\n\t\t\t--pitch8-primary-channel: #ffa400;\n\t\t\t--pitch8-secondary-note: #583900;\n\t\t\t--pitch8-primary-note: #ffd07c;\n\t\t\t--pitch9-secondary-channel: #744203;\n\t\t\t--pitch9-primary-channel: #ff8e00;\n\t\t\t--pitch9-secondary-note: #502d00;\n\t\t\t--pitch9-primary-note: #ffcb89;\n\t\t\t--pitch10-secondary-channel: #a32d00;\n\t\t\t--pitch10-primary-channel: #ff885b;\n\t\t\t--pitch10-secondary-note: #521700;\n\t\t\t--pitch10-primary-note: #ffb397;\n\t\t\t--noise1-secondary-channel: #6e2210;\n\t\t\t--noise1-primary-channel: #ff4600;\n\t\t\t--noise1-secondary-note: #4c1a08;\n\t\t\t--noise1-primary-note: #ffc9b4;\n\t\t\t--noise2-secondary-channel: #6a3110;\n\t\t\t--noise2-primary-channel: #ff782a;\n\t\t\t--noise2-secondary-note: #4c1f05;\n\t\t\t--noise2-primary-note: #ffb488;\n\t\t\t--noise3-secondary-channel: #72460e;\n\t\t\t--noise3-primary-channel: #d9871f;\n\t\t\t--noise3-secondary-note: #442905;\n\t\t\t--noise3-primary-note: #ffdcae;\n\t\t\t--noise4-secondary-channel: #837a0f;\n\t\t\t--noise4-primary-channel: #f7ea55;\n\t\t\t--noise4-secondary-note: #605906;\n\t\t\t--noise4-primary-note: #fff9ab;\n\t\t\t--noise5-secondary-channel: #8c8f00;\n\t\t\t--noise5-primary-channel: #fdff90;\n\t\t\t--noise5-secondary-note: #606200;\n\t\t\t--noise5-primary-note: #feffbc;\n\t\t\t--mod1-secondary-channel: #561b97;\n\t\t\t--mod1-primary-channel: #aa66f5;\n\t\t\t--mod1-secondary-note: #30075c;\n\t\t\t--mod1-primary-note: #cd9fff;\n\t\t\t--mod2-secondary-channel: #5116df;\n\t\t\t--mod2-primary-channel: #6b2dff;\n\t\t\t--mod2-secondary-note: #36138b;\n\t\t\t--mod2-primary-note: #bea3ff;\n\t\t\t--mod3-secondary-channel: #2535a1;\n\t\t\t--mod3-primary-channel: #3f57ff;\n\t\t\t--mod3-secondary-note: #0e185c;\n\t\t\t--mod3-primary-note: #8494ff;\n\t\t\t--mod4-secondary-channel: #1b5883;\n\t\t\t--mod4-primary-channel: #5eb7f5;\n\t\t\t--mod4-secondary-note: #072f4a;\n\t\t\t--mod4-primary-note: #63beff;\n\t\t\t--mod-label-primary: #24293a;\n\t\t\t--mod-label-secondary-text: #454d4e;\n\t\t\t--mod-label-primary-text: #7bd4ff;\n\t\t\t--disabled-note-primary: #072f4a;\n\t\t\t--disabled-note-secondary: #6585a7;\n\t\t}",
        fusion: ":root {\n\t\t\t--page-margin: #0c0306;\n\t\t\t--editor-background: #0c0306;\n\t\t\t--primary-text: #26d9cd;\n\t\t\t--secondary-text: #ff6666;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ffffff;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #ff6666;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: hsl(61deg 100% 70% / 25%);\n\t\t\t--tonic: #66a3ff40;\n\t\t\t--fifth-note: #ff666640;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--track-editor-bg-pitch: #404040bf;\n\t\t\t--track-editor-bg-pitch-dim: #151515;\n\t\t\t--track-editor-bg-noise: #404040bf;\n\t\t\t--track-editor-bg-noise-dim: #151515;\n\t\t\t--track-editor-bg-mod: #404040bf;\n\t\t\t--track-editor-bg-mod-dim: #151515;\n\t\t\t--multiplicative-mod-slider: #ef7692;\n\t\t\t--overwriting-mod-slider: #f43e69;\n\t\t\t--indicator-primary: #26d9cd;\n\t\t\t--indicator-secondary: hsl(176deg 70% 25%);\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #26d9cd;\n\t\t\t--mute-button-mod: hsl(346deg 70% 50%);\n\t\t\t--pitch1-secondary-channel: #bf4040;\n\t\t\t--pitch1-primary-channel: #ff6666;\n\t\t\t--pitch1-secondary-note: #bf4040;\n\t\t\t--pitch1-primary-note: #ff6666;\n\t\t\t--pitch2-secondary-channel: #bf5b40;\n\t\t\t--pitch2-primary-channel: #ff8766;\n\t\t\t--pitch2-secondary-note: #bf5b40;\n\t\t\t--pitch2-primary-note: #ff8766;\n\t\t\t--pitch3-secondary-channel: #bf7940;\n\t\t\t--pitch3-primary-channel: #ffab66;\n\t\t\t--pitch3-secondary-note: #bf7940;\n\t\t\t--pitch3-primary-note: #ffab66;\n\t\t\t--pitch4-secondary-channel: #bf9b40;\n\t\t\t--pitch4-primary-channel: #ffd466;\n\t\t\t--pitch4-secondary-note: #bf9b40;\n\t\t\t--pitch4-primary-note: #ffd466;\n\t\t\t--pitch5-secondary-channel: #bdbf40;\n\t\t\t--pitch5-primary-channel: #fcff66;\n\t\t\t--pitch5-secondary-note: #bdbf40;\n\t\t\t--pitch5-primary-note: #fcff66;\n\t\t\t--pitch6-secondary-channel: #9dbf40;\n\t\t\t--pitch6-primary-channel: #d6ff66;\n\t\t\t--pitch6-secondary-note: #9dbf40;\n\t\t\t--pitch6-primary-note: #d6ff66;\n\t\t\t--pitch7-secondary-channel: #9dbf40;\n\t\t\t--pitch7-primary-channel: #fcff66;\n\t\t\t--pitch7-secondary-note: #9dbf40;\n\t\t\t--pitch7-primary-note: #fcff66;\n\t\t\t--pitch8-secondary-channel: #bf9b40;\n\t\t\t--pitch8-primary-channel: #ffd466;\n\t\t\t--pitch8-secondary-note: #bf9b40;\n\t\t\t--pitch8-primary-note: #ffd466;\n\t\t\t--pitch9-secondary-channel: #bf5b40;\n\t\t\t--pitch9-primary-channel: #ffab66;\n\t\t\t--pitch9-secondary-note: #bf5b40;\n\t\t\t--pitch9-primary-note: #ffab66;\n\t\t\t--pitch10-secondary-channel: #d15a1f;\n\t\t\t--pitch10-primary-channel: #ff8766;\n\t\t\t--pitch10-secondary-note: #d15a1f;\n\t\t\t--pitch10-primary-note: #ff8766;\n\t\t\t--noise1-secondary-channel: #4073bf;\n\t\t\t--noise1-primary-channel: #66a3ff;\n\t\t\t--noise1-secondary-note: #4073bf;\n\t\t\t--noise1-primary-note: #66a3ff;\n\t\t\t--noise2-secondary-channel: #405dbf;\n\t\t\t--noise2-primary-channel: #668aff;\n\t\t\t--noise2-secondary-note: #405dbf;\n\t\t\t--noise2-primary-note: #668aff;\n\t\t\t--noise3-secondary-channel: #4f40bf;\n\t\t\t--noise3-primary-channel: #7866ff;\n\t\t\t--noise3-secondary-note: #4f40bf;\n\t\t\t--noise3-primary-note: #7866ff;\n\t\t\t--noise4-secondary-channel: #8840bf;\n\t\t\t--noise4-primary-channel: #bd66ff;\n\t\t\t--noise4-secondary-note: #8840bf;\n\t\t\t--noise4-primary-note: #bd66ff;\n\t\t\t--noise5-secondary-channel: #bf40b5;\n\t\t\t--noise5-primary-channel: #ff66f2;\n\t\t\t--noise5-secondary-note: #bf40b5;\n\t\t\t--noise5-primary-note: #ff66f2;\n\t\t\t--mod1-secondary-channel: #cc6666;\n\t\t\t--mod1-primary-channel: #ff9999;\n\t\t\t--mod1-secondary-note: #cc6666;\n\t\t\t--mod1-primary-note: #ff9999;\n\t\t\t--mod2-secondary-channel: #cc7766;\n\t\t\t--mod2-primary-channel: #ffaa99;\n\t\t\t--mod2-secondary-note: #bf5540;\n\t\t\t--mod2-primary-note: #ffaa99;\n\t\t\t--mod3-secondary-channel: #cc8866;\n\t\t\t--mod3-primary-channel: #ffbb99;\n\t\t\t--mod3-secondary-note: #cc8866;\n\t\t\t--mod3-primary-note: #ffbb99;\n\t\t\t--mod4-secondary-channel: #cc9966;\n\t\t\t--mod4-primary-channel: #ffcc99;\n\t\t\t--mod4-secondary-note: #cc9966;\n\t\t\t--mod4-primary-note: #ffcc99;\n\t\t\t--disabled-note-primary: #696969;\n\t\t\t--disabled-note-secondary: #232323;\n\t\t}",
        inverse: ":root {\n\t\t\t--page-margin: #c4c8e3;\n\t\t\t--editor-background: #c4c8e3;\n\t\t\t--hover-preview: #000000;\n\t\t\t--playhead: #243953;\n\t\t\t--primary-text: black;\n\t\t\t--secondary-text: #855b95;\n\t\t\t--text-selection: rgb(132 125 255);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 65%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #4e00c8;\n\t\t\t--ui-widget-background: #e7e7ff;\n\t\t\t--ui-widget-focus: #d0d3e9;\n\t\t\t--pitch-background: #ffffff;\n\t\t\t--tonic: #bbbbbb;\n\t\t\t--fifth-note: #dcdcdc;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #615f66;\n\t\t\t--track-editor-bg-pitch: #e9ebff;\n\t\t\t--track-editor-bg-pitch-dim: #e9ebff;\n\t\t\t--track-editor-bg-noise: #fdf2fe;\n\t\t\t--track-editor-bg-noise-dim: #fdf2fe;\n\t\t\t--track-editor-bg-mod: #dbdefe;\n\t\t\t--track-editor-bg-mod-dim: #dbdefe;\n\t\t\t--multiplicative-mod-slider: #6900b3;\n\t\t\t--overwriting-mod-slider: #004b9d;\n\t\t\t--indicator-primary: #ff633d;\n\t\t\t--indicator-secondary: #933822;\n\t\t\t--select2-opt-group: #e7e7ff;\n\t\t\t--input-box-outline: #e7e7ff;\n\t\t\t--mute-button-normal: #0072ef;\n\t\t\t--mute-button-mod: #002e67;\n\t\t\t--pitch1-secondary-channel: #b77d6e;\n\t\t\t--pitch1-primary-channel: #ff9d85;\n\t\t\t--pitch1-secondary-note: #b77d6e;\n\t\t\t--pitch1-primary-note: #ff9d85;\n\t\t\t--pitch2-secondary-channel: #be8821;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #be8821;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #3a62a4;\n\t\t\t--pitch3-primary-channel: #528ae6;\n\t\t\t--pitch3-secondary-note: #3a62a4;\n\t\t\t--pitch3-primary-note: #528ae6;\n\t\t\t--pitch4-secondary-channel: #3e8d78;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #3e8d78;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #84906d;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #84906d;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #bd6345;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #bd6345;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #aa592f;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #aa592f;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #b2a171;\n\t\t\t--pitch8-primary-channel: #ffd76d;\n\t\t\t--pitch8-secondary-note: #b2a171;\n\t\t\t--pitch8-primary-note: #ffd76d;\n\t\t\t--pitch9-secondary-channel: #4f6177;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #4f6177;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #165162;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #165162;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #4a4c5b;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #4a4c5b;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #817c7b;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #817c7b;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #e9e9e9;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--disabled-note-primary: #959595;\n\t\t\t--disabled-note-secondary: #6e6e6e;\n\t\t\t}",
        nebula: "\n\t\t:root {\n\t\t\t--page-margin: #040410;\n\t\t\t--editor-background: #150e1f;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--secondary-text: #8C849A;\n\t\t\t--text-selection: rgba(141,79,201,0.99);\n\t\t\t--box-selection-fill: #311E44;\n\t\t\t--loop-accent: #CC688C;\n\t\t\t--link-accent: #817DC9;\n\t\t\t--ui-widget-background: #44394F;\n\t\t\t--ui-widget-focus: #7A6386;\n\t\t\t--pitch-background: #393e4f40;\n\t\t\t--tonic: #7D5C9EC0;\n\t\t\t--fifth-note: #ab77bd50;\n\t\t\t--white-piano-key: #EEEEEE;\n\t\t\t--black-piano-key: #5F5566;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #46374C;\n\t\t\t--track-editor-bg-pitch-dim: #1F1C2850;\n\t\t\t--track-editor-bg-noise: #3D353B;\n\t\t\t--track-editor-bg-noise-dim: #16131550;\n\t\t\t--track-editor-bg-mod: #623F4C;\n\t\t\t--track-editor-bg-mod-dim: #361A2450;\n\t\t\t--multiplicative-mod-slider: #9F6E6A;\n\t\t\t--overwriting-mod-slider: #A664B5;\n\t\t\t--indicator-primary: #CC6B8E;\n\t\t\t--indicator-secondary: #44394F;\n\t\t\t--select2-opt-group: #6A576F;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #BF91DC;\n\t\t\t--mute-button-mod: #DC8C9A;\n\t\t\t--mod-label-primary: #3A2840;\n\t\t\t--mod-label-secondary-text: #62485E;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--pitch-secondary-channel-hue: -96;\n\t\t\t--pitch-secondary-channel-hue-scale: 4.2;\n\t\t\t--pitch-secondary-channel-sat: 50.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: -96;\n\t\t\t--pitch-primary-channel-hue-scale: 4.2;\n\t\t\t--pitch-primary-channel-sat: 70;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: -96;\n\t\t\t--pitch-secondary-note-hue-scale: 4.2;\n\t\t\t--pitch-secondary-note-sat: 70.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: -96;\n\t\t\t--pitch-primary-note-hue-scale: 4.2;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 16;\n\t\t\t--noise-secondary-channel-hue-scale: -1.33;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 16;\n\t\t\t--noise-primary-channel-hue-scale: -1.33;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 12;\n\t\t\t--noise-secondary-note-hue-scale: -1.33;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 12;\n\t\t\t--noise-primary-note-hue-scale: -1.33;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 12;\n\t\t\t--mod-secondary-channel-hue-scale: -.75;\n\t\t\t--mod-secondary-channel-sat: 50;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 12;\n\t\t\t--mod-primary-channel-hue-scale: -.75;\n\t\t\t--mod-primary-channel-sat: 70;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 12;\n\t\t\t--mod-secondary-note-hue-scale: -.75;\n\t\t\t--mod-secondary-note-sat: 75;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 12;\n\t\t\t--mod-primary-note-hue-scale: -.75;\n\t\t\t--mod-primary-note-sat: 85;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #aaa;\n\t\t}",
        "roe light": "\n\t\t:root {\n\t\t\t--page-margin: #fff5f5;\n\t\t\t--editor-background: #fff5f5;\n\t\t\t--hover-preview: #0e8bf1;\n\t\t\t--playhead: 000;\n\t\t\t--primary-text: #0e8bf1;\n\t\t\t--secondary-text: #f10e0e;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ff4444fc;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #9a75ff;\n\t\t\t--link-accent: #ff7070;\n\t\t\t--ui-widget-background: #bdc9e5;\n\t\t\t--ui-widget-focus: #a3b7e5;\n\t\t\t--pitch-background: #d0c7db;\n\t\t\t--tonic: #bed3e4;\n\t\t\t--fifth-note: #e7c6c6;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--track-editor-bg-pitch: #e5e1ea;\n\t\t\t--track-editor-bg-pitch-dim: #cbc4d4;\n\t\t\t--track-editor-bg-noise: #e0ddee;\n\t\t\t--track-editor-bg-noise-dim: #c1bade;\n\t\t\t--track-editor-bg-mod: #d8e6f3;\n\t\t\t--track-editor-bg-mod-dim: #b1cce7;\n\t\t\t--multiplicative-mod-slider: #8097cb;\n\t\t\t--overwriting-mod-slider: #8097cb;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #92a6d3;\n\t\t\t--select2-opt-group: #b6c4e2;\n\t\t\t--input-box-outline: #bdc9e5;\n\t\t\t--mute-button-normal: #66baff;\n\t\t\t--mute-button-mod: #1a98ff;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #336bdb;\n\t\t\t--noise1-primary-channel: #4281FF;\n\t\t\t--noise1-secondary-note: #336bdb;\n\t\t\t--noise1-primary-note: #4281FF;\n\t\t\t--noise2-secondary-channel: #5e38dc;\n\t\t\t--noise2-primary-channel: #7347FF;\n\t\t\t--noise2-secondary-note: #5e38dc;\n\t\t\t--noise2-primary-note: #7347FF;\n\t\t\t--noise3-secondary-channel: #7d3097;\n\t\t\t--noise3-primary-channel: #9F3CBF;\n\t\t\t--noise3-secondary-note: #7d3097;\n\t\t\t--noise3-primary-note: #9F3CBF;\n\t\t\t--noise4-secondary-channel: #ad2559;\n\t\t\t--noise4-primary-channel: #D3326F;\n\t\t\t--noise4-secondary-note: #ad2559;\n\t\t\t--noise4-primary-note: #D3326F;\n\t\t\t--noise5-secondary-channel: #d02525;\n\t\t\t--noise5-primary-channel: #FF2A2A;\n\t\t\t--noise5-secondary-note: #d02525;\n\t\t\t--noise5-primary-note: #FF2A2A;\n\t\t\t--mod1-secondary-channel: #35415a;\n\t\t\t--mod1-primary-channel: #47587a;\n\t\t\t--mod1-secondary-note: #35415a;\n\t\t\t--mod1-primary-note: #47587a;\n\t\t\t--mod2-secondary-channel: #5a5374;\n\t\t\t--mod2-primary-channel: #716791;\n\t\t\t--mod2-secondary-note: #5a5374;\n\t\t\t--mod2-primary-note: #716791;\n\t\t\t--mod3-secondary-channel: #53385c;\n\t\t\t--mod3-primary-channel: #6f4c7b;\n\t\t\t--mod3-secondary-note: #53385c;\n\t\t\t--mod3-primary-note: #6f4c7b;\n\t\t\t--mod4-secondary-channel: #7e4e60;\n\t\t\t--mod4-primary-channel: #9e6279;\n\t\t\t--mod4-secondary-note: #7e4e60;\n\t\t\t--mod4-primary-note: #9e6279;\n\t\t\t--mod-label-primary: #d0c7db;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--disabled-note-primary: #616161;\n\t\t\t--disabled-note-secondary: #474747;\n\t\t}\n\t\t.promptContainerBG::before {\n\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n\t\t}",
        energized: "\n\t\t:root {\n\t\t\t--page-margin: #000a08;\n\t\t\t--editor-background: #000a08;\n\t\t\t--hover-preview: #ffffcc;\n\t\t\t--playhead: #ccfff5;\n\t\t\t--secondary-text: #d9d98c;\n\t\t\t--text-selection: #ffff6659;\n\t\t\t--box-selection-fill: #ffffff33;\n\t\t\t--loop-accent: #ffff00;\n\t\t\t--link-accent: #00ffcc;\n\t\t\t--ui-widget-background: #141f1d;\n\t\t\t--ui-widget-focus: #24423d;\n\t\t\t--pitch-background: #001410;\n\t\t\t--tonic: #00241d;\n\t\t\t--fifth-note: #ffff6633;\n\t\t\t--white-piano-key: #66998f;\n\t\t\t--black-piano-key: #141f1d;\n\t\t\t--track-editor-bg-pitch: #66998f40;\n\t\t\t--track-editor-bg-pitch-dim: #293d3940;\n\t\t\t--track-editor-bg-noise: #66998f40;\n\t\t\t--track-editor-bg-noise-dim: #293d3940;\n\t\t\t--track-editor-bg-mod: #99996640;\n\t\t\t--track-editor-bg-mod-dim: #3d3d2940;\n\t\t\t--multiplicative-mod-slider: #ffff00;\n\t\t\t--overwriting-mod-slider: #00ffcc;\n\t\t\t--indicator-primary: #ffff00;\n\t\t\t--indicator-secondary: #141f1d;\n\t\t\t--select2-opt-group: #1b312e;\n\t\t\t--input-box-outline: #141f1d;\n\t\t\t--mute-button-normal: #00ffcc;\n\t\t\t--mute-button-mod: #00997a;\n\t\t\t--pitch1-secondary-channel: #bfbf40;\n\t\t\t--pitch1-primary-channel: #ffff64;\n\t\t\t--pitch1-secondary-note: #bfbf40;\n\t\t\t--pitch1-primary-note: #ffff64;\n\t\t\t--pitch2-secondary-channel: #a2bf40;\n\t\t\t--pitch2-primary-channel: #e0ff7d;\n\t\t\t--pitch2-secondary-note: #a2bf40;\n\t\t\t--pitch2-primary-note: #e0ff7d;\n\t\t\t--pitch3-secondary-channel: #75bf40;\n\t\t\t--pitch3-primary-channel: #c1ff96;\n\t\t\t--pitch3-secondary-note: #75bf40;\n\t\t\t--pitch3-primary-note: #c1ff96;\n\t\t\t--pitch4-secondary-channel: #40bf51;\n\t\t\t--pitch4-primary-channel: #a2ffaf;\n\t\t\t--pitch4-secondary-note: #40bf51;\n\t\t\t--pitch4-primary-note: #a2ffaf;\n\t\t\t--pitch5-secondary-channel: #40bf86;\n\t\t\t--pitch5-primary-channel: #83ffc8;\n\t\t\t--pitch5-secondary-note: #40bf86;\n\t\t\t--pitch5-primary-note: #83ffc8;\n\t\t\t--pitch6-secondary-channel: #40bfa6;\n\t\t\t--pitch6-primary-channel: #64ffe1;\n\t\t\t--pitch6-secondary-note: #40bfa6;\n\t\t\t--pitch6-primary-note: #64ffe1;\n\t\t\t--pitch7-secondary-channel: #40bf86;\n\t\t\t--pitch7-primary-channel: #83ffc8;\n\t\t\t--pitch7-secondary-note: #40bf86;\n\t\t\t--pitch7-primary-note: #83ffc8;\n\t\t\t--pitch8-secondary-channel: #40bf51;\n\t\t\t--pitch8-primary-channel: #a2ffaf;\n\t\t\t--pitch8-secondary-note: #40bf51;\n\t\t\t--pitch8-primary-note: #a2ffaf;\n\t\t\t--pitch9-secondary-channel: #75bf40;\n\t\t\t--pitch9-primary-channel: #c1ff96;\n\t\t\t--pitch9-secondary-note: #75bf40;\n\t\t\t--pitch9-primary-note: #c1ff96;\n\t\t\t--pitch10-secondary-channel: #a2bf40;\n\t\t\t--pitch10-primary-channel: #e0ff7d;\n\t\t\t--pitch10-secondary-note: #a2bf40;\n\t\t\t--pitch10-primary-note: #e0ff7d;\n\t\t\t--noise1-secondary-channel: #a6a659;\n\t\t\t--noise1-primary-channel: #ffffcc;\n\t\t\t--noise1-secondary-note: #a6a659;\n\t\t\t--noise1-primary-note: #ffffcc;\n\t\t\t--noise2-secondary-channel: #94a659;\n\t\t\t--noise2-primary-channel: #f3ffcc;\n\t\t\t--noise2-secondary-note: #94a659;\n\t\t\t--noise2-primary-note: #f3ffcc;\n\t\t\t--noise3-secondary-channel: #79a659;\n\t\t\t--noise3-primary-channel: #e1ffcc;\n\t\t\t--noise3-secondary-note: #79a659;\n\t\t\t--noise3-primary-note: #e1ffcc;\n\t\t\t--noise4-secondary-channel: #94a659;\n\t\t\t--noise4-primary-channel: #f3ffcc;\n\t\t\t--noise4-secondary-note: #94a659;\n\t\t\t--noise4-primary-note: #f3ffcc;\n\t\t\t--noise5-secondary-channel: #a6a659;\n\t\t\t--noise5-primary-channel: #ffffcc;\n\t\t\t--noise5-secondary-note: #a6a659;\n\t\t\t--noise5-primary-note: #ffffcc;\n\t\t\t--mod1-secondary-channel: #a3a329;\n\t\t\t--mod1-primary-channel: #ffff00;\n\t\t\t--mod1-secondary-note: #a3a329;\n\t\t\t--mod1-primary-note: #ffff00;\n\t\t\t--mod2-secondary-channel: #a38529;\n\t\t\t--mod2-primary-channel: #ffbf00;\n\t\t\t--mod2-secondary-note: #a38529;\n\t\t\t--mod2-primary-note: #ffbf00;\n\t\t\t--mod3-secondary-channel: #a36629;\n\t\t\t--mod3-primary-channel: #ff7f00;\n\t\t\t--mod3-secondary-note: #a36629;\n\t\t\t--mod3-primary-note: #ff7f00;\n\t\t\t--mod4-secondary-channel: #a38529;\n\t\t\t--mod4-primary-channel: #ffbf00;\n\t\t\t--mod4-secondary-note: #a38529;\n\t\t\t--mod4-primary-note: #ffbf00;\n\t\t\t--mod-label-primary: #141f1d;\n\t\t\t--mod-label-secondary-text: #d9d98c;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #808080;\n\t\t\t--disabled-note-secondary: #666666;\n\t\t}",
        neapolitan: ":root {\n\t\t\t--page-margin: #120807;\n\t\t\t--editor-background: #120807;\n\t\t\t--hover-preview: #e79a82;\n\t\t\t--playhead: #e79a82;\n\t\t\t--primary-text: #decdbf;\n\t\t\t--secondary-text: #fa99bb;\n\t\t\t--text-selection: #990036;\n\t\t\t--loop-accent: #f6377a;\n\t\t\t--link-accent: #f6377a;\n\t\t\t--ui-widget-background: #24160f;\n\t\t\t--ui-widget-focus: #362217;\n\t\t\t--pitch-background: #1e1106;\n\t\t\t--tonic: #382414;\n\t\t\t--fifth-note: #41240c;\n\t\t\t--white-piano-key: #e1c5b7;\n\t\t\t--black-piano-key: #482c1e;\n\t\t\t--white-piano-key-text: black;\n\t\t\t--black-piano-key-text: white;\n\t\t\t--track-editor-bg-pitch: #4d2a19;\n\t\t\t--track-editor-bg-pitch-dim: #27150c;\n\t\t\t--track-editor-bg-noise: #4d2a19;\n\t\t\t--track-editor-bg-noise-dim: #27150c;\n\t\t\t--track-editor-bg-mod: #4d2a19;\n\t\t\t--track-editor-bg-mod-dim: #27150c;\n\t\t\t--multiplicative-mod-slider: #decdbf;\n\t\t\t--overwriting-mod-slider: #decdbf;\n\t\t\t--indicator-primary: #decdbf;\n\t\t\t--indicator-secondary: #362217;\n\t\t\t--select2-opt-group: #24160f;\n\t\t\t--input-box-outline: #24160f;\n\t\t\t--mute-button-normal: #ff66a1;\n\t\t\t--mute-button-mod: #e61968;\n\t\t\t--pitch1-secondary-channel: #680029;\n\t\t\t--pitch1-primary-channel: #cc0052;\n\t\t\t--pitch1-secondary-note: #660029;\n\t\t\t--pitch1-primary-note: #cc0052;\n\t\t\t--pitch2-secondary-channel: #7e1b43;\n\t\t\t--pitch2-primary-channel: #d32e71;\n\t\t\t--pitch2-secondary-note: #7e1b43;\n\t\t\t--pitch2-primary-note: #d32e71;\n\t\t\t--pitch3-secondary-channel: #aa275e;\n\t\t\t--pitch3-primary-channel: #da5d91;\n\t\t\t--pitch3-secondary-note: #aa275e;\n\t\t\t--pitch3-primary-note: #da5d91;\n\t\t\t--pitch4-secondary-channel: #cc3878;\n\t\t\t--pitch4-primary-channel: #e18bb0;\n\t\t\t--pitch4-secondary-note: #cc3878;\n\t\t\t--pitch4-primary-note: #e18bb0;\n\t\t\t--pitch5-secondary-channel: #d06c9b;\n\t\t\t--pitch5-primary-channel: #e9bad0;\n\t\t\t--pitch5-secondary-note: #d06c9b;\n\t\t\t--pitch5-primary-note: #e9bad0;\n\t\t\t--pitch6-secondary-channel: #c9acc5;\n\t\t\t--pitch6-primary-channel: #f0e8ef;\n\t\t\t--pitch6-secondary-note: #c9acc5;\n\t\t\t--pitch6-primary-note: #f0e8ef;\n\t\t\t--pitch7-secondary-channel: #d06c9b;\n\t\t\t--pitch7-primary-channel: #e9bad0;\n\t\t\t--pitch7-secondary-note: #d06c9b;\n\t\t\t--pitch7-primary-note: #e9bad0;\n\t\t\t--pitch8-secondary-channel: #cc3878;\n\t\t\t--pitch8-primary-channel: #e18bb0;\n\t\t\t--pitch8-secondary-note: #cc3878;\n\t\t\t--pitch8-primary-note: #e18bb0;\n\t\t\t--pitch9-secondary-channel: #aa275e;\n\t\t\t--pitch9-primary-channel: #da5d91;\n\t\t\t--pitch9-secondary-note: #aa275e;\n\t\t\t--pitch9-primary-note: #da5d91;\n\t\t\t--pitch10-secondary-channel: #7e1b43;\n\t\t\t--pitch10-primary-channel: #d32e71;\n\t\t\t--pitch10-secondary-note: #7e1b43;\n\t\t\t--pitch10-primary-note: #d32e71;\n\t\t\t--noise1-secondary-channel: #683a37;\n\t\t\t--noise1-primary-channel: #A85F5A;\n\t\t\t--noise1-secondary-note: #683a37;\n\t\t\t--noise1-primary-note: #A85F5A;\n\t\t\t--noise2-secondary-channel: #7c4a41;\n\t\t\t--noise2-primary-channel: #B47A70;\n\t\t\t--noise2-secondary-note: #7c4a41;\n\t\t\t--noise2-primary-note: #B47A70;\n\t\t\t--noise3-secondary-channel: #935f4d;\n\t\t\t--noise3-primary-channel: #c09587;\n\t\t\t--noise3-secondary-note: #935f4d;\n\t\t\t--noise3-primary-note: #C09587;\n\t\t\t--noise4-secondary-channel: #aa795a;\n\t\t\t--noise4-primary-channel: #cdb09d;\n\t\t\t--noise4-secondary-note: #aa795a;\n\t\t\t--noise4-primary-note: #CDAF9D;\n\t\t\t--noise5-secondary-channel: #bb987c;\n\t\t\t--noise5-primary-channel: #decdbf;\n\t\t\t--noise5-secondary-note: #bb987c;\n\t\t\t--noise5-primary-note: #decdbf;\n\t\t\t--mod1-secondary-channel: #6ca784;\n\t\t\t--mod1-primary-channel: #accdb9;\n\t\t\t--mod1-secondary-note: #6ca784;\n\t\t\t--mod1-primary-note: #accdb9;\n\t\t\t--mod2-secondary-channel: #7daa9f;\n\t\t\t--mod2-primary-channel: #bbd3cd;\n\t\t\t--mod2-secondary-note: #7daa9f;\n\t\t\t--mod2-primary-note: #bbd3cd;\n\t\t\t--mod3-secondary-channel: #70a3a9;\n\t\t\t--mod3-primary-channel: #afcccf;\n\t\t\t--mod3-secondary-note: #70a3a9;\n\t\t\t--mod3-primary-note: #afcccf;\n\t\t\t--mod4-secondary-channel: #5698b8;\n\t\t\t--mod4-primary-channel: #9ec3d6;\n\t\t\t--mod4-secondary-note: #5698b8;\n\t\t\t--mod4-primary-note: #9ec3d6;\n\t\t\t--mod-label-primary: #24160f;\n\t\t\t--mod-label-secondary-text: #E5AFC2;\n\t\t\t--mod-label-primary-text: #decdbf;\n\t\t\t--disabled-note-primary: #bababa;\n\t\t\t--disabled-note-secondary: #878787;\n\t\t}",
        poly: ":root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #808080;\n\t\t\t--playhead: #808080;\n\t\t\t--secondary-text: #cccccc;\n\t\t\t--text-selection: #696969;\n\t\t\t--box-selection-fill: #cccccc40;\n\t\t\t--loop-accent: #808080;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: #1a1a1a;\n\t\t\t--tonic: #262626;\n\t\t\t--fifth-note: #0d0d0d;\n\t\t\t--white-piano-key: #808080;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #262626;\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\n\t\t\t--track-editor-bg-noise: #262626;\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\n\t\t\t--track-editor-bg-mod: #262626;\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\n\t\t\t--multiplicative-mod-slider: #808080;\n\t\t\t--overwriting-mod-slider: #808080;\n\t\t\t--indicator-primary: #808080;\n\t\t\t--indicator-secondary: #333333;\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #808080;\n\t\t\t--mute-button-mod: #808080;\n\t\t\t--mod-label-primary: #232323;\n\t\t\t--mod-label-secondary-text: #696969;\n\t\t\t--mod-label-primary-text: #cdcdcd;\n\t\t\t--pitch-secondary-channel-hue: 208;\n\t\t\t--pitch-secondary-channel-hue-scale: 10;\n\t\t\t--pitch-secondary-channel-sat: 100;\n\t\t\t--pitch-secondary-channel-sat-scale: 0;\n\t\t\t--pitch-secondary-channel-lum: 88;\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\n\t\t\t--pitch-primary-channel-hue: 207;\n\t\t\t--pitch-primary-channel-hue-scale: 10;\n\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t--pitch-primary-channel-sat-scale: 0;\n\t\t\t--pitch-primary-channel-lum: 910;\n\t\t\t--pitch-primary-channel-lum-scale: 0;\n\t\t\t--pitch-secondary-note-hue: 208;\n\t\t\t--pitch-secondary-note-hue-scale: 10;\n\t\t\t--pitch-secondary-note-sat: 100;\n\t\t\t--pitch-secondary-note-sat-scale: 0;\n\t\t\t--pitch-secondary-note-lum: 88;\n\t\t\t--pitch-secondary-note-lum-scale: 0;\n\t\t\t--pitch-primary-note-hue: 208;\n\t\t\t--pitch-primary-note-hue-scale: 10;\n\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t--pitch-primary-note-sat-scale: 0;\n\t\t\t--pitch-primary-note-lum: 910;\n\t\t\t--pitch-primary-note-lum-scale: 0;\n\t\t\t--noise-secondary-channel-hue: 328;\n\t\t\t--noise-secondary-channel-hue-scale: 10;\n\t\t\t--noise-secondary-channel-sat: 100;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 88;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 327;\n\t\t\t--noise-primary-channel-hue-scale: 10;\n\t\t\t--noise-primary-channel-sat: 100;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 910;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 328;\n\t\t\t--noise-secondary-note-hue-scale: 10;\n\t\t\t--noise-secondary-note-sat: 100;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 88;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 327;\n\t\t\t--noise-primary-note-hue-scale: 10;\n\t\t\t--noise-primary-note-sat: 100;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 910;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 87;\n\t\t\t--mod-secondary-channel-hue-scale: 10;\n\t\t\t--mod-secondary-channel-sat: 100;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 88;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 88;\n\t\t\t--mod-primary-channel-hue-scale: 10;\n\t\t\t--mod-primary-channel-sat: 100;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 910;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 87;\n\t\t\t--mod-secondary-note-hue-scale: 10;\n\t\t\t--mod-secondary-note-sat: 100;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 88;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 88;\n\t\t\t--mod-primary-note-hue-scale: 10;\n\t\t\t--mod-primary-note-sat: 100;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 910;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #c6c6c6;\n\t\t\t--disabled-note-secondary: #8c8c8c;\n\t\t}",
        blutonium: ":root {\n\t\t\t--page-margin: #02070D;\n\t\t\t--editor-background: #02070D;\n\t\t\t--primary-text: #9bd1ee;\n\t\t\t--secondary-text: #5a6da8;\n\t\t\t--text-selection: rgb(68 68 255 / 99%);\n\t\t\t--box-selection-fill: rgb(0 0 255 / 30%);\n\t\t\t--loop-accent: #024aca;\n\t\t\t--link-accent: #024aca;\n\t\t\t--ui-widget-background: #161c2e;\n\t\t\t--ui-widget-focus: #262c3e;\n\t\t\t--pitch-background: #22272D;\n\t\t\t--tonic: #1b3056;\n\t\t\t--fifth-note: #344051;\n\t\t\t--white-piano-key: #a6c6ed;\n\t\t\t--black-piano-key: #2f4687;\n\t\t\t--track-editor-bg-pitch: #25284c;\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\n\t\t\t--track-editor-bg-noise: #261f42;\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\n\t\t\t--track-editor-bg-mod: #183049;\n\t\t\t--track-editor-bg-mod-dim: #102132;\n\t\t\t--multiplicative-mod-slider: #344a7f;\n\t\t\t--overwriting-mod-slider: #344a7f;\n\t\t\t--indicator-primary: #024aca;\n\t\t\t--indicator-secondary: #00177d;\n\t\t\t--select2-opt-group: #141e34;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #273b9d;\n\t\t\t--mute-button-mod: #27989d;\n\t\t\t--pitch1-secondary-channel: hsl(200, 100%, 40%);\n\t\t\t--pitch1-primary-channel: #99ddff;\n\t\t\t--pitch1-secondary-note: hsl(200, 100%, 40%);\n\t\t\t--pitch1-primary-note: #99ddff;\n\t\t\t--pitch2-secondary-channel: \thsl(212, 100%, 34%);\n\t\t\t--pitch2-primary-channel: #5BA8FF;\n\t\t\t--pitch2-secondary-note: hsl(212, 100%, 34%);\n\t\t\t--pitch2-primary-note: #5BA8FF;\n\t\t\t--pitch3-secondary-channel: #024ACA;\n\t\t\t--pitch3-primary-channel: #0A89FF;\n\t\t\t--pitch3-secondary-note: #024ACA;\n\t\t\t--pitch3-primary-note: #0A89FF;\n\t\t\t--pitch4-secondary-channel: #00177D;\n\t\t\t--pitch4-primary-channel: #024ACA;\n\t\t\t--pitch4-secondary-note: #00177D;\n\t\t\t--pitch4-primary-note: #024ACA;\n\t\t\t--pitch5-secondary-channel: #000e4e;\n\t\t\t--pitch5-primary-channel: #0023bf;\n\t\t\t--pitch5-secondary-note: #000e4e;\n\t\t\t--pitch5-primary-note: #0023bf;\n\t\t\t--pitch6-secondary-channel: #8990FE;\n\t\t\t--pitch6-primary-channel: #C2C6FF;\n\t\t\t--pitch6-secondary-note: #8990FE;\n\t\t\t--pitch6-primary-note: #C2C6FF;\n\t\t\t--pitch7-secondary-channel: #5E65D3;\n\t\t\t--pitch7-primary-channel: #8990FE;\n\t\t\t--pitch7-secondary-note: #5E65D3;\n\t\t\t--pitch7-primary-note: #8990FE;\n\t\t\t--pitch8-secondary-channel: #3138A6;\n\t\t\t--pitch8-primary-channel: #5E65D3;\n\t\t\t--pitch8-secondary-note: #3138A6;\n\t\t\t--pitch8-primary-note: #5E65D3;\n\t\t\t--pitch9-secondary-channel: #1B0B7F;\n\t\t\t--pitch9-primary-channel: #3138A6;\n\t\t\t--pitch9-secondary-note: #1B0B7F;\n\t\t\t--pitch9-primary-note: #3138A6;\n\t\t\t--pitch10-secondary-channel: #13015D;\n\t\t\t--pitch10-primary-channel: #1c02bd;\n\t\t\t--pitch10-secondary-note: #13015D;\n\t\t\t--pitch10-primary-note: #1c02bd;\n\t\t\t--noise1-secondary-channel: #A675FE;\n\t\t\t--noise1-primary-channel: #E2C9FF;\n\t\t\t--noise1-secondary-note: #A675FE;\n\t\t\t--noise1-primary-note: #E2C9FF;\n\t\t\t--noise2-secondary-channel: #6A31CA;\n\t\t\t--noise2-primary-channel: #A675FE;\n\t\t\t--noise2-secondary-note: #6A31CA;\n\t\t\t--noise2-primary-note: #A675FE;\n\t\t\t--noise3-secondary-channel: #5A1991;\n\t\t\t--noise3-primary-channel: #6A31CA;\n\t\t\t--noise3-secondary-note: #5A1991;\n\t\t\t--noise3-primary-note: #6A31CA;\n\t\t\t--noise4-secondary-channel: #2f1a68;\n\t\t\t--noise4-primary-channel: #5A1991;\n\t\t\t--noise4-secondary-note: #2f1a68;\n\t\t\t--noise4-primary-note: #5A1991;\n\t\t\t--noise5-secondary-channel: #211640;\n\t\t\t--noise5-primary-channel: #391b8d;\n\t\t\t--noise5-secondary-note: #211640;\n\t\t\t--noise5-primary-note: #391b8d;\n\t\t\t--mod1-secondary-channel: #25E2CD;\n\t\t\t--mod1-primary-channel: #BDFFCA;\n\t\t\t--mod1-secondary-note: #25E2CD;\n\t\t\t--mod1-primary-note: #BDFFCA;\n\t\t\t--mod2-secondary-channel: #0A98AC;\n\t\t\t--mod2-primary-channel: #25E2CD;\n\t\t\t--mod2-secondary-note: #0A98AC;\n\t\t\t--mod2-primary-note: #25E2CC;\n\t\t\t--mod3-secondary-channel: #005280;\n\t\t\t--mod3-primary-channel: #0A98AC;\n\t\t\t--mod3-secondary-note: #005280;\n\t\t\t--mod3-primary-note: #0A98AC;\n\t\t\t--mod4-secondary-channel: #0f3670;\n\t\t\t--mod4-primary-channel: #1369c1;\n\t\t\t--mod4-secondary-note: #0f3670;\n\t\t\t--mod4-primary-note: #1369c1;\n\t\t\t--mod-label-primary: #191d26;\n\t\t\t--mod-label-secondary-text: #024aca;\n\t\t\t--mod-label-primary-text: #ffffffa6;\n\t\t\t--disabled-note-primary: #c9c9c9;\n\t\t\t--disabled-note-secondary: #616161;\n\t}",
        slushie: "\n\t:root {\n\t\t--page-margin: #040814;\n\t\t--editor-background: #040814;\n\t\t--hover-preview: #c6f7ff;\n\t\t--primary-text: #d3f3ff;\n\t\t--secondary-text: #6f72b5;\n\t\t--inverted-text: black;\n\t\t--box-selection-fill: rgb(43 70 171 / 62%);\n\t\t--loop-accent: #573ebb;\n\t\t--ui-widget-background: #2e2f44;\n\t\t--ui-widget-focus: #2b2c46;\n\t\t--pitch-background: #353654;\n\t\t--tonic: #716fe3;\n\t\t--fifth-note: #76469b;\n\t\t--white-piano-key: #abbce3;\n\t\t--black-piano-key: #2f235e;\n\t\t--track-editor-bg-pitch: #3a3b5c;\n\t\t--track-editor-bg-pitch-dim: #1f2036;\n\t\t--track-editor-bg-noise: #3c3554;\n\t\t--track-editor-bg-noise-dim: #1e1834;\n\t\t--track-editor-bg-mod: #30335e;\n\t\t--track-editor-bg-mod-dim: #161938;\n\t\t--multiplicative-mod-slider: #e29cff;\n\t\t--overwriting-mod-slider: #495789;\n\t\t--indicator-primary: #e1a6ff;\n\t\t--indicator-secondary: #415187;\n\t\t--select2-opt-group: #22223a;\n\t\t--input-box-outline: #2d2648;\n\t\t--mute-button-normal: #7aceff;\n\t\t--pitch1-secondary-channel: #5f3ea5;\n\t\t--pitch1-primary-channel: #c1a4ff;\n\t\t--pitch1-secondary-note: #794fd3;\n\t\t--pitch1-primary-note: #d8c6ff;\n\t\t--pitch2-secondary-channel: #4f44bf;\n\t\t--pitch2-primary-channel: #9287ff;\n\t\t--pitch2-secondary-note: #5e51d9;\n\t\t--pitch2-primary-note: #b6afff;\n\t\t--pitch3-secondary-channel: #374eb9;\n\t\t--pitch3-primary-channel: #8097ff;\n\t\t--pitch3-secondary-note: #445cc9;\n\t\t--pitch3-primary-note: #a0b2ff;\n\t\t--pitch4-secondary-channel: #2867cf;\n\t\t--pitch4-primary-channel: #6fa5ff;\n\t\t--pitch4-secondary-note: #2e6ed7;\n\t\t--pitch4-primary-note: #a6c7ff;\n\t\t--pitch5-secondary-channel: #3175a7;\n\t\t--pitch5-primary-channel: #7ec9ff;\n\t\t--pitch5-secondary-note: #367eb3;\n\t\t--pitch5-primary-note: #9fd7ff;\n\t\t--pitch6-secondary-channel: #3993a9;\n\t\t--pitch6-primary-channel: #8ce9ff;\n\t\t--pitch6-secondary-note: #386da3;\n\t\t--pitch6-primary-note: #9eecff;\n\t\t--pitch7-secondary-channel: #369d8a;\n\t\t--pitch7-primary-channel: #8bfce7;\n\t\t--pitch7-secondary-note: #1c93a7;\n\t\t--pitch7-primary-note: #abffef;\n\t\t--pitch8-secondary-channel: #00A170;\n\t\t--pitch8-primary-channel: #50FFC9;\n\t\t--pitch8-secondary-note: #00C78A;\n\t\t--pitch8-primary-note: #83FFD9;\n\t\t--pitch9-secondary-channel: #49b374;\n\t\t--pitch9-primary-channel: #8affa9;\n\t\t--pitch9-secondary-note: #26815f;\n\t\t--pitch9-primary-note: #c8ffde;\n\t\t--pitch10-secondary-channel: #58a747;\n\t\t--pitch10-primary-channel: #bbffaa;\n\t\t--pitch10-secondary-note: #1d7c48;\n\t\t--pitch10-primary-note: #c7ffbc;\n\t\t--noise1-secondary-channel: #42829b;\n\t\t--noise1-primary-channel: #97d3fc;\n\t\t--noise1-secondary-note: #3f53b3;\n\t\t--noise1-primary-note: #97d3fc;\n\t\t--noise2-secondary-channel: #6354bb;\n\t\t--noise2-primary-channel: #9a89ff;\n\t\t--noise2-secondary-note: #5f4dcd;\n\t\t--noise2-primary-note: #c6bcff;\n\t\t--noise3-secondary-channel: #704a95;\n\t\t--noise3-primary-channel: #c285ff;\n\t\t--noise3-secondary-note: #ad5aff;\n\t\t--noise3-primary-note: #d3a6ff;\n\t\t--noise4-secondary-channel: #a53c65;\n\t\t--noise4-primary-channel: #f794bb;\n\t\t--noise4-secondary-note: #cb5080;\n\t\t--noise4-primary-note: #f794bb;\n\t\t--noise5-secondary-channel: #9b2d2d;\n\t\t--noise5-primary-channel: #ff7676;\n\t\t--noise5-secondary-note: #cb4444;\n\t\t--noise5-primary-note: #ff9999;\n\t\t--mod1-secondary-channel: #b7613c;\n\t\t--mod1-primary-channel: #ff9f76;\n\t\t--mod1-secondary-note: #e77e52;\n\t\t--mod1-primary-note: #ffb99b;\n\t\t--mod2-secondary-channel: #916d34;\n\t\t--mod2-primary-channel: #fece80;\n\t\t--mod2-secondary-note: #c58b35;\n\t\t--mod2-primary-note: #ffdda5;\n\t\t--mod3-secondary-channel: #83761a;\n\t\t--mod3-primary-channel: #fdf68c;\n\t\t--mod3-secondary-note: #c18e00;\n\t\t--mod3-primary-note: #fdf68c;\n\t\t--mod4-secondary-channel: #a86436;\n\t\t--mod4-primary-channel: #c8a825;\n\t\t--mod4-secondary-note: #e8ba46;\n\t\t--mod4-primary-note: #c8a825;\n\t\t--mod-label-primary: #37325e;\n\t\t--mod-label-secondary-text: #6e8aa7;\n\t\t--mod-label-primary-text: #c1ffff;\n}",
        "ultrabox dark": "\n:root {\n/*--mod-title: #CCCCCC;*/\n--loop-accent: #CCCCCC;\n--playhead: #CCCCCC;\n/*--primary-text: #CCCCCC;\n--hover-preview: #CCCCCC;*/\n--link-accent: #FF8EC5;\n--indicator-primary: #FF8EC5;\n/*--indicator-primary: #CCCCCC;*/\n/*--indicator-secondary: #E856B2;*/\n--white-piano-key: #CCCCCC;\n/*--black-piano-key: #444;*/\n--text-selection: #932253;\n--oscilloscope-line-L: #CCCCCC;\n--oscilloscope-line-R: #932253;\n--pitch-channel-limit: 8;\n--pitch1-secondary-channel: #A83030;\n--pitch1-primary-channel:   #FF7C7C;\n--pitch1-secondary-note:    #B51532;\n--pitch1-primary-note:      #FFA3A3;\n\n--pitch2-secondary-channel: #C75000;\n--pitch2-primary-channel:   #FF9752;\n--pitch2-secondary-note:    #FF771C;\n--pitch2-primary-note:      #FFCDAB;\n\n--pitch3-secondary-channel: #A1A100;\n--pitch3-primary-channel: #FFFF25;\n--pitch3-secondary-note: #C7C700;\n--pitch3-primary-note: #FFFF92;\n\n--pitch4-secondary-channel: #139620;\n--pitch4-primary-channel:   #25ff3a;\n--pitch4-secondary-note:    #21FF33;\n--pitch4-primary-note:      #C0FFB5;\n\n--pitch5-secondary-channel: #0099A1;\n--pitch5-primary-channel:   #25F3FF;\n--pitch5-secondary-note:    #00BDC7;\n--pitch5-primary-note:      #92F9FF;\n\n--pitch6-secondary-channel: #58599E;\n--pitch6-primary-channel:   #5EA3FF;\n--pitch6-secondary-note:    #183AC7;\n--pitch6-primary-note:      #9EC8FF;\n\n--pitch7-secondary-channel: #6038a5;\n--pitch7-primary-channel:   #C760FF;\n--pitch7-secondary-note:    #5433A0;\n--pitch7-primary-note:      #D99EFF;\n\n--pitch8-secondary-channel: #932253;\n--pitch8-primary-channel:   #FF60A5;\n--pitch8-secondary-note:    #8E1C4E;\n--pitch8-primary-note:      #FF8EC5;\n\n/*--track-editor-bg-mod: #632D45;\n--track-editor-bg-mod-dim: #3F1D2C;*/\n}",
        "modbox classic": "\n\t\t\t:root {\n\t\t\t\t--loop-accent: #9900cc;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 4;\n\t\t\t\t--pitch1-secondary-note:    #0099a1;\n\t\t\t\t--pitch1-primary-note:      #25f3ff;\n\t\t\t\t--pitch2-secondary-channel: #439143;\n\t\t\t\t--pitch2-primary-channel:   #44ff44;\n\t\t\t\t--pitch2-secondary-note:    #439143;\n\t\t\t\t--pitch2-primary-note:      #44ff44;\n\t\t\t\t--pitch3-secondary-channel: #a1a100;\n\t\t\t\t--pitch3-primary-channel:   #ffff25;\n\t\t\t\t--pitch3-secondary-note:    #a1a100;\n\t\t\t\t--pitch3-primary-note:      #ffff25;\n\t\t\t\t--pitch4-secondary-channel: #c75000;\n\t\t\t\t--pitch4-primary-channel:   #ff9752;\n\t\t\t\t--pitch4-secondary-note:    #c75000;\n\t\t\t\t--pitch4-primary-note:      #ff9752;\n\t\t\t\t--pitch5-secondary-note:    #d020d0;\n\t\t\t\t--pitch5-primary-note:      #ff90ff;\n\t\t\t\t--pitch6-secondary-channel: #552377;\n\t\t\t\t--pitch6-primary-channel:   #9f31ea;\n\t\t\t\t--pitch6-secondary-note:    #552377;\n\t\t\t\t--pitch6-primary-note:      #9f31ea;\n\t\t\t\t--pitch7-secondary-channel: #221b89;\n\t\t\t\t--pitch7-primary-channel:   #2b6aff;\n\t\t\t\t--pitch7-secondary-note:    #221b89;\n\t\t\t\t--pitch7-primary-note:      #2b6aff;\n\t\t\t\t--pitch8-secondary-channel: #00995f;\n\t\t\t\t--pitch8-primary-channel:   #00ff9f;\n\t\t\t\t--pitch8-secondary-note:    #00995f;\n\t\t\t\t--pitch8-primary-note:      #00ff9f;\n\t\t\t\t--pitch9-secondary-channel: #d6b03e;\n\t\t\t\t--pitch9-primary-channel:   #ffbf00;\n\t\t\t\t--pitch9-secondary-note:    #d6b03e;\n\t\t\t\t--pitch9-primary-note:      #ffbf00;\n\t\t\t\t--pitch10-secondary-channel:#b25915;\n\t\t\t\t--pitch10-primary-channel:  #d85d00;\n\t\t\t\t--pitch10-secondary-note:   #b25915;\n\t\t\t\t--pitch10-primary-note:     #d85d00;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t--noise1-primary-channel:   #ff1616;\n\t\t\t\t--noise1-secondary-note:    #991010;\n\t\t\t\t--noise1-primary-note:      #ff1616;\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\n\t\t\t\t--noise2-primary-channel:   #ffffff;\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\n\t\t\t\t--noise2-primary-note:      #ffffff;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768dfc;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768dfc;\n\t\t\t\t--noise4-secondary-channel: #7c9b42;\n\t\t\t\t--noise4-primary-channel:   #a5ff00;\n\t\t\t\t--noise4-secondary-note:    #7c9b42;\n\t\t\t\t--noise4-primary-note:      #a5ff00;\n\t\t\t\t--noise5-secondary-channel: #7c9b42;\n         --mod1-secondary-channel: #0099a1;\n\t\t\t\t--mod1-primary-channel:   #25f3ff;\n\t\t\t\t--mod1-secondary-note:    #0099a1;\n\t\t\t\t--mod1-primary-note:      #25f3ff;\n\t\t\t\t--mod2-secondary-channel: #439143;\n\t\t\t\t--mod2-primary-channel:   #44ff44;\n\t\t\t\t--mod2-secondary-note:    #439143;\n\t\t\t\t--mod2-primary-note:      #44ff44;\n\t\t\t\t--mod3-secondary-channel: #a1a100;\n\t\t\t\t--mod3-primary-channel:   #ffff25;\n\t\t\t\t--mod3-secondary-note:    #a1a100;\n\t\t\t\t--mod3-primary-note:      #ffff25;\n\t\t\t\t--mod4-secondary-channel: #c75000;\n\t\t\t\t--mod4-primary-channel:   #ff9752;\n\t\t\t\t--mod4-secondary-note:    #c75000;\n\t\t\t\t--mod4-primary-note:      #ff9752;\n\t\t\t\t\t--text-disabled-icon: ✗ ;\n\t\t\t\t}\n\t\t\t",
        zefbox: "\n\t\t\t:root {\n\t\t\t\t--loop-accent: #C3593D;\n\t\t\t\t--pitch1-secondary-channel: #06c400;\n\t\t\t\t--pitch1-primary-channel:   #08ff00;\n\t\t\t\t--pitch1-secondary-note:    #06c400;\n\t\t\t\t--pitch1-primary-note:      #06e000;\n\t\t\t\t--pitch2-secondary-channel: #00bf97;\n\t\t\t\t--pitch2-primary-channel:   #00ffcb;\n\t\t\t\t--pitch2-secondary-note:    #00bf97;\n\t\t\t\t--pitch2-primary-note:      #00edbc;\n\t\t\t\t--pitch3-secondary-channel: #b5b000;\n\t\t\t\t--pitch3-primary-channel:   #fffa00;\n\t\t\t\t--pitch3-secondary-note:    #b5b000;\n\t\t\t\t--pitch3-primary-note:      #e0db00;\n\t\t\t\t--pitch4-secondary-channel: #c90000;\n\t\t\t\t--pitch4-primary-channel:   #e20000;\n\t\t\t\t--pitch4-secondary-note:    #c90000;\n\t\t\t\t--pitch4-primary-note:      #e20000;\n\t\t\t\t--pitch5-secondary-channel: #d17d12;\n\t\t\t\t--pitch5-primary-channel:   #ff9e21;\n\t\t\t\t--pitch5-secondary-note:    #d17d12;\n\t\t\t\t--pitch5-primary-note:      #ef9017;\n\t\t\t\t--pitch6-secondary-channel: #d35bc8;\n\t\t\t\t--pitch6-primary-channel:   #ffa5f7;\n\t\t\t\t--pitch6-secondary-note:    #d35bc8;\n\t\t\t\t--pitch6-primary-note:      #fc64ee;\n\t\t\t\t--pitch7-secondary-channel: #D00000;\n\t\t\t\t--pitch7-primary-channel:   #FF4444;\n\t\t\t\t--pitch7-secondary-note:    #D00000;\n\t\t\t\t--pitch7-primary-note:      #FF4444;\n\t\t\t\t--pitch8-secondary-channel: #00C700;\n\t\t\t\t--pitch8-primary-channel:   #A0FFA0;\n\t\t\t\t--pitch8-secondary-note:    #00C700;\n\t\t\t\t--pitch8-primary-note:      #A0FFA0;\n\t\t\t\t--pitch9-secondary-channel: #A88981;\n\t\t\t\t--pitch9-primary-channel:   #F1C3B7;\n\t\t\t\t--pitch9-secondary-note:    #A88981;\n\t\t\t\t--pitch9-primary-note:      #F1C3B7;\n\t\t\t\t--pitch10-secondary-channel:#0C0A99;\n\t\t\t\t--pitch10-primary-channel:  #0000EE;\n\t\t\t\t--pitch10-secondary-note:   #0C0A99;\n\t\t\t\t--pitch10-primary-note:     #0000EE;\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\n\t\t\t\t--noise2-secondary-channel: #A18F51;\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\n\t\t\t\t--noise2-secondary-note:    #A18F51;\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768DFC;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768DFC;\n\t\t\t\t--noise4-secondary-channel: #8888D0;\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\n\t\t\t\t--noise4-secondary-note:    #8888D0;\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\n\t\t\t\t--noise5-secondary-channel: #B7148E;\n\t\t\t\t--noise5-primary-channel:   #E819B4;\n\t\t\t\t--noise5-secondary-note:    #B7148E;\n\t\t\t\t--noise5-primary-note:      #E819B4;\n       --mod1-secondary-channel: #06c400;\n\t\t\t\t--mod1-primary-channel:   #08ff00;\n\t\t\t\t--mod1-secondary-note:    #06c400;\n\t\t\t\t--mod1-primary-note:      #06e000;\n\t\t\t\t--mod2-secondary-channel: #00bf97;\n\t\t\t\t--mod2-primary-channel:   #00ffcb;\n\t\t\t\t--mod2-secondary-note:    #00bf97;\n\t\t\t\t--mod2-primary-note:      #00edbc;\n\t\t\t\t--mod3-secondary-channel: #b5b000;\n\t\t\t\t--mod3-primary-channel:   #fffa00;\n\t\t\t\t--mod3-secondary-note:    #b5b000;\n\t\t\t\t--mod3-primary-note:      #e0db00;\n\t\t\t\t--mod4-secondary-channel: #c90000;\n\t\t\t\t--mod4-primary-channel:   #e20000;\n\t\t\t\t--mod4-secondary-note:    #c90000;\n\t\t\t\t--mod4-primary-note:      #e20000;\n\t\t\t\t}\n\t\t\t",
        "sandbox classic": "\n\t\t\t:root {\n\t\t\t\t--loop-accent: #198195;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 4;\n\t\t\t\t--pitch1-secondary-channel: #539999;\n\t\t\t\t--pitch1-primary-channel:   #5EB1B1;\n\t\t\t\t--pitch1-secondary-note:    #539999;\n\t\t\t\t--pitch1-primary-note:      #5EB1B1;\n\t\t\t\t--pitch2-secondary-channel: #95933C;\n\t\t\t\t--pitch2-primary-channel:   #B0AD44;\n\t\t\t\t--pitch2-secondary-note:    #95933C;\n\t\t\t\t--pitch2-primary-note:      #B0AD44;\n\t\t\t\t--pitch3-secondary-channel: #E75566;\n\t\t\t\t--pitch3-primary-channel:   #FF9AA6;\n\t\t\t\t--pitch3-secondary-note:    #E75566;\n\t\t\t\t--pitch3-primary-note:      #FF9AA6;\n\t\t\t\t--pitch4-secondary-channel: #8B4343;\n\t\t\t\t--pitch4-primary-channel:   #FF8844;\n\t\t\t\t--pitch4-secondary-note:    #8B4343;\n\t\t\t\t--pitch4-primary-note:      #FF8844;\n\t\t\t\t--pitch5-secondary-channel: #888888;\n\t\t\t\t--pitch5-primary-channel:   #BBBBBB;\n\t\t\t\t--pitch5-secondary-note:    #888888;\n\t\t\t\t--pitch5-primary-note:      #BBBBBB;\n\t\t\t\t--pitch6-secondary-channel: #BB6906;\n\t\t\t\t--pitch6-primary-channel:   #FE8D00;\n\t\t\t\t--pitch6-secondary-note:    #BB6906;\n\t\t\t\t--pitch6-primary-note:      #FE8D00;\n\t\t\t\t--pitch7-secondary-channel: #539999;\n\t\t\t\t--pitch7-primary-channel:   #5EB1B1;\n\t\t\t\t--pitch7-secondary-note:    #539999;\n\t\t\t\t--pitch7-primary-note:      #5EB1B1;\n\t\t\t\t--pitch8-secondary-channel: #95933C;\n\t\t\t\t--pitch8-primary-channel:   #B0AD44;\n\t\t\t\t--pitch8-secondary-note:    #95933C;\n\t\t\t\t--pitch8-primary-note:      #B0AD44;\n\t\t\t\t--pitch9-secondary-channel: #E75566;\n\t\t\t\t--pitch9-primary-channel:   #FF9AA6;\n\t\t\t\t--pitch9-secondary-note:    #E75566;\n\t\t\t\t--pitch9-primary-note:      #FF9AA6;\n\t\t\t\t--pitch10-secondary-channel: #8B4343;\n\t\t\t\t--pitch10-primary-channel:   #FF8844;\n\t\t\t\t--pitch10-secondary-note:    #8B4343;\n\t\t\t\t--pitch10-primary-note:      #FF8844;\t\t\t\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\n\t\t\t\t--noise2-secondary-channel: #A18F51;\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\n\t\t\t\t--noise2-secondary-note:    #A18F51;\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768DFC;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768DFC;\n\t\t\t\t--noise4-secondary-channel: #8888D0;\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\n\t\t\t\t--noise4-secondary-note:    #8888D0;\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\n\t\t\t\t--noise5-secondary-channel: #A18F51;\n\t\t\t\t--noise5-primary-channel:   #F6BB6A;\n\t\t\t\t--noise5-secondary-note:    #A18F51;\n\t\t\t\t--noise5-primary-note:      #F6BB6A;\t\t\t\n         \t--mod1-secondary-channel: #539999;\n\t\t\t\t--mod1-primary-channel:   #5EB1B1;\n\t\t\t\t--mod1-secondary-note:    #539999;\n\t\t\t\t--mod1-primary-note:      #5EB1B1;\n\t\t\t\t--mod2-secondary-channel: #95933C;\n\t\t\t\t--mod2-primary-channel:   #B0AD44;\n\t\t\t\t--mod2-secondary-note:    #95933C;\n\t\t\t\t--mod2-primary-note:      #B0AD44;\n\t\t\t\t--mod3-secondary-channel: #E75566;\n\t\t\t\t--mod3-primary-channel:   #FF9AA6;\n\t\t\t\t--mod3-secondary-note:    #E75566;\n\t\t\t\t--mod3-primary-note:      #FF9AA6;\n\t\t\t\t--mod4-secondary-channel: #8B4343;\n\t\t\t\t--mod4-primary-channel:   #FF8844;\n\t\t\t\t--mod4-secondary-note:    #8B4343;\n\t\t\t\t--mod4-primary-note:      #FF8844;\n\t\t\t\t}\n\t\t\t",
        harrybox: "\n\t\t\t:root {\n\t\t\t\t--loop-accent: #9900cc;\n\t\t\t\t\t--noise-channel-limit: 2;\n\t\t\t\t--pitch1-secondary-channel: #00ffff;\n\t\t\t\t--pitch1-primary-channel:   #00ffff;\n\t\t\t\t--pitch1-secondary-note:    #00ffff;\n\t\t\t\t--pitch1-primary-note:      #00ffff;\n\t\t\t\t--pitch2-secondary-channel: #00d8d8;\n\t\t\t\t--pitch2-primary-channel:   #00d8d8;\n\t\t\t\t--pitch2-secondary-note:    #00d8d8;\n\t\t\t\t--pitch2-primary-note:      #00d8d8;\n\t\t\t\t--pitch3-secondary-channel: #00adad;\n\t\t\t\t--pitch3-primary-channel:   #00adad;\n\t\t\t\t--pitch3-secondary-note:    #00adad;\n\t\t\t\t--pitch3-primary-note:      #00adad;\n\t\t\t\t-pitch4-secondary-channel: #008c8c;\n\t\t\t\t--pitch4-primary-channel:   #008c8c;\n\t\t\t\t--pitch4-secondary-note:    #008c8c;\n\t\t\t\t--pitch4-primary-note:      #008c8c;\n\t\t\t\t--pitch5-secondary-channel: #005b5b;\n\t\t\t\t--pitch5-primary-channel:   #005b5b;\n\t\t\t\t--pitch5-secondary-note:    #005b5b;\n\t\t\t\t--pitch5-primary-note:      #005b5b;\n\t\t\t\t--pitch6-secondary-channel: #003333;\n\t\t\t\t--pitch6-primary-channel:   #003333;\n\t\t\t\t--pitch6-secondary-note:    #003333;\n\t\t\t\t--pitch6-primary-note:      #003333;\n\t\t\t\t--pitch7-secondary-channel: #00ffff;\n\t\t\t\t--pitch7-primary-channel:   #00ffff;\n\t\t\t\t--pitch7-secondary-note:    #00ffff;\n\t\t\t\t--pitch7-primary-note:      #00ffff;\n\t\t\t\t--pitch8-secondary-channel: #00ffff;\n\t\t\t\t--pitch8-primary-channel:   #00ffff;\n\t\t\t\t--pitch8-secondary-note:    #00ffff;\n\t\t\t\t--pitch8-primary-note:      #00ffff;\n\t\t\t\t--pitch9-secondary-channel: #00ffff;\n\t\t\t\t--pitch9-primary-channel:   #00ffff;\n\t\t\t\t--pitch9-secondary-note:    #00ffff;\n\t\t\t\t--pitch9-primary-note:      #00ffff;\n\t\t\t\t--pitch10-secondary-channel:#00ffff;\n\t\t\t\t--pitch10-primary-channel:  #00ffff;\n\t\t\t\t--pitch10-secondary-note:   #00ffff;\n\t\t\t\t--pitch10-primary-note:     #00ffff;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t--noise1-primary-channel:   #ff1616;\n\t\t\t\t--noise1-secondary-note:    #991010;\n\t\t\t\t--noise1-primary-note:      #ff1616;\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\n\t\t\t\t--noise2-primary-channel:   #ffffff;\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\n\t\t\t\t--noise2-primary-note:      #ffffff;\n\t\t\t\t--noise3-secondary-channel: #991010;\n\t\t\t\t--noise3-primary-channel:   #ff1616;\n\t\t\t\t--noise3-secondary-note:    #991010;\n\t\t\t\t--noise3-primary-note:      #ff1616;\n\t\t\t\t--noise4-secondary-channel: #aaaaaa;\n\t\t\t\t--noise4-primary-channel:   #ffffff;\n\t\t\t\t--noise4-secondary-note:    #aaaaaa;\n\t\t\t\t--noise4-primary-note:      #ffffff;\n\t\t\t\t--noise5-secondary-channel: #991010;\n\t\t\t\t--noise5-primary-channel:   #ff1616;\n\t\t\t\t--noise5-secondary-note:    #991010;\n\t\t\t\t--noise5-primary-note:      #ff1616;\n         \t--mod1-secondary-channel: #00ffff;\n\t\t\t\t--mod1-primary-channel:   #00ffff;\n\t\t\t\t--mod1-secondary-note:    #00ffff;\n\t\t\t\t--mod1-primary-note:      #00ffff;\n\t\t\t\t--mod2-secondary-channel: #00d8d8;\n\t\t\t\t--mod2-primary-channel:   #00d8d8;\n\t\t\t\t--mod2-secondary-note:    #00d8d8;\n\t\t\t\t--mod2-primary-note:      #00d8d8;\n\t\t\t\t--mod3-secondary-channel: #00adad;\n\t\t\t\t--mod3-primary-channel:   #00adad;\n\t\t\t\t--mod3-secondary-note:    #00adad;\n\t\t\t\t--mod3-primary-note:      #00adad;\n\t\t\t\t-mod4-secondary-channel: #008c8c;\n\t\t\t\t--mod4-primary-channel:   #008c8c;\n\t\t\t\t--mod4-secondary-note:    #008c8c;\n\t\t\t\t--mod4-primary-note:      #008c8c;\n\t\t\t\t}\n\t\t\t",
        brucebox: "\n\t\t:root {\n\t\t\t\tfont: 16px/2 cursive;\n\t\t\t\t--page-margin: #4667CE;\n\t\t\t\t--editor-background: #4667CE;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #444;\n\t\t\t\t\t--pitch-channel-limit: 3;\n\t\t\t\t\t--noise-channel-limit: 1;\n\t\t\t\t--pitch1-secondary-channel: #bda822;\n\t\t\t\t--pitch1-primary-channel:   #fcdb00;\n\t\t\t\t--pitch1-secondary-note:    #bda822;\n\t\t\t\t--pitch1-primary-note:      #fcdb00;\n\t\t\t\t--pitch2-secondary-channel: #612278;\n\t\t\t\t--pitch2-primary-channel:   #bb00ff;\n\t\t\t\t--pitch2-secondary-note:    #612278;\n\t\t\t\t--pitch2-primary-note:      #bb00ff;\n\t\t\t\t--pitch3-secondary-channel: #8b4343;\n\t\t\t\t--pitch3-primary-channel:   #ff8844;\n\t\t\t\t--pitch3-secondary-note:    #8b4343;\n\t\t\t\t--pitch3-primary-note:      #ff8844;\n\t\t\t\t--pitch4-secondary-channel: #bda822;\n\t\t\t\t--pitch4-primary-channel:   #fcdb00;\n\t\t\t\t--pitch4-secondary-note:    #bda822;\n\t\t\t\t--pitch4-primary-note:      #fcdb00;\n\t\t\t\t--pitch5-secondary-channel: #612278;\n\t\t\t\t--pitch5-primary-channel:   #bb00ff;\n\t\t\t\t--pitch5-secondary-note:    #612278;\n\t\t\t\t--pitch5-primary-note:      #bb00ff;\n\t\t\t\t--pitch6-secondary-channel: #8b4343;\n\t\t\t\t--pitch6-primary-channel:   #ff8844;\n\t\t\t\t--pitch6-secondary-note:    #8b4343;\n\t\t\t\t--pitch6-primary-note:      #ff8844;\n\t\t\t\t--pitch7-secondary-channel: #bda822;\n\t\t\t\t--pitch7-primary-channel:   #fcdb00;\n\t\t\t\t--pitch7-secondary-note:    #bda822;\n\t\t\t\t--pitch7-primary-note:      #fcdb00;\n\t\t\t\t--pitch8-secondary-channel: #612278;\n\t\t\t\t--pitch8-primary-channel:   #bb00ff;\n\t\t\t\t--pitch8-secondary-note:    #612278;\n\t\t\t\t--pitch8-primary-note:      #bb00ff;\n\t\t\t\t--pitch9-secondary-channel: #8b4343;\n\t\t\t\t--pitch9-primary-channel:   #ff8844;\n\t\t\t\t--pitch9-secondary-note:    #8b4343;\n\t\t\t\t--pitch9-primary-note:      #ff8844;\n\t\t\t\t--pitch10-secondary-channel: #bda822;\n\t\t\t\t--pitch10-primary-channel:   #fcdb00;\n\t\t\t\t--pitch10-secondary-note:    #bda822;\n\t\t\t\t--pitch10-primary-note:      #fcdb00;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t}\n\n\t\t\t\t.trackContainer .noSelection {\n\t\t\t\tbackground: black !important;\n\t\t\t\t}\n\n\t\t\t\tspan input, \n\t\t\t\tdiv.harmonics svg,\n\t\t\t\tdiv.spectrum svg,\n\t\t\t\tdiv.filterEditor svg,\n\t\t\t\tdiv.fadeInOut svg,\n\t\t\t\tdiv.loopEditor svg,\n\t\t\t\tsvg#firstImage,\n\t\t\t\tdiv.trackContainer div.noSelection\n\t\t\t\t{\n\t\t\t\t\tbackground: black !important;\n\t\t\t\t}\n\n\t\t\t\tinput, textarea {\n\t\t\t\t\tbackground-color: black !important;\n\t\t\t\t}\n\n\t\t\t\t#text-content > section > h1 {\n\t\t\t\t\tcolor: white;\n\t\t\t\t}\n\n\t\t\t",
        "shitbox 2.0": "\n\t\t\t:root {\n\t\t\t--page-margin: maroon;\n\t\t\t\t\t--playhead: firebrick;\n\t\t\t\t\t--primary-text: silver;\n\t\t\t\t--text-selection: rgba(139,69,19,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(220,20,60,0.2);\n\t\t\t\t\t--loop-accent: #841;\n\t\t\t\t\t--link-accent: #841;\n\t\t\t\t\t--ui-widget-background: #800;\n\t\t\t\t\t--ui-widget-focus: #a00;\n\t\t\t\t\t--pitch-background: #700;\n\t\t\t\t\t--tonic: #522;\n\t\t\t\t\t--fifth-note: #f75;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #7e4a35;\n\t\t\t\t\t--pitch1-primary-channel:   #c27251;\n\t\t\t\t\t--pitch1-secondary-note:    #7e4a35;\n\t\t\t\t\t--pitch1-primary-note:      #f09571;\n\t\t\t\t\t--pitch2-secondary-channel: #998a5c;\n\t\t\t\t\t--pitch2-primary-channel:   #d9c27c;\n\t\t\t\t\t--pitch2-secondary-note:    #998a5c;\n\t\t\t\t\t--pitch2-primary-note:      #fae196;\n\t\t\t\t\t--pitch3-secondary-channel: #9c927c;\n\t\t\t\t\t--pitch3-primary-channel:   #dbceb0;\n\t\t\t\t\t--pitch3-secondary-note:    #9c927c;\n\t\t\t\t\t--pitch3-primary-note:      #eddebb;\n\t\t\t\t\t--pitch4-secondary-channel: #838060;\n\t\t\t\t\t--pitch4-primary-channel:   #ccc795;\n\t\t\t\t\t--pitch4-secondary-note:    #838060;\n\t\t\t\t\t--pitch4-primary-note:      #f2ecb1;\n\t\t\t\t\t--pitch5-secondary-channel: #8b6f47;\n\t\t\t\t\t--pitch5-primary-channel:   #d1a76b;\n\t\t\t\t\t--pitch5-secondary-note:    #8b6f47;\n\t\t\t\t\t--pitch5-primary-note:      #ffcc82;\n\t\t\t\t\t--pitch6-secondary-channel: #a96e5b;\n\t\t\t\t\t--pitch6-primary-channel:   #e3967d;\n\t\t\t\t\t--pitch6-secondary-note:    #a96e5b;\n\t\t\t\t\t--pitch6-primary-note:      #ffa68a;\n\t\t\t\t\t\t--pitch7-secondary-channel: #7e4a35;\n\t\t\t\t\t--pitch7-primary-channel:   #c27251;\n\t\t\t\t\t--pitch7-secondary-note:    #7e4a35;\n\t\t\t\t\t--pitch7-primary-note:      #f09571;\n\t\t\t\t\t--pitch8-secondary-channel: #998a5c;\n\t\t\t\t\t--pitch8-primary-channel:   #d9c27c;\n\t\t\t\t\t--pitch8-secondary-note:    #998a5c;\n\t\t\t\t\t--pitch8-primary-note:      #fae196;\n\t\t\t\t\t--pitch9-secondary-channel: #9c927c;\n\t\t\t\t\t--pitch9-primary-channel:   #dbceb0;\n\t\t\t\t\t--pitch9-secondary-note:    #9c927c;\n\t\t\t\t\t--pitch9-primary-note:      #eddebb;\n\t\t\t\t\t--pitch10-secondary-channel: #838060;\n\t\t\t\t\t--pitch10-primary-channel:   #ccc795;\n\t\t\t\t\t--pitch10-secondary-note:    #838060;\n\t\t\t\t\t--pitch10-primary-note:      #f2ecb1;\n\t\t\t\t\t--noise4-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise4-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise4-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise4-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise5-secondary-channel: #996633;\n\t\t\t\t\t--noise5-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise5-secondary-note:    #cc9966;\n\t\t\t\t\t--noise5-primary-note:      #f0d0bb;\n         --mod1-secondary-channel: #7e4a35;\n\t\t\t\t\t--mod1-primary-channel:   #c27251;\n\t\t\t\t\t--mod1-secondary-note:    #7e4a35;\n\t\t\t\t\t--mod1-primary-note:      #f09571;\n\t\t\t\t\t--mod2-secondary-channel: #998a5c;\n\t\t\t\t\t--mod2-primary-channel:   #d9c27c;\n\t\t\t\t\t--mod2-secondary-note:    #998a5c;\n\t\t\t\t\t--mod2-primary-note:      #fae196;\n\t\t\t\t\t--mod3-secondary-channel: #9c927c;\n\t\t\t\t\t--mod3-primary-channel:   #dbceb0;\n\t\t\t\t\t--mod3-secondary-note:    #9c927c;\n\t\t\t\t\t--mod3-primary-note:      #eddebb;\n\t\t\t\t\t--mod4-secondary-channel: #838060;\n\t\t\t\t\t--mod4-primary-channel:   #ccc795;\n\t\t\t\t\t--mod4-secondary-note:    #838060;\n\t\t\t\t\t--mod4-primary-note:      #f2ecb1;\n\t\t\t\t\t--note-flash: firebrick;\n  \t\t\t\t\t--note-flash-secondary: firebrick;\n\t\t\t\t}\n\t\t\t",
        "shitbox 3.0": '\n\t\t\t\n\t\t\t:root {\n\t\t\t\tfont: 20px/2 monospace;\n\t\t\t\t--page-margin: #252525;\n\t\t\t\t--editor-background: #252525;\n\t\t\t\t--primary-text: #C8C8C8;\n\t\t\t\t--link-accent: #945800;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #444;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--text-disabled-icon: ✗ ;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor input[type="range"]::-moz-range-thumb {\n\t\t\t\t\twidth: 8px !important;\n\t\t\t\t  }\n\n\t\t\t\tbutton.playButton {\n\t\t\t\t\twidth: 80px;\n\t\t\t\t}\n\t\t\t\tbutton.prevBarButton {\n\t\t\t\t\twidth: 40px;\n\t\t\t\t\tleft:-5px;\n\t\t\t\t}\n\t\t\t\tbutton.nextBarButton {\n\t\t\t\t\twidth: 40px;\n\t\t\t\t}\n\n\t\t\t\t.trackContainer .noSelection {\n\t\t\t\tbackground: black !important;\n\t\t\t\t}\n\n\t\t\t\tspan input, \n\t\t\t\tdiv.harmonics svg,\n\t\t\t\tdiv.spectrum svg,\n\t\t\t\tdiv.filterEditor svg,\n\t\t\t\tdiv.fadeInOut svg,\n\t\t\t\tdiv.loopEditor svg,\n\t\t\t\tsvg#firstImage \n\t\t\t\t{\n\t\t\t\t\tbackground: black !important;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor {\n\t\t\t\t\tline-height: 1.25;\n\t\t\t\t}\n\n\t\t\t\t#text-content {\n\t\t\t\t\tfont-size: 32px;\n\t\t\t\t\tline-height: 40px;\n\t\t\t\t}\n\n\t\t\t\t#text-content > section > h1 {\n\t\t\t\t\tcolor: #C8C8C8;\n\t\t\t\t\t}\n\t\t\t',
        nerdbox: "\n\t\t\t:root {\n\t\t\t\t\t--pitch-channel-limit: 9;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #139620;\n\t\t\t\t--pitch1-primary-channel:   #25ff3a;\n\t\t\t\t--pitch1-secondary-note:    #139620;\n\t\t\t\t--pitch1-primary-note:      #25ff3a;\n\t\t\t\t--pitch2-secondary-channel: #109986;\n\t\t\t\t--pitch2-primary-channel:   #1cffe0;\n\t\t\t\t--pitch2-secondary-note:    #109986;\n\t\t\t\t--pitch2-primary-note:      #1cffe0;\n\t\t\t\t--pitch3-secondary-channel: #127296;\n\t\t\t\t--pitch3-primary-channel:   #21c3ff;\n\t\t\t\t--pitch3-secondary-note:    #127296;\n\t\t\t\t--pitch3-primary-note:      #21c3ff;\n\t\t\t\t--pitch4-secondary-channel: #6038a5;\n\t\t\t\t--pitch4-primary-channel:   #9456ff;\n\t\t\t\t--pitch4-secondary-note:    #6038a5;\n\t\t\t\t--pitch4-primary-note:      #ff35e0;\n\t\t\t\t--pitch5-secondary-channel: #a52491;\n\t\t\t\t--pitch5-primary-channel:   #ff35e0;\n\t\t\t\t--pitch5-secondary-note:    #a52491;\n\t\t\t\t--pitch5-primary-note:      #af3221;\n\t\t\t\t--pitch6-secondary-channel: #af3221;\n\t\t\t\t--pitch6-primary-channel:   #ff4a32;\n\t\t\t\t--pitch6-secondary-note:    #af3221;\n\t\t\t\t--pitch6-primary-note:      #ff4a32;\n\t\t\t\t--pitch7-secondary-channel: #ad6e0f;\n\t\t\t\t--pitch7-primary-channel:   #ffa216;\n\t\t\t\t--pitch7-secondary-note:    #ad6e0f;\n\t\t\t\t--pitch7-primary-note:      #ffa216;\n\t\t\t\t--pitch8-secondary-channel: #ad6e0f;\n\t\t\t\t--pitch8-primary-channel:   #ffa216;\n\t\t\t\t--pitch8-secondary-note:    #ad6e0f;\n\t\t\t\t--pitch8-primary-note:      #ffa216;\n\t\t\t\t--pitch9-secondary-channel: #a7b512;\n\t\t\t\t--pitch9-primary-channel:   #ebff19;\n\t\t\t\t--pitch9-secondary-note:    #a7b512;\n\t\t\t\t--pitch9-primary-note:      #ebff19;\n\t\t\t\t--pitch10-secondary-channel:#70ad1b;\n\t\t\t\t--pitch10-primary-channel:  #a4ff26;\n\t\t\t\t--pitch10-secondary-note:   #70ad1b;\n\t\t\t\t--pitch10-primary-note:     #a4ff26;\n\t\t\t\t--noise1-secondary-channel: #68706f;\n\t\t\t\t--noise1-primary-channel:   #a6b2b1;\n\t\t\t\t--noise1-secondary-note:    #68706f;\n\t\t\t\t--noise1-primary-note:      #a6b2b1;\n\t\t\t\t--noise2-secondary-channel: #665c64;\n\t\t\t\t--noise2-primary-channel:   #a396a1;\n\t\t\t\t--noise2-secondary-note:    #665c64;\n\t\t\t\t--noise2-primary-note:      #a396a1;\n\t\t\t\t--noise3-secondary-channel: #60605a;\n\t\t\t\t--noise3-primary-channel:   #afaea3;\n\t\t\t\t--noise3-secondary-note:    #60605a;\n\t\t\t\t--noise3-primary-note:      #afaea3;\n\t\t\t--noise4-secondary-channel: #665c64;\n\t\t\t--noise4-primary-channel:   #a396a1;\n\t\t\t\t--noise4-secondary-note:    #665c64;\n\t\t\t\t--noise4-primary-note:      #a396a1;\n\t\t\t\t--noise5-secondary-channel: #60605a;\n\t\t\t\t--noise5-primary-channel:   #afaea3;\n\t\t\t\t--noise5-secondary-note:    #60605a;\n\t\t\t\t--noise5-primary-note:      #afaea3;\n         --mod1-secondary-channel: #139620;\n\t\t\t\t--mod1-primary-channel:   #25ff3a;\n\t\t\t\t--mod1-secondary-note:    #139620;\n\t\t\t\t--mod1-primary-note:      #25ff3a;\n\t\t\t\t--mod2-secondary-channel: #109986;\n\t\t\t\t--mod2-primary-channel:   #1cffe0;\n\t\t\t\t--mod2-secondary-note:    #109986;\n\t\t\t\t--mod2-primary-note:      #1cffe0;\n\t\t\t\t--mod3-secondary-channel: #127296;\n\t\t\t\t--mod3-primary-channel:   #21c3ff;\n\t\t\t\t--mod3-secondary-note:    #127296;\n\t\t\t\t--mod3-primary-note:      #21c3ff;\n\t\t\t\t--mod4-secondary-channel: #6038a5;\n\t\t\t\t--mod4-primary-channel:   #9456ff;\n\t\t\t\t--mod4-secondary-note:    #6038a5;\n\t\t\t\t--mod4-primary-note:      #ff35e0;\n\t\t\t\t}\n\t\t\t",
        nepbox: "\n\t\t\t:root {\n\t\t\t\t--page-margin: #000;\n\t\t\t\t--editor-background: #060606;\n\t\t\t\t--hover-preview: #fff;\n\t\t\t\t--playhead: rgb(0, 242, 255);\n\t\t\t\t--primary-text: #00fff5;\n\t\t\t\t--secondary-text: #a82f2f;\n\t\t\t\t--inverted-text: #000;\n\t\t\t\t--text-selection: rgba(98, 46, 164, .99);\n\t\t\t\t--box-selection-fill: #b74a4a;\n\t\t\t\t--loop-accent: #7744FF;\n\t\t\t\t--link-accent: #ff00e1;\n\t\t\t\t--ui-widget-background: #484848;\n\t\t\t\t--ui-widget-focus: #3e3e3e;\n\t\t\t\t--pitch-background: #0a2d44;\n\t\t\t\t--tonic: #9150ff;\n\t\t\t\t--fifth-note: #900;\n\t\t\t\t--white-piano-key: #353535;\n\t\t\t\t--black-piano-key: #fff;\n\t\t\t\t--white-piano-key-text: #fff;\n\t\t\t\t--black-piano-key-text: #000;\n\t\t\t\t--track-editor-bg-pitch: #424242;\n\t\t\t\t--track-editor-bg-pitch-dim: #000;\n\t\t\t\t--track-editor-bg-noise: #424242;\n\t\t\t\t--track-editor-bg-noise-dim: #000;\n\t\t\t\t--track-editor-bg-mod: #3c3c3c;\n\t\t\t\t--track-editor-bg-mod-dim: #000;\n\t\t\t\t--multiplicative-mod-slider: #fff;\n\t\t\t\t--overwriting-mod-slider: #9d9d9d;\n\t\t\t\t--indicator-primary: #f00;\n\t\t\t\t--indicator-secondary: #919191;\n\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t--input-box-outline: #626262;\n\t\t\t\t--mute-button-normal: #9a00ff;\n\t\t\t\t--mute-button-mod: #00fff7;\n\t\t\t\t--mod-label-primary: #2b2b2b;\n\t\t\t\t--pitch-channel-limit: 4;\n\t\t\t\t--noise-channel-limit: 2;\n\n\t\t\t\t--pitch1-secondary-channel: #c13cbf;\n\t\t\t\t--pitch1-primary-channel: #f75dff;\n\t\t\t\t--pitch1-secondary-note: #b930a2;\n\t\t\t\t--pitch1-primary-note: #fca5ff;\n\t\t\t\t--pitch2-secondary-channel: #800000;\n\t\t\t\t--pitch2-primary-channel: #f00;\n\t\t\t\t--pitch2-secondary-note: #8c2121;\n\t\t\t\t--pitch2-primary-note: #ff5252;\n\t\t\t\t--pitch3-secondary-channel: #004bb3;\n\t\t\t\t--pitch3-primary-channel: #1792ff;\n\t\t\t\t--pitch3-secondary-note: #005cb3;\n\t\t\t\t--pitch3-primary-note: #00ffe9;\n\t\t\t\t--pitch4-secondary-channel: #a48800;\n\t\t\t\t--pitch4-primary-channel: #fb0;\n\t\t\t\t--pitch4-secondary-note: #9c4100;\n\t\t\t\t--pitch4-primary-note: #ffd84e;\n\t\t\t\t--noise1-secondary-channel: #868686;\n\t\t\t\t--noise1-primary-channel: #fff;\n\t\t\t\t--noise1-secondary-note: #868686;\n\t\t\t\t--noise1-primary-note: #fff;\n\t\t\t\t--noise2-secondary-channel: #805300;\n\t\t\t\t--noise2-primary-channel: #ff8c00;\n\t\t\t\t--noise2-secondary-note: #6a3500;\n\t\t\t\t--noise2-primary-note: #a85400;\n\t\t\t\t--mod1-secondary-channel: #6c0000;\n\t\t\t\t--mod1-primary-channel: #ff3e3e;\n\t\t\t\t--mod1-secondary-note: #6c0000;\n\t\t\t\t--mod1-primary-note: #ff3e3e;\n\t\t\t\t--mod2-secondary-channel: #d25a00;\n\t\t\t\t--mod2-primary-channel: #fdff00;\n\t\t\t\t--mod2-secondary-note: #d25a00;\n\t\t\t\t--mod2-primary-note: #fdff00;\n\t\t\t\t--mod3-secondary-channel: #046000;\n\t\t\t\t--mod3-primary-channel: #23ff1b;\n\t\t\t\t--mod3-secondary-note: #046000;\n\t\t\t\t--mod3-primary-note: #23ff1b;\n\t\t\t\t--mod4-secondary-channel: #3b2bae;\n\t\t\t\t--mod4-primary-channel: #0c79ff;\n\t\t\t\t--mod4-secondary-note: #3b2bae;\n\t\t\t\t--mod4-primary-note: #0c79ff;\n\t\t\t\t--disabled-note-secondary: #696969;\n\t\t\t\t}\n\t\t\t",
        "cardboardbox classic": "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0f0700;\n--editor-background: #0f0700;\n--hover-preview: #75461d;\n--playhead: #75461d;\n--primary-text: #ddd;\n--secondary-text: #8e695b;\n--text-selection: #75461d;\n--box-selection-fill: rgba(117, 70, 29,0.5);\n--loop-accent: #75461d;\n--link-accent: #75461d;\n--ui-widget-background: #574a3e;\n--ui-widget-focus: #756453;\n--pitch-background: #361900;\n--tonic: #fdba9a;\n--fifth-note: #7f78d2;\n--pitch1-secondary-channel: #798566;\n--pitch1-primary-channel: #9dab86;\n--pitch1-secondary-note: #798566;\n--pitch1-primary-note: #9dab86;\n--pitch2-secondary-channel: #a6733d;\n--pitch2-primary-channel: #e6a157;\n--pitch2-secondary-note: #a6733d;\n--pitch2-primary-note: #e6a157;\n--pitch3-secondary-channel: #874c27;\n--pitch3-primary-channel: #eb8242;\n--pitch3-secondary-note: #874c27;\n--pitch3-primary-note: #eb8242;\n--pitch4-secondary-channel: #395866;\n--pitch4-primary-channel: #537d91;\n--pitch4-secondary-note: #395866;\n--pitch4-primary-note: #537d91;\n--pitch5-secondary-channel: #779992;\n--pitch5-primary-channel: #a4d1c8;\n--pitch5-secondary-note: #779992;\n--pitch5-primary-note: #a4d1c8;\n--pitch7-secondary-channel: #300707;\n--pitch7-primary-channel: #560d0d;\n--pitch7-secondary-note: #300707;\n--pitch7-primary-note: #560d0d;\n--pitch8-secondary-channel: #486312;\n--pitch8-primary-channel: #76a21e;\n--pitch8-secondary-note: #486312;\n--pitch8-primary-note: #76a21e;\n--pitch9-secondary-channel: #4a1242;\n--pitch9-primary-channel: #721b65;\n--pitch9-secondary-note: #4a1242;\n--pitch9-primary-note: #721b65;\n--pitch10-secondary-channel: #7a312d;\n--pitch10-primary-channel: #f8615a;\n--pitch10-secondary-note: #7a312d;\n--pitch10-primary-note: #f8615a;\n--noise1-secondary-channel: #5f6582;\n--noise1-primary-channel: #a6b1e1;\n--noise1-secondary-note: #5f6582;\n--noise1-primary-note: #a6b1e1;\n--noise4-secondary-channel: #6B3E8E;\n--noise5-secondary-channel: #996633;\n--noise5-primary-channel: #ddaa77;\n--noise5-secondary-note: #cc9966;\n--noise5-primary-note: #f0d0bb;\n--mod1-secondary-channel: #339955;\n\t\t\t\t}\n\t\t\t",
        "blubox classic": "\n\t\t\t:root {\n\t\t\t\t--page-margin: #040410;\n\t\t\t\t\t--editor-background: #040410;\n\t\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--link-accent: #024ACA;\n\t\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t\t--pitch-background: #393e4f;\n\t\t\t\t\t--tonic: #725491;\n\t\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t\t--input-box-outline: #222;\n\t\t\t\t\t--mute-button-normal: #886eae;\n\t\t\t\t\t--pitch1-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch1-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch1-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch1-primary-note:      #024ACA;\n\t\t\t\t\t--pitch2-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch2-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch2-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch2-primary-note:      #024ACA;\n\t\t\t\t\t--pitch3-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch3-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch3-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch3-primary-note:      #024ACA;\n\t\t\t\t\t--pitch4-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch4-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch4-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch4-primary-note:      #024ACA;\n\t\t\t\t\t--pitch5-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch5-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch5-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch5-primary-note:      #024ACA;\n\t\t\t\t\t--pitch6-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch6-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch6-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch6-primary-note:      #024ACA;\n\t\t\t\t\t--pitch7-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch7-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch7-secondary-note:\t  #0A89FF;\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#024ACA;\n\t\t\t\t\t--pitch8-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch8-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch8-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch8-primary-note:      #024ACA;\n\t\t\t\t\t--pitch9-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch9-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch9-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#024ACA;\n\t\t\t\t\t--pitch10-secondary-channel:#0A89FF;\n\t\t\t\t\t--pitch10-primary-channel:  #024ACA;\n\t\t\t\t\t--pitch10-secondary-note:   #0A89FF;\n\t\t\t\t\t--pitch10-primary-note:     #024ACA;\n\t\t\t\t\t--noise1-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise1-primary-channel:   #024ACA;\n\t\t\t\t\t--noise1-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise1-primary-note:      #024ACA;\n\t\t\t\t\t--noise2-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise2-primary-channel:   #024ACA;\n\t\t\t\t\t--noise2-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise2-primary-note:      #024ACA;\n\t\t\t\t\t--noise3-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise3-primary-channel:   #024ACA;\n\t\t\t\t\t--noise3-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise3-primary-note:      #024ACA;\n\t\t\t\t\t--noise4-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise4-primary-channel:   #024ACA;\n\t\t\t\t\t--noise4-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise4-primary-note:      #024ACA;\n\t\t\t\t\t--mod1-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod1-primary-channel:     #024ACA;\n\t\t\t\t\t--mod1-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod1-primary-note:        #024ACA;\n\t\t\t\t\t--mod2-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod2-primary-channel:     #024ACA;\n\t\t\t\t\t--mod2-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod2-primary-note:        #024ACA;\n\t\t\t\t\t--mod3-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod3-primary-channel:     #024ACA;\n\t\t\t\t\t--mod3-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #024ACA;\n\t\t\t\t\t--mod4-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod4-primary-channel:     #024ACA;\n\t\t\t\t\t--mod4-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod4-primary-note:        #024ACA;\n\t\t\t\t\t--mod-label-primary:        #282840;\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t\t--mod-label-primary-text:   white;\n\t\t\t\t}\n\t\t\t",
        "dogebox classic": "\n\t\t\t\t:root {\n\t\t\t--page-margin: #0d0063;\n\t\t\t--editor-background: #0D0063;\n\t\t\t--pitch-background: #322c59;\n\t\t\t--tonic: #1c1933;\n\t\t\t--fifth-note: #7b74ad;\n\t\t\t--pitch-channel-limit: 6;\n\t\t\t--noise-channel-limit: 3;\n\t\t\t--pitch1-secondary-channel: #c7ac00;\n\t\t\t--pitch1-primary-channel: #fcf403;\n\t\t\t--pitch1-secondary-note: #c7c700;\n\t\t\t--pitch1-primary-note: #fcf403;\n\t\t\t--pitch2-secondary-channel: #9400b5;\n\t\t\t--pitch2-primary-channel: #ff00ee;\n\t\t\t--pitch2-secondary-note: #9400b5;\n\t\t\t--pitch2-primary-note: #ff00ee;\n\t\t\t--pitch3-secondary-channel: #b37466;\n\t\t\t--pitch3-primary-channel: #ffc6a1;\n\t\t\t--pitch3-secondary-note: #b37466;\n\t\t\t--pitch3-primary-note: #ffc6a1;\n\t\t\t--pitch7-secondary-channel: #c7ac00;\n\t\t\t--pitch7-primary-channel: #fcf403;\n\t\t\t--pitch7-secondary-note: #c7c700;\n\t\t\t--pitch7-primary-note: #fcf403;\n\t\t\t--pitch8-secondary-channel: #9400b5;\n\t\t\t--pitch8-primary-channel: #ff00ee;\n\t\t\t--pitch8-secondary-note: #9400b5;\n\t\t\t--pitch8-primary-note: #ff00ee;\n\t\t\t--pitch9-secondary-channel: #b37466;\n\t\t\t--pitch9-primary-channel: #ffc6a1;\n\t\t\t--pitch9-secondary-note: #b37466;\n\t\t\t--pitch9-primary-note: #ffc6a1;\n\t\t\t--pitch10-secondary-channel: #00a100;\n\t\t\t--pitch10-primary-channel: #50ff50;\n\t\t\t--pitch10-secondary-note: #00c700;\n\t\t\t--pitch10-primary-note: #a0ffa0;\n\t\t\t--noise1-secondary-channel: #95acad;\n\t\t\t--noise1-primary-channel: #cee9eb;\n\t\t\t--noise1-secondary-note: #95acad;\n\t\t\t--noise1-primary-note: #cee9eb;\n\t\t\t--noise4-secondary-channel: #7c9b42;\n\t\t\t--noise4-primary-channel:   #a5ff00;\n\t\t\t--noise4-secondary-note:    #7c9b42;\n\t\t\t--noise4-primary-note:      #a5ff00;\n\t\t\t--noise5-secondary-channel: #7c9b42;\n      \t \t--mod1-secondary-channel: #c7ac00;\n\t\t\t--mod1-primary-channel: #fcf403;\n\t\t\t--mod1-secondary-note: #c7c700;\n\t\t\t--mod1-primary-note: #fcf403;\n\t\t\t--mod2-secondary-channel: #9400b5;\n\t\t\t--mod2-primary-channel: #ff00ee;\n\t\t\t--mod2-secondary-note: #9400b5;\n\t\t\t--mod2-primary-note: #ff00ee;\n\t\t\t--mod3-secondary-channel: #b37466;\n\t\t\t--mod3-primary-channel: #ffc6a1;\n\t\t\t--mod3-secondary-note: #b37466;\n\t\t\t--mod3-primary-note: #ffc6a1;\n\t\t\t--mod4-secondary-channel: #00a100;\n\t\t\t--mod4-primary-channel: #50ff50;\n\t\t\t--mod4-secondary-note: #00c700;\n\t\t\t--mod4-primary-note: #a0ffa0;\n\t\t\t\t}\n\t\t\t",
        "dogebox dark": "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0d0063;\n\t\t\t\t\t--editor-background: #0D0063;\n\t\t\t\t\t--pitch-background: #322c59;\n\t\t\t\t\t--tonic: #1c1933;\n\t\t\t\t\t--fifth-note: #7b74ad;\n\t\t\t\t\t--pitch1-secondary-channel: #c7ac00;\n\t\t\t\t\t--pitch1-primary-channel:   #fcf403;\n\t\t\t\t\t--pitch1-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch1-primary-note:      #fcf403;\n\t\t\t\t\t--pitch2-secondary-channel: #9400b5;\n\t\t\t\t\t--pitch2-primary-channel:   #ff00ee;\n\t\t\t\t\t--pitch2-secondary-note:    #9400b5;\n\t\t\t\t\t--pitch2-primary-note:      #ff00ee;\n\t\t\t\t\t--pitch3-secondary-channel: #b37466;\n\t\t\t\t\t--pitch3-primary-channel:   #ffc6a1;\n\t\t\t\t\t--pitch3-secondary-note:    #b37466;\n\t\t\t\t\t--pitch3-primary-note:      #ffc6a1;\n\t\t\t\t\t--noise1-secondary-channel: #95acad;\n\t\t\t\t\t--noise1-primary-channel:   #cee9eb;\n\t\t\t\t\t--noise1-secondary-note:    #95acad;\n\t\t\t\t\t--noise1-primary-note:      #cee9eb;\n\t\t\t\t}\n\t\t\t",
        "todbox dark mode": "\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t\t--hover-preview: #999999;\n\t\t\t\t\t--playhead: #999999;\n\t\t\t\t\t--primary-text: #999999;\n\t\t\t\t\t--secondary-text: #444444;\n\t\t\t\t--text-selection: #999999;\n\t\t\t\t\t--box-selection-fill: #999999;\n\t\t\t\t\t--loop-accent: #999999;\n\t\t\t\t\t--link-accent: #999999;\n\t\t\t\t\t--ui-widget-background: #222222;\n\t\t\t\t\t--ui-widget-focus: #444444;\n\t\t\t\t--pitch-background: #101010;\n\t\t\t\t\t--tonic: #404040;\n\t\t\t\t\t--fifth-note: #202020;\n\t\t\t\t\t--white-piano-key: #999999;\n\t\t\t\t\t--black-piano-key: #101010;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--pitch1-secondary-channel: #004444;\n\t\t\t\t\t--pitch1-primary-channel:   #009999;\n\t\t\t\t\t--pitch1-secondary-note:    #004444;\n\t\t\t\t\t--pitch1-primary-note:      #009999;\n\t\t\t\t\t--pitch2-secondary-channel: #444400;\n\t\t\t\t\t--pitch2-primary-channel:   #999900;\n\t\t\t\t\t--pitch2-secondary-note:    #444400;\n\t\t\t\t\t--pitch2-primary-note:      #999900;\n\t\t\t\t\t--pitch3-secondary-channel: #443300;\n\t\t\t\t\t--pitch3-primary-channel:   #996600;\n\t\t\t\t\t--pitch3-secondary-note:    #443300;\n\t\t\t\t\t--pitch3-primary-note:      #996600;\n\t\t\t\t\t--pitch4-secondary-channel: #004400;\n\t\t\t\t\t--pitch4-primary-channel:   #009900;\n\t\t\t\t\t--pitch4-secondary-note:    #004400;\n\t\t\t\t\t--pitch4-primary-note:      #009900;\n\t\t\t\t\t--pitch5-secondary-channel: #440044;\n\t\t\t\t\t--pitch5-primary-channel:   #990099;\n\t\t\t\t\t--pitch5-secondary-note:    #440044;\n\t\t\t\t\t--pitch5-primary-note:      #990099;\n\t\t\t\t\t--pitch6-secondary-channel: #333344;\n\t\t\t\t\t--pitch6-primary-channel:   #666699;\n\t\t\t\t\t--pitch6-secondary-note:    #333344;\n\t\t\t\t\t--pitch6-primary-note:      #666699;\n\t\t\t\t\t--pitch7-secondary-channel: #444400;\n\t\t\t\t\t--pitch7-primary-channel:   #999900;\n\t\t\t\t\t--pitch7-secondary-note:    #444400;\n\t\t\t\t\t--pitch7-primary-note:      #999900;\n\t\t\t\t\t--pitch8-secondary-channel: #824E54;\n\t\t\t\t\t--pitch8-primary-channel:   #C4757E;\n\t\t\t\t\t--pitch8-secondary-note:    #824E54;\n\t\t\t\t\t--pitch8-primary-note:      #C4757E;\n\t\t\t\t\t--pitch9-secondary-channel: #006342;\n\t\t\t\t\t--pitch9-primary-channel:   #008E5F;\n\t\t\t\t\t--pitch9-secondary-note:    #006342;\n\t\t\t\t\t--pitch9-primary-note:      #008E5F;\n\t\t\t\t\t--pitch10-secondary-channel: #561291;\n\t\t\t\t\t--pitch10-primary-channel:   #7819C1;\n\t\t\t\t\t--pitch10-secondary-note:    #561291;\n\t\t\t\t\t--pitch10-primary-note:      #7819C1;\n\t\t\t\t\t--noise1-secondary-channel: #444444;\n\t\t\t\t\t--noise1-primary-channel:   #999999;\n\t\t\t\t\t--noise1-secondary-note:    #444444;\n\t\t\t\t\t--noise1-primary-note:      #999999;\n\t\t\t\t\t--noise2-secondary-channel: #443311;\n\t\t\t\t\t--noise2-primary-channel:   #996633;\n\t\t\t\t\t--noise2-secondary-note:    #443311;\n\t\t\t\t\t--noise2-primary-note:      #996633;\n\t\t\t\t\t--noise3-secondary-channel: #113344;\n\t\t\t\t\t--noise3-primary-channel:   #336699;\n\t\t\t\t\t--noise3-secondary-note:    #113344;\n\t\t\t\t\t--noise3-primary-note:      #336699;\n\t\t\t\t\t--noise4-secondary-channel: #444444;\n\t\t\t\t\t--noise4-primary-channel:   #999999;\n\t\t\t\t\t--noise4-secondary-note:    #444444;\n\t\t\t\t\t--noise4-primary-note:      #999999;\n\t\t\t\t\t--noise5-secondary-channel: #443311;\n\t\t\t\t\t--noise5-primary-channel:   #996633;\n\t\t\t\t\t--noise5-secondary-note:    #443311;\n\t\t\t\t\t--noise5-primary-note:      #996633;\n          --mod1-secondary-channel: #004444;\n\t\t\t\t\t--mod1-primary-channel:   #009999;\n\t\t\t\t\t--mod1-secondary-note:    #004444;\n\t\t\t\t\t--mod1-primary-note:      #009999;\n\t\t\t\t\t--mod2-secondary-channel: #444400;\n\t\t\t\t\t--mod2-primary-channel:   #999900;\n\t\t\t\t\t--mod2-secondary-note:    #444400;\n\t\t\t\t\t--mod2-primary-note:      #999900;\n\t\t\t\t\t--mod3-secondary-channel: #443300;\n\t\t\t\t\t--mod3-primary-channel:   #996600;\n\t\t\t\t\t--mod3-secondary-note:    #443300;\n\t\t\t\t\t--mod3-primary-note:      #996600;\n\t\t\t\t\t--mod4-secondary-channel: #004400;\n\t\t\t\t\t--mod4-primary-channel:   #009900;\n\t\t\t\t\t--mod4-secondary-note:    #004400;\n\t\t\t\t\t--mod4-primary-note:      #009900;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\t\t\t",
        "mainbox 1.0": "\n\t\t\t:root {\n\t\t\t\t--loop-accent: #2F1C40;\n\t\t\t\t--link-accent: #543873;\n\t\t\t\t--ui-widget-background: #2F1C40;\n\t\t\t\t--ui-widget-focus: #543873;\n\t\t\t\t--pitch-background: #2F1C40;\n\t\t\t\t--tonic: #42286D;\n\t\t\t\t--fifth-note: #37416B;\n\t\t\t\t--white-piano-key: #156CB6;\n\t\t\t\t--black-piano-key: #130D14;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--pitch1-secondary-channel: #156C99;\n\t\t\t\t\t--pitch1-primary-channel:   #00CFDF;\n\t\t\t\t\t--pitch1-secondary-note:    #0080A8;\n\t\t\t\t\t--pitch1-primary-note:      #009FC6;\n\t\t\t\t\t--pitch2-secondary-channel: #AD923A;\n\t\t\t\t\t--pitch2-primary-channel:   #FFD552;\n\t\t\t\t\t--pitch2-secondary-note:    #C49736;\n\t\t\t\t\t--pitch2-primary-note:      #EFC742;\n\t\t\t\t\t--pitch3-secondary-channel: #7A401E;\n\t\t\t\t\t--pitch3-primary-channel:   #C14E30;\n\t\t\t\t\t--pitch3-secondary-note:    #89381B;\n\t\t\t\t\t--pitch3-primary-note:      #E15427;\n\t\t\t\t\t--pitch4-secondary-channel: #0B6030;\n\t\t\t\t\t--pitch4-primary-channel:   #00915C;\n\t\t\t\t\t--pitch4-secondary-note:    #004337;\n\t\t\t\t\t--pitch4-primary-note:      #00915E;\n\t\t\t\t\t--pitch5-secondary-channel: #543873;\n\t\t\t\t\t--pitch5-primary-channel:   #695B95;\n\t\t\t\t\t--pitch5-secondary-note:    #8188BE;\n\t\t\t\t\t--pitch5-primary-note:      #848ED8;\n\t\t\t\t\t--pitch6-secondary-channel: #585882;\n\t\t\t\t\t--pitch6-primary-channel:   #5A72DD;\n\t\t\t\t\t--pitch7-secondary-channel: #7D7C2E;\n\t\t\t\t\t--pitch7-primary-channel:   #B0C952;\n\t\t\t\t\t--pitch7-secondary-note:    #7D7C2E;\n\t\t\t\t\t--pitch7-primary-note:      #B0C952;\n\t\t\t\t\t--pitch8-secondary-channel: #7F426A;\n\t\t\t\t\t--pitch8-primary-channel:   #B75297;\n\t\t\t\t\t--pitch8-secondary-note:    #7F426A;\n\t\t\t\t\t--pitch8-primary-note:      #B75297;\n\t\t\t\t\t--pitch9-secondary-channel: #2A6B65;\n\t\t\t\t\t--pitch9-primary-channel:   #3BA590;\n\t\t\t\t\t--pitch9-secondary-note:    #2A6B65;\n\t\t\t\t\t--pitch9-primary-note:      #3BA590;\n\t\t\t\t\t--pitch10-secondary-channel: #713EA0;\n\t\t\t\t\t--pitch10-primary-channel:   #925EC9;\n\t\t\t\t\t--pitch10-secondary-note:    #713EA0;\n\t\t\t\t\t--pitch10-primary-note:      #925EC9;\n\t\t\t\t\t--noise1-secondary-channel: #6C6C8E;\n\t\t\t\t\t--noise1-primary-channel:   #8A7F96;\n\t\t\t\t\t--noise1-secondary-note:    #A1A3B7;\n\t\t\t\t\t--noise1-primary-note:      #DDBADD;\n\t\t\t\t\t--noise2-secondary-channel: #865E40;\n\t\t\t\t\t--noise2-secondary-note:    #C7B47A;\n\t\t\t\t\t--noise2-primary-note:      #CFC587;\n\t\t\t\t\t--noise3-secondary-channel: #7E7068;\n\t\t\t\t\t--noise3-primary-channel:   #B19998;\n\t\t\t\t\t--noise3-secondary-note:    #BAA6BC;\n\t\t\t\t\t--noise3-primary-note:      #EDDCEC;\n          --mod1-secondary-channel: #156C99;\n\t\t\t\t\t--mod1-primary-channel:   #00CFDF;\n\t\t\t\t\t--mod1-secondary-note:    #0080A8;\n\t\t\t\t\t--mod1-primary-note:      #009FC6;\n\t\t\t\t\t--mod2-secondary-channel: #AD923A;\n\t\t\t\t\t--mod2-primary-channel:   #FFD552;\n\t\t\t\t\t--mod2-secondary-note:    #C49736;\n\t\t\t\t\t--mod2-primary-note:      #EFC742;\n\t\t\t\t\t--mod3-secondary-channel: #7A401E;\n\t\t\t\t\t--mod3-primary-channel:   #C14E30;\n\t\t\t\t\t--mod3-secondary-note:    #89381B;\n\t\t\t\t\t--mod3-primary-note:      #E15427;\n\t\t\t\t\t--mod4-secondary-channel: #0B6030;\n\t\t\t\t\t--mod4-primary-channel:   #00915C;\n\t\t\t\t\t--mod4-secondary-note:    #004337;\n\t\t\t\t\t--mod4-primary-note:      #00915E;\n\t\t\t\t}\n\t\t\t",
        foxbox: "\n\t\t\t:root {\n\t\t\t\t--page-margin: #ADD8E6;\n\t\t\t\t}\n\t\t\t",
        wackybox: '\n\t\t\t\n\t\t\t:root {\n\t\t\t\t--page-margin: #050000;\n\t\t\t\t--editor-background: #050000;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t}\n\n\t\t\t\t* {\n\t\t\t\t\tcursor: url("theme_resources/wackybox_cursor.png"), auto !important;\n\t\t\t\t}\n\t\t\t\t#Hotdog {\n\t\t\t\t\tdisplay: inline !important;\n\t\t\t\t\tcontent: url("theme_resources/hotdog.png") !important;\n\t\t\t\t}\n\n\t\t\t',
        microbox: "\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #000000;\n\t\t\t\t\t--editor-background: #000000;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--secondary-text: #93B6AD;\n\t\t\t\t\t--text-selection: rgba(47,255,250,0.99);\n\t\t\t\t\t--box-selection-fill: #03B068;\n\t\t\t\t\t--loop-accent: #FF0061;\n\t\t\t\t\t--link-accent: #FFC800;\n\t\t\t\t\t--ui-widget-background: #38554E;\n\t\t\t\t\t--ui-widget-focus: #2A7E69;\n\t\t\t\t\t--pitch-background: #281F23;\n\t\t\t\t\t--tonic: #004634;\n\t\t\t\t\t--fifth-note: #463400;\n\t\t\t\t\t--white-piano-key: #edc;\n\t\t\t\t\t--black-piano-key: #456;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #333333;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #000000;\n\t\t\t\t\t--track-editor-bg-noise: #463400;\n\t\t\t\t\t--track-editor-bg-noise-dim: #000000;\n\t\t\t\t\t--track-editor-bg-mod: #004634;\n\t\t\t\t\t--track-editor-bg-mod-dim: #000000;\n\t\t\t\t\t--multiplicative-mod-slider: #FFC800;\n\t\t\t\t\t--overwriting-mod-slider: #00ffc0;\n\t\t\t\t\t--indicator-primary: #00ffc0;\n\t\t\t\t\t--indicator-secondary: #333333;\n\t\t\t\t\t--select2-opt-group: #2B2B2B;\n\t\t\t\t\t--input-box-outline: #69BFC6;\n\t\t\t\t\t--mute-button-normal: #00ffc0;\n\t\t\t\t\t--mute-button-mod: #FFC800;\n\t\t\t\t\t--mod-label-primary: #38554E;\n\t\t\t\t\t--mod-label-secondary-text: rgb(0, 43, 45);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t}\n\t\t\t",
        paandorasbox: "\n\t\t\t:root {\n\t\t\t --page-margin: #200000;\n\t\t\t  --editor-background: #200000;\n\t\t\t  --text-selection: #FF5100;\n\t\t\t  --loop-accent: #FF5100;\n\t\t\t  --link-accent: #0F0;\n\t\t\t  --ui-widget-background: #562334;\n\t\t\t  --ui-widget-focus: #6D1B36;\n\t\t\t  --pitch-background: #6D1B36;\n\t\t\t  --tonic: #FF5100;\n\t\t\t  --fifth-note: #00B6FF;\n\t\t\t  --track-editor-bg-pitch: #380C14;\n\t\t\t  --track-editor-bg-pitch-dim: #200000;\n\t\t\t  --track-editor-bg-noise: #233323;\n\t\t\t  --track-editor-bg-noise-dim: #101A0F;\n\t\t\t  --track-editor-bg-mod: #234C82;\n\t\t\t  --track-editor-bg-mod-dim: #0D1D33;\n\t\t\t  --indicator-primary: #FF5100;\n\t\t\t  --pitch1-secondary-channel: #00B200;\n\t\t\t  --pitch1-primary-channel: #0F0;\n\t\t\t  --pitch1-secondary-note: #00B200;\n\t\t\t  --pitch1-primary-note: #0F0;\n\t\t\t  --pitch2-secondary-channel: #00B282;\n\t\t\t  --pitch2-primary-channel: #00FFBF;\n\t\t\t  --pitch2-secondary-note: #00B282;\n\t\t\t  --pitch2-primary-note: #00FFBF;\n\t\t\t  --pitch3-secondary-channel: #00B2B2;\n\t\t\t  --pitch3-primary-channel: #0FF;\n\t\t\t  --pitch3-secondary-note: #00B2B2;\n\t\t\t  --pitch3-primary-note: #0FF;\n\t\t\t  --pitch4-secondary-channel: #2623B2;\n\t\t\t  --pitch4-primary-channel: #3631FF;\n\t\t\t  --pitch4-secondary-note: #2623B2;\n\t\t\t  --pitch4-primary-note: #3631FF;\n\t\t\t  --pitch5-secondary-channel: #7700B2;\n\t\t\t  --pitch5-primary-channel: #A0F;\n\t\t\t  --pitch5-secondary-note: #7700B2;\n\t\t\t  --pitch5-primary-note: #A0F;\n\t\t\t  --pitch6-secondary-channel: #B200B2;\n\t\t\t  --pitch6-primary-channel: #F0F;\n\t\t\t  --pitch6-secondary-note: #B200B2;\n\t\t\t  --pitch6-primary-note: #F0F;\n\t\t\t  --pitch7-secondary-channel: #B20000;\n\t\t\t  --pitch7-primary-channel: #F00;\n\t\t\t  --pitch7-secondary-note: #B20000;\n\t\t\t  --pitch7-primary-note: #F00;\n\t\t\t  --pitch8-secondary-channel: #00B200;\n\t\t\t  --pitch8-primary-channel: #0F0;\n\t\t\t  --pitch8-secondary-note: #00B200;\n\t\t\t  --pitch8-primary-note: #0F0;\n\t\t\t  --pitch9-secondary-channel: #00B282;\n\t\t\t  --pitch9-primary-channel: #0FF;\n\t\t\t  --pitch9-secondary-note: #00B282;\n\t\t\t  --pitch9-primary-note: #0FF;\n\t\t\t  --pitch10-secondary-channel: #0071B2;\n\t\t\t  --pitch10-primary-channel: #009EFF;\n\t\t\t  --pitch10-secondary-note: #0071B2;\n\t\t\t  --pitch10-primary-note: #009EFF;\n\t\t\t  --noise1-secondary-channel: #32B221;\n\t\t\t  --noise1-primary-channel: #44FF2F;\n\t\t\t  --noise1-secondary-note: #32B221;\n\t\t\t  --noise1-primary-note: #44FF2F;\n\t\t\t  --noise2-secondary-channel: #216FB2;\n\t\t\t  --noise2-primary-channel: #2F9DFF;\n\t\t\t  --noise2-secondary-note: #216FB2;\n\t\t\t  --noise2-primary-note: #2F9DFF;\n\t\t\t  --noise3-secondary-channel: #2623B2;\n\t\t\t  --noise3-primary-channel: #3631FF;\n\t\t\t  --noise3-secondary-note: #2623B2;\n\t\t\t  --noise3-primary-note: #3631FF;\n\t\t\t  --noise4-secondary-channel: #7223B2;\n\t\t\t  --noise4-primary-channel: #A531FF;\n\t\t\t  --noise4-secondary-note: #7223B2;\n\t\t\t  --noise4-primary-note: #A531FF;\n\t\t\t  --noise5-secondary-channel: #B2235A;\n\t\t\t  --noise5-primary-channel: #FF317E;\n\t\t\t  --noise5-secondary-note: #B2235A;\n\t\t\t  --noise5-primary-note: #FF317E;\n\t\t\t  --mod1-secondary-channel: #17B274;\n\t\t\t  --mod1-primary-channel: #21FFA8;\n\t\t\t  --mod1-secondary-note: #17B274;\n\t\t\t  --mod1-primary-note: #21FFA8;\n\t\t\t  --mod2-secondary-channel: #1783B2;\n\t\t\t  --mod2-primary-channel: #1FBAFF;\n\t\t\t  --mod2-secondary-note: #1783B2;\n\t\t\t  --mod2-primary-note: #1FBAFF;\n\t\t\t  --mod4-secondary-channel: #B20E6B;\n\t\t\t  --mod4-primary-channel: #FF1291;\n\t\t\t  --mod4-secondary-note: #B20E6B;\n\t\t\t  --mod4-primary-note: #FF1291;\n\t\t\t  --mod-label-primary: #994038;\n\t\t\t  --mod-label-secondary-text: #331512;\n\t\t\t  --mod-label-primary-text: #331512;\n\t\t\t  --disabled-note-primary: #994038;\n\t\t\t  --disabled-note-secondary: #331512;\n\t\t\t}\n\t\t\t",
        midbox: ":root {\n\t\t\t--page-margin: #010a1e;\n\t\t\t--editor-background: #010a1e;\n\t\t\t--hover-preview: #dfe9fe;\n\t\t\t--playhead: #e7f5f6;\n\t\t\t--primary-text: #f0fdff;\n\t\t\t--secondary-text: #c4c7d7;\n\t\t\t--inverted-text: #0f0623;\n\t\t\t--text-selection: #3f0ab4;\n\t\t\t--box-selection-fill: #32afb3;\n\t\t\t--loop-accent: #1719ff;\n\t\t\t--link-accent: #83a6ed;\n\t\t\t--ui-widget-background: #222856;\n\t\t\t--ui-widget-focus: #21417c;\n\t\t\t--pitch-background: #10264a;\n\t\t\t--tonic: #0797ce;\n\t\t\t--fifth-note: #3e2fb5;\n\t\t\t--white-piano-key: #ebf3f4;\n\t\t\t--black-piano-key: #253353;\n\t\t\t--white-piano-key-text: black;\n\t\t\t--black-piano-key-text: white;\n\t\t\t--oscilloscope-line-L: #72dcfc;\n\t\t\t--oscilloscope-line-R: #304eff;\n\t\t\t--mod-title: #1b2fff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #183b65; \n\t\t\t--track-editor-bg-pitch-dim: #1f2c3d;\n\t\t\t--track-editor-bg-noise: #2e196d;\n\t\t\t--track-editor-bg-noise-dim: #212038;\n\t\t\t--track-editor-bg-mod: #066433;\n\t\t\t--track-editor-bg-mod-dim: #152b1f;\n\t\t\t--multiplicative-mod-slider: #1242a4;\n\t\t\t--overwriting-mod-slider: #2218db;\n\t\t\t--indicator-primary: #1698d3;\n\t\t\t--indicator-secondary: #1b478e;\n\t\t\t--select2-opt-group: #312f6d;\n\t\t\t--input-box-outline: #788b96;\n\t\t\t--mute-button-normal: #1d34f2;\n\t\t\t--mute-button-mod: #06bad6;\n\t\t\t--mod-label-primary: #14383f;\n\t\t\t--mod-label-secondary-text: #1d7080;\n\t\t\t--mod-label-primary-text: #b7e9f2;\n\t\t\t--pitch-secondary-channel-hue: 190;\n\t\t\t--pitch-secondary-channel-hue-scale: 2.5;\n\t\t\t--pitch-secondary-channel-sat: 80;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 50;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 190;\n\t\t\t--pitch-primary-channel-hue-scale: 2.5;\n\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 76.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 190;\n\t\t\t--pitch-secondary-note-hue-scale: 2.5;\n\t\t\t--pitch-secondary-note-sat: 90;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 30;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 190;\n\t\t\t--pitch-primary-note-hue-scale: 2.5;\n\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 200;\n\t\t\t--noise-secondary-channel-hue-scale: 2.5;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 200;\n\t\t\t--noise-primary-channel-hue-scale: 2.5;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 200;\n\t\t\t--noise-secondary-note-hue-scale: 2.5;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 200;\n\t\t\t--noise-primary-note-hue-scale: 2.5;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 140;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 90;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 55;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 140;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 100;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 85;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 140;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 95;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 50;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 140;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 100;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 90;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary:    #53527b;\n\t\t\t--disabled-note-secondary:  #1c1b30;\n\t\t}\n\t\t",
        dogebox2: "\n\t\t\t:root {\n\t\t\t\t--page-margin: #000015;\n\t\t\t\t--editor-background: #000015;\n\t\t\t\t--hover-preview: #00ffff;\n\t\t\t\t--playhead: #00ffff;\n\t\t\t\t--text-selection: rgba(255, 127, 80, 0.99);\n\t\t\t\t--box-selection-fill: rgba(255, 255, 255, 0.2);\n\t\t\t\t--loop-accent: #ff00ff;\n\t\t\t\t--link-accent: #00ffff;\n\t\t\t\t--ui-widget-background: #222222;\n\t\t\t\t--ui-widget-focus: #444444;\n\t\t\t\t--pitch-background: #222222;\n\t\t\t\t--tonic: #ab382c;\n\t\t\t\t--fifth-note: #2a76a8;\n\t\t\t\t--white-piano-key: #ffffff;\n\t\t\t\t--black-piano-key: #222222;\n\t\t\t\t--white-piano-key-text: #000000;\n\t\t\t\t--track-editor-bg-pitch: #222222;\n\t\t\t\t--track-editor-bg-pitch-dim: #111111;\n\t\t\t\t--track-editor-bg-noise: #222222;\n\t\t\t\t--track-editor-bg-noise-dim: #111111;\n\t\t\t\t--track-editor-bg-mod: #333333;\n\t\t\t\t--track-editor-bg-mod-dim: #111111;\n\t\t\t\t--multiplicative-mod-slider: #666666;\n\t\t\t\t--overwriting-mod-slider: #666666;\n\t\t\t\t--indicator-primary: #ff00ff;\n\t\t\t\t--indicator-secondary: #00ffff;\n\t\t\t\t--select2-opt-group: #333333;\n\t\t\t\t--input-box-outline: #444444;\n\t\t\t\t--mute-button-normal: #ff00ff;\n\t\t\t\t--mute-button-mod: #00ffff;\n\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t--pitch1-secondary-channel: #bd9909;\n\t\t\t\t--pitch1-primary-channel: #fbff8e;\n\t\t\t\t--pitch1-secondary-note: #c79d3a;\n\t\t\t\t--pitch1-primary-note: #fdffb2;\n\t\t\t\t--pitch2-secondary-channel: #b86e0d;\n\t\t\t\t--pitch2-primary-channel: #ffb28e;\n\t\t\t\t--pitch2-secondary-note: #ba643a;\n\t\t\t\t--pitch2-primary-note: #fbac92;\n\t\t\t\t--pitch3-secondary-channel: #a81b08;\n\t\t\t\t--pitch3-primary-channel: #f56c67;\n\t\t\t\t--pitch3-secondary-note: #94352b;\n\t\t\t\t--pitch3-primary-note: #f56147;\n\t\t\t\t--pitch4-secondary-channel: #2a7722;\n\t\t\t\t--pitch4-primary-channel: #6ebf5e;\n\t\t\t\t--pitch4-secondary-note: #1c5c18;\n\t\t\t\t--pitch4-primary-note: #88cf82;\n\t\t\t\t--pitch5-secondary-channel: #8c8b3c;\n\t\t\t\t--pitch5-primary-channel: #c3c168;\n\t\t\t\t--pitch5-secondary-note: #747330;\n\t\t\t\t--pitch5-primary-note: #d4d394;\n\t\t\t\t--pitch6-secondary-channel: #3f9577;\n\t\t\t\t--pitch6-primary-channel: #6fc4b4;\n\t\t\t\t--pitch6-secondary-note: #2c6a5c;\n\t\t\t\t--pitch6-primary-note: #8fdad0;\n\t\t\t\t--pitch7-secondary-channel: #204a80;\n\t\t\t\t--pitch7-primary-channel: #6d9fc2;\n\t\t\t\t--pitch7-secondary-note: #132f5a;\n\t\t\t\t--pitch7-primary-note: #9dbed8;\n\t\t\t\t--pitch8-secondary-channel: #a531ad;\n\t\t\t\t--pitch8-primary-channel: #db68e3;\n\t\t\t\t--pitch8-secondary-note: #8d2f94;\n\t\t\t\t--pitch8-primary-note: #e66cbf;\n\t\t\t\t--pitch9-secondary-channel: #03a1a1;\n\t\t\t\t--pitch9-primary-channel: #52fffb;\n\t\t\t\t--pitch9-secondary-note: #34baba;\n\t\t\t\t--pitch9-primary-note: #60fbfb;\n\t\t\t\t--pitch10-secondary-channel: #4208a1;\n\t\t\t\t--pitch10-primary-channel: #9282ff;\n\t\t\t\t--pitch10-secondary-note: #5735b5;\n\t\t\t\t--pitch10-primary-note: #ab52fb;\n\t\t\t\t--noise1-secondary-channel: #2a5555;\n\t\t\t\t--noise1-primary-channel: #4c7878;\n\t\t\t\t--noise1-secondary-note: #6e9a9a;\n\t\t\t\t--noise1-primary-note: #90bcbc;\n\t\t\t\t--noise2-secondary-channel: #553355;\n\t\t\t\t--noise2-primary-channel: #775577;\n\t\t\t\t--noise2-secondary-note: #997799;\n\t\t\t\t--noise2-primary-note: #bbaa99;\n\t\t\t\t--noise3-secondary-channel: #2a6622;\n\t\t\t\t--noise3-primary-channel: #4c8844;\n\t\t\t\t--noise3-secondary-note: #6eaa66;\n\t\t\t\t--noise3-primary-note: #90cc88;\n\t\t\t\t--noise4-secondary-channel: #664400;\n\t\t\t\t--noise4-primary-channel: #886600;\n\t\t\t\t--noise4-secondary-note: #aa8800;\n\t\t\t\t--noise4-primary-note: #cccc00;\n\t\t\t\t--noise5-secondary-channel: #006633;\n\t\t\t\t--noise5-primary-channel: #008855;\n\t\t\t\t--noise5-secondary-note: #00aa77;\n\t\t\t\t--noise5-primary-note: #00cc99;\n\t\t\t\t--mod1-secondary-channel: #fe00ff;\n\t\t\t\t--mod1-primary-channel: #ff72ff;\n\t\t\t\t--mod1-secondary-note: #ff92ff;\n\t\t\t\t--mod1-primary-note: #ffb2fb;\n\t\t\t\t--mod2-secondary-channel: #00fe00;\n\t\t\t\t--mod2-primary-channel: #8eff8e;\n\t\t\t\t--mod2-secondary-note: #92ff92;\n\t\t\t\t--mod2-primary-note: #b2ffb2;\n\t\t\t\t--mod3-secondary-channel: #feff00;\n\t\t\t\t--mod3-primary-channel: #fffb8e;\n\t\t\t\t--mod3-secondary-note: #fffd92;\n\t\t\t\t--mod3-primary-note: #fffe92;\n\t\t\t\t--mod4-secondary-channel: #00fffe;\n\t\t\t\t--mod4-primary-channel: #82fffb;\n\t\t\t\t--mod4-secondary-note: #92ffff;\n\t\t\t\t--mod4-primary-note: #b2fffb;\n\t\t\t\t--disabled-note-primary: #c6c6c6;\n\t\t\t\t--disabled-note-secondary: #8c8c8c;\n\t\t\t\t--note-flash: #ffffff;\n\t\t\t\t--note-flash-secondary: #ffffff77;\n\t\t\t\t}",
        "abyssbox classic": '\n\t\t\t\t:root {\t\t\n\t\t\t\t--page-margin: #1e0915; \t\t\n\t\t\t\t--editor-background: #1e0915; \t\t\n\t\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t\t--secondary-text: #ffcedd; \t\t\n\t\t\t\t--box-selection-fill: #1e0915; \t\t\n\t\t\t\t--loop-accent: #873a51; \t\t\n\t\t\t\t--link-accent: #df88ff; \t\t\n\t\t\t\t--ui-widget-background: #581b3e; \t\t\n\t\t\t\t--ui-widget-focus: #762b4c; \t\t\n\t\t\t\t--pitch-background: #381d24; \t\t\n\t\t\t\t--tonic: #873a51; \t\t\n\t\t\t\t--fifth-note: #75001e; \t\t\n\t\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t\t--black-piano-key: #402f2f;\n\t\t\t\t--use-color-formula: true; \t\t\n\t\t\t\t--track-editor-bg-pitch: #571c40; \t\t\n\t\t\t\t--track-editor-bg-pitch-dim: #290d0d; \t\t\n\t\t\t\t--track-editor-bg-noise: #571131; \t\t\n\t\t\t\t--track-editor-bg-noise-dim: #330a28; \t\t\n\t\t\t\t--track-editor-bg-mod: #54083c; \t\t\n\t\t\t\t--track-editor-bg-mod-dim: #360426; \t\t\n\t\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t\t--mod-label-primary-text: gray; \n\t\t\t\n\t\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-secondary-channel-lum: 40; \t\t\n\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\t\n\t\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-primary-channel-lum: 67.5; \t\t\n\t\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\t\n\t\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-secondary-note-lum: 25; \t\t\n\t\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\t\n\t\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-primary-note-sat: 100; \t\t\n\t\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t\t--pitch-primary-note-lum: 85.6; \t\t\n\t\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\t\n\t\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t\t--noise-secondary-channel-lum: 42; \t\t\n\t\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t\t--noise-secondary-note-lum: 35; \t\t\n\t\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\t\n\t\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t\t--noise-primary-note-sat: 100; \t\t\n\t\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\t\n\t\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\n\t\t\t\t--note-flash: #ffffff;\n\t\t\t\t--note-flash-secondary: #ffffff77;\n\t\t\t\t\n\t\t\t\t--oscilloscope-line-R: var(--ui-widget-background);\n\t\t\t\t--oscilloscope-line-L: var(--secondary-text);\n\t\t\t\t--text-spacing-icon: > ;\n\t\t\t\t--scrollbar-color: #bf2c5d;\n\t\t\t\t\n\t\t\t\t--file-page-symbol: url("theme_resources/icon-file.png");\n\t\t\t\t--edit-pencil-symbol: url("theme_resources/icon-edit.png");\n\t\t\t\t--preferences-gear-symbol: url("theme_resources/icon-preferences.png");\n\t\t\t\t--instrument-copy-symbol: url("theme_resources/icon-copy.png");\n\t\t\t\t--instrument-paste-symbol: url("theme_resources/icon-paste.png");\n\t\t\t\t--play-symbol: url("theme_resources/icon-play.png");\n\t\t\t\t--pause-symbol: url("theme_resources/icon-pause.png");\n\t\t\t\t--record-symbol: url("theme_resources/icon-record.png");\n\t\t\t\t--stop-symbol: url("theme_resources/icon-stop.png");\n\t\t\t\t--prev-bar-symbol: url("theme_resources/icon-prev.png");\n\t\t\t\t--next-bar-symbol: url("theme_resources/icon-next.png");\n\t\t\t\t--muted-symbol: url("theme_resources/icon-speakerMuted.png");\n\t\t\t\t--unmuted-symbol: url("theme_resources/icon-speaker.png");\n\t\t\t\t--volume-symbol: url("theme_resources/icon-speaker.png");\n\t\t\t\t--zoom-in-symbol: url("theme_resources/icon-zoomIn.png");\n\t\t\t\t--zoom-out-symbol: url("theme_resources/icon-zoomOut.png");\n\t\t\t\t--export-symbol: url("theme_resources/icon-export.png");\n\t\t\t\t\t}\n\t\t\t* {\n\t\t\tcursor: url("theme_resources/abyssbox_cursor.png"), auto;\n\t\t\t}\n\t\t\t#Hotdog {\n\t\t\t\tdisplay: inline !important;\n\t\t\t\tcontent: url("theme_resources/hotdog.png") !important;\n\t\t\t}\n\t\t\t\n\t\t\t\t@font-face {\n\t\t\t   font-family: "AbyssType";\n\t\t\t   src:\n\t\t\t\turl("theme_resources/abysstype.otf") format("opentype") tech(color-COLRv1),\n\t\t\t\t}\n\t\n\t\t\t\t/* sets background image */\n\t\t\t\tbody {\n\t\t\t\tbackground-image: url("theme_resources/stripesbg.gif") !important;\n\t\t\t\tbackground-position: center;\n\t\t\t\tbackground-repeat: repeat;\n\t\n\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\t\t\t\t}\n\t\n\t\t\t\t#text-content {\n\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border.png");\n\t\t\t\t\t\tborder-image-slice: 4 fill; \n\t\t\t\t\t   border-image-width: 8px; \n\t\t\t\t\tborder-image-repeat: stretch; \n\t\t\t\t\t\tpadding: 12px; \n\t\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\t\t\t\t}\n\t\t\t\t#beepboxEditorContainer {\n\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border.png");\n\t\t\t\t\t\tborder-image-slice: 4 fill; \n\t\t\t\t\t   \tborder-image-width: 8px; \n\t\t\t\t\t\tborder-image-repeat: stretch;\n\t\t\t\t\t\tpadding: 12px;\n\t\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */ \n\t\t\t\t\t}\n\t\t\t\t.beepboxEditor button,\n\t\t\t\tbutton.playButton,\n\t\t\t\tbutton.pauseButton, \n\t\t\t\tbutton.recordButton, \n\t\t\t\tbutton.stopButton,\n\t\t\t\tbutton.nextBarButton, \n\t\t\t\tbutton.prevBarButton, \n\t\t\t\tbutton.copyButton, \n\t\t\t\tbutton.pasteButton, \n\t\t\t\tbutton.exportInstrumentButton, \n\t\t\t\tbutton.importInstrumentButton, \n\t\t\t\t.beepboxEditor select, \n\t\t\t\t.beepboxEditor .select2-selection__rendered {\n\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border.png") !important;\n\t\t\t\t\t\tborder-image-slice: 4 fill !important; \n\t\t\t\t\t   border-image-width: 4px !important; \n\t\t\t\t\tborder-image-repeat: stretch !important;\n\t\t\t\t\t\tpadding: 4px !important; \n\t\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\n\t\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t\t}\n\t\n\t\t\t\tdiv.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {\n\t\t\t\t\t--ui-widget-background: #1e0915 !important;\n\t\t\t\t\tborder-image-source:none !important;\n\t\t\t\t}\n\t\n\t\t\t\t\tselect.trackSelectBox {\n\t\t\t\t\t\tborder-image: none !important;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t@font-face {\n\t\t\t   font-family: "AbyssType_small";\n\t\t\t   src:\n\t\t\t\turl("theme_resources/abysstype_small.otf") format("opentype") tech(color-COLRv1),\n\t\t\t\t}\n\t\n\t\t\t\thtml {\n\t\t\t\t\tfont-family: \'AbyssType\';\n\t\t\t\t}\n\t\n\t\t\t\tdiv.channelBoxLabel {\n\t\t\t\t\tfont-family: \'AbyssType_small\' !important;\n\t\t\t\t}\n\t\n\t\t\t\t.beepboxEditor input[type="range"]::-webkit-slider-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-webkit-slider-runnable-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-ms-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-ms-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-ms-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-moz-range-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-moz-range-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-moz-range-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="text"],\n\t\t\t\t.beepboxEditor input[type="number"]\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]:checked\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]:checked:after\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\n\t\t\t\tdiv.selectRow span {\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\n\t\t\t\t',
        "abyssbox light": '\n\t\t\t:root { \t\t\n\t\t\t\t--page-margin: #e0adbc; \t\t\n\t\t\t\t--editor-background: #e0adbc; \t\t\n\t\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t\t--primary-text: #6110d9; \t\t\n\t\t\t\t--secondary-text: #cc1338;\t\n\t\t\t\t--inverted-text:  #e8bcc9;\t \t\t\n\t\t\t\t--box-selection-fill: #bf2c5d; \t\t\n\t\t\t\t--loop-accent: #8c346a; \t\t\n\t\t\t\t--link-accent: #8c346a; \t\t\n\t\t\t\t--ui-widget-background: #f5e9f0;\t\t\n\t\t\t\t--ui-widget-focus: #f5e9f0; \t\t\n\t\t\t\t--pitch-background: #eddadf; \t\t\n\t\t\t\t--tonic: #f5f0f1; \t\t\n\t\t\t\t--fifth-note: #ffb5c9; \t\t\n\t\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t\t--black-piano-key: #402f2f;\n\t\t\t\t--use-color-formula: true; \t\t\n\t\t\t\t--track-editor-bg-pitch: #edbecc; \t\t\n\t\t\t\t--track-editor-bg-pitch-dim: #e0adbc; \t\t\n\t\t\t\t--track-editor-bg-noise: #edbecc; \t\t\n\t\t\t\t--track-editor-bg-noise-dim: #e0adbc; \t\t\n\t\t\t\t--track-editor-bg-mod: #edbecc; \t\t\n\t\t\t\t--track-editor-bg-mod-dim: #e0adbc; \t\t\n\t\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t\t--mod-label-primary-text: gray;\n\t\t\t\t--mod-title: #cc1338; \n\t\t\t\n\t\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t\t--pitch-secondary-channel-sat: 255; \t\t\n\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-secondary-channel-lum: 30; \t\t\n\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\t\n\t\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-primary-channel-sat: 255; \t\t\n\t\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-primary-channel-lum: 60; \t\t\n\t\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\t\n\t\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-secondary-note-sat: 255; \t\t\n\t\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t\t--pitch-secondary-note-lum: 30; \t\t\n\t\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\t\n\t\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t\t--pitch-primary-note-sat: 255; \t\t\n\t\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t\t--pitch-primary-note-lum: 60; \t\t\n\t\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\t\n\t\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t\t--noise-secondary-channel-sat: 255; \t\t\n\t\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t\t--noise-secondary-channel-lum: 30; \t\t\n\t\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t\t--noise-primary-channel-sat: 255; \t\t\n\t\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t\t--noise-primary-channel-lum: 60; \t\t\n\t\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t\t--noise-secondary-note-sat: 255; \t\t\n\t\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t\t--noise-secondary-note-lum: 30; \t\t\n\t\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\t\n\t\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t\t--noise-primary-note-sat: 255; \t\t\n\t\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\t\n\t\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-secondary-channel-sat: 255; \t\t\n\t\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t\t--mod-secondary-channel-lum: 30; \t\t\n\t\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-primary-channel-sat: 255; \t\t\n\t\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t\t--mod-primary-channel-lum: 60; \t\t\n\t\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-secondary-note-sat: 255; \t\t\n\t\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t\t--mod-secondary-note-lum: 30; \t\t\n\t\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\t\n\t\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t\t--mod-primary-note-sat: 255; \t\t\n\t\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t\t--mod-primary-note-lum: 60; \t\t\n\t\t\t\t--mod-primary-note-lum-scale: 0; \n\n\t\t\t\t--note-flash: #ffffff;\n\t\t\t\t--note-flash-secondary: #ffffff77;\n\n\t\t\t\t--oscilloscope-line-R: var(--ui-widget-background);\n\t\t\t\t--oscilloscope-line-L: var(--secondary-text);\n\t\t\t\t--text-spacing-icon: > ;\n\t\t\t\t--scrollbar-color: #bf2c5d;\n\n\t\t\t\t--file-page-symbol: url("theme_resources/icon-file.png");\n\t\t\t\t--edit-pencil-symbol: url("theme_resources/icon-edit.png");\n\t\t\t\t--preferences-gear-symbol: url("theme_resources/icon-preferences.png");\n\t\t\t\t--instrument-copy-symbol: url("theme_resources/icon-copy.png");\n\t\t\t\t--instrument-paste-symbol: url("theme_resources/icon-paste.png");\n\t\t\t\t--play-symbol: url("theme_resources/icon-play.png");\n\t\t\t\t--pause-symbol: url("theme_resources/icon-pause.png");\n\t\t\t\t--record-symbol: url("theme_resources/icon-record.png");\n\t\t\t\t--stop-symbol: url("theme_resources/icon-stop.png");\n\t\t\t\t--prev-bar-symbol: url("theme_resources/icon-prev.png");\n\t\t\t\t--next-bar-symbol: url("theme_resources/icon-next.png");\n\t\t\t\t--muted-symbol: url("theme_resources/icon-speakerMuted.png");\n\t\t\t\t--unmuted-symbol: url("theme_resources/icon-speaker.png");\n\t\t\t\t--volume-symbol: url("theme_resources/icon-speaker.png");\n\t\t\t\t--zoom-in-symbol: url("theme_resources/icon-zoomIn.png");\n\t\t\t\t--zoom-out-symbol: url("theme_resources/icon-zoomOut.png");\n\t\t\t\t--export-symbol: url("theme_resources/icon-export.png");\n\t\t\t}\n\t\t\t\t\t/* sets background image */\n\t\t\t\t\tbody {\n\t\t\t\t\tbackground-image: url("theme_resources/stripesbg_light.gif") !important;\n\t\t\t\t\tbackground-position: center;\n\t\t\t\t\tbackground-repeat: repeat;\n\t\t\n\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\t\t\t\t\t}\t\t\n\t\t\t\t#text-content {\n\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border_light.png");\n\t\t\t\t\t\tborder-image-slice: 4 fill; \n\t\t\t\t\t   border-image-width: 8px; \n\t\t\t\t\tborder-image-repeat: stretch; \n\t\t\t\t\t\tpadding: 12px; \n\t\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\t\t\t\t}\n\t\t\t\t#beepboxEditorContainer {\n\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border_light.png");\n\t\t\t\t\t\tborder-image-slice: 4 fill; \n\t\t\t\t\t   border-image-width: 8px; \n\t\t\t\t\tborder-image-repeat: stretch;\n\t\t\t\t\t\tpadding: 12px;\n\t\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */ \n\t\t\t\t\t}\n\t\t\t\t\t.beepboxEditor button,\n\t\t\t\t\tbutton.playButton,\n\t\t\t\t\tbutton.pauseButton, \n\t\t\t\t\tbutton.recordButton, \n\t\t\t\t\tbutton.stopButton,\n\t\t\t\t\tbutton.nextBarButton, \n\t\t\t\t\tbutton.prevBarButton, \n\t\t\t\t\tbutton.copyButton, \n\t\t\t\t\tbutton.pasteButton, \n\t\t\t\t\tbutton.exportInstrumentButton, \n\t\t\t\t\tbutton.importInstrumentButton, \n\t\t\t\t\t.beepboxEditor select, \n\t\t\t\t\t.beepboxEditor .select2-selection__rendered {\n\t\t\t\t\t\t\tborder-image-source: url("theme_resources/abyssbox_border_light.png") !important;\n\t\t\t\t\t\t\tborder-image-slice: 4 fill !important; \n\t\t\t\t\t\t   border-image-width: 4px !important; \n\t\t\t\t\t\tborder-image-repeat: stretch !important;\n\t\t\t\t\t\t\tpadding: 4px !important; \n\t\t\n\t\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\n\t\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\n\t\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\n\t\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\n\t\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\n\t\t\n\t\t\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\tdiv.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {\n\t\t\t\t\t\t--ui-widget-background: var(--editor-background) !important;\n\t\t\t\t\t\tborder-image-source:none !important;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tselect.trackSelectBox {\n\t\t\t\t\t\tborder-image: none !important;\n\t\t\t\t\t}\n\t\n\t\t\t/* sets cursor */ \n\t\t\t* {\n\t\t\tcursor: url("theme_resources/abyssbox_cursor.png"), auto !important;\n\t\t\t}\n\t\t\t#Hotdog {\n\t\t\t\tdisplay: inline !important;\n\t\t\t\tcontent: url("theme_resources/hotdog.png") !important;\n\t\t\t}\n\t\t\t\t@font-face {\n\t\t\t   font-family: "AbyssType";\n\t\t\t   src:\n\t\t\t\turl("theme_resources/abysstype.otf") format("opentype") tech(color-COLRv1),\n\t\t\t\t}\n\t\n\t\t\t\t@font-face {\n\t\t\t   font-family: "AbyssType_small";\n\t\t\t   src:\n\t\t\t\turl("theme_resources/abysstype_small.otf") format("opentype") tech(color-COLRv1),\n\t\t\t\t}\n\t\n\t\t\t\thtml {\n\t\t\t\tfont-family: \'AbyssType\';\n\t\t\t\t}\n\t\t\t\tdiv.channelBoxLabel {\n\t\t\t\t\tfont-family: \'AbyssType_small\' !important;\n\t\t\t\t}\n\t\n\t\t\t\t.beepboxEditor input[type="range"]::-webkit-slider-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-webkit-slider-runnable-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-webkit-slider-runnable-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-ms-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-ms-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-ms-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-moz-range-thumb\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]::-moz-range-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="range"]:focus::-moz-range-track\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="text"],\n\t\t\t\t.beepboxEditor input[type="number"]\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]:checked\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\t\t\t \n\t\t\t\t.beepboxEditor input[type="checkbox"]:checked:after\n\t\t\t\t{\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\n\t\t\t\tdiv.selectRow span {\n\t\t\t\t\tcursor: url("theme_resources/abyssbox_cursor_hand.png"), pointer !important;\n\t\t\t\t}\n\t\n\t\t\t\t',
        slarmoosbox: "\n\t\t:root {\n\t\t\t--page-margin: #14051a;\n\t\t\t--editor-background: #14051a;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #71eee5;\n\t\t\t--secondary-text: #3abbb2;\n\t\t\t--inverted-text: #13695e;\n\t\t\t--box-selection-fill: #36c71c;\n\t\t\t--loop-accent: #36c71c;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #183d05;\n\t\t\t--ui-widget-focus: #247d0d;\n\t\t\t--pitch-background: #2e0e51;\n\t\t\t--tonic: #247d0d;\n\t\t\t--fifth-note: #3abbb2;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #061705;\n\t\t\t--white-piano-key-text: #061705;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #09382b;\n\t\t\t--track-editor-bg-pitch-dim: #14051a;\n\t\t\t--track-editor-bg-noise: #40400b;\n\t\t\t--track-editor-bg-noise-dim: #14051a;\n\t\t\t--track-editor-bg-mod: #0a2c08;\n\t\t\t--track-editor-bg-mod-dim: #14051a;\n\t\t\t--multiplicative-mod-slider: #3abb22;\n\t\t\t--overwriting-mod-slider: #71eee5;\n\t\t\t--indicator-primary: #a773e5;\n\t\t\t--indicator-secondary: #4c1c89;\n\t\t\t--select2-opt-group: #183d05;\n\t\t\t--input-box-outline: #18040a;\n\t\t\t--mute-button-normal: #36c71c;\n\t\t\t--mute-button-mod: #a773e5;\n\t\t\t--mod-label-primary: #a773e5;\n\t\t\t--mod-label-secondary-text: #6b29bf;\n\t\t\t--mod-label-primary-text: #14051a;\n\t\t\t--mod-title: #247d1d;\n\t\t\t--pitch-secondary-channel-hue: 100;\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t--pitch-secondary-channel-sat: 100.0;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.15;\n\t\t\t--pitch-secondary-channel-lum: 60.0;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 100;\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t--pitch-primary-channel-sat-scale: 0.15;\n\t\t\t--pitch-primary-channel-lum: 75.0;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 100;\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t--pitch-secondary-note-sat: 95.0;\n\t\t\t--pitch-secondary-note-sat-scale: 0.15;\n\t\t\t--pitch-secondary-note-lum: 40;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 100;\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t--pitch-primary-note-sat-scale: 0.15;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 65;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 55;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 65;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 66;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 65;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 66;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 65;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 70;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 192;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--oscilloscope-line-R: white;\n\t\t\t--oscilloscope-line-L: var(--secondary-text);\n\t\t}",
        "azur lane": '\n\t\t:root {\n\t\t\t--page-margin: #19337e;\n\t\t\t--editor-background: #000333cf;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #9af9ff;\n\t\t\t--secondary-text: #4072dd;\n\t\t\t--box-selection-fill: #044b94;\n\t\t\t--loop-accent: #950d0d;\n\t\t\t--link-accent: #0072ff;\n\t\t\t--ui-widget-background: #255bb3;\n\t\t\t--ui-widget-focus: #757575;\n\t\t\t--pitch-background: #20468b73;\n\t\t\t--tonic: #c9c9c9;\n\t\t\t--fifth-note: #731d1d;\n\t\t\t--white-piano-key: #eee;\n\t\t\t--black-piano-key: #000;\n\t\t\t--track-editor-bg-pitch: #535a73;\n\t\t\t--track-editor-bg-pitch-dim: #353643;\n\t\t\t--track-editor-bg-noise: #770000;\n\t\t\t--track-editor-bg-noise-dim: #430000;\n\t\t\t--track-editor-bg-mod: #5d1d06;\n\t\t\t--track-editor-bg-mod-dim: #270000;\n\t\t\t--multiplicative-mod-slider: #bb0000;\n\t\t\t--overwriting-mod-slider: #ad0000;\n\t\t\t--indicator-primary: #9c64f7;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #002957;\n\t\t\t--mute-button-normal: #ffffff;\n\t\t\t--mute-button-mod: #4f4f4f;\n\t\t\t--mod-label-primary: #531313;\n\t\t\t--pitch1-secondary-channel: #80858d;\n\t\t  --pitch1-primary-channel: #f2f7ff;\n\t\t  --pitch1-secondary-note: #80858d;\n\t\t  --pitch1-primary-note: #f2f7ff;\n\t\t  --pitch2-secondary-channel: #7392ad;\n\t\t  --pitch2-primary-channel: #a8d6ff;\n\t\t  --pitch2-secondary-note: #7392ad;\n\t\t  --pitch2-primary-note: #a8d6ff;\n\t\t  --pitch3-secondary-channel: #4b7eaa;\n\t\t  --pitch3-primary-channel: #71bdff;\n\t\t  --pitch3-secondary-note: #4b7eaa;\n\t\t  --pitch3-primary-note: #71bdff;\n\t\t  --pitch4-secondary-channel: #3594b1;\n\t\t  --pitch4-primary-channel: #48d4ff;\n\t\t  --pitch4-secondary-note: #3594b1;\n\t\t  --pitch4-primary-note: #48d4ff;\n\t\t  --pitch5-secondary-channel: #1b98b1;\n\t\t  --pitch5-primary-channel: #30f1ff;\n\t\t  --pitch5-secondary-note: #1b98b1;\n\t\t  --pitch5-primary-note: #30f1ff;\n\t\t  --pitch6-secondary-channel: #9e0000;\n\t\t  --pitch6-primary-channel: #db0000;\n\t\t  --pitch6-secondary-note: #9e0000;\n\t\t  --pitch6-primary-note: #db0000;\n\t\t  --pitch7-secondary-channel: #7c1717;\n\t\t  --pitch7-primary-channel: #9e0000;\n\t\t  --pitch7-secondary-note: #7c1717;\n\t\t  --pitch7-primary-note: #9e0000;\n\t\t  --pitch8-secondary-channel: #5c1f1f;\n\t\t  --pitch8-primary-channel: #7c1717;\n\t\t  --pitch8-secondary-note: #5c1f1f;\n\t\t  --pitch8-primary-note: #7c1717;\n\t\t  --pitch9-secondary-channel: #3e2020;\n\t\t  --pitch9-primary-channel: #5c1f1f;\n\t\t  --pitch9-secondary-note: #3e2020;\n\t\t  --pitch9-primary-note: #5c1f1f;\n\t\t  --pitch10-secondary-channel: #2f1c1c;\n\t\t  --pitch10-primary-channel: #5c1f1f;\n\t\t  --pitch10-secondary-note: #2f1c1c;\n\t\t  --pitch10-primary-note: #5c1f1f;\n\t\t  --noise1-secondary-channel: #828282;\n\t\t  --noise1-primary-channel: #cacaca;\n\t\t  --noise1-secondary-note: #828282;\n\t\t  --noise1-primary-note: #cacaca;\n\t\t  --noise2-secondary-channel: #2f8baf;\n\t\t  --noise2-primary-channel: #3de2ff;\n\t\t  --noise2-secondary-note: #2f8baf;\n\t\t  --noise2-primary-note: #3de2ff;\n\t\t  --noise3-secondary-channel: #6f50b1;\n\t\t  --noise3-primary-channel: #8567ff;\n\t\t  --noise3-secondary-note: #6f50b1;\n\t\t  --noise3-primary-note: #8567ff;\n\t\t  --noise4-secondary-channel: #d38900;\n\t\t  --noise4-primary-channel: #ffb500;\n\t\t  --noise4-secondary-note: #d38900;\n\t\t  --noise4-primary-note: #ffb500;\n\t\t  --noise5-secondary-channel: #af0008;\n\t\t  --noise5-primary-channel: #00d70e;\n\t\t  --noise5-secondary-note: #29b700;\n\t\t  --noise5-primary-note: #00f7ff;\n\t\t  --mod1-secondary-channel: #9d5bb9;\n\t\t  --mod1-primary-channel: #e16bff;\n\t\t  --mod1-secondary-note: #3a3ea4;\n\t\t  --mod1-primary-note: #fff;\n\t\t  --mod2-secondary-channel: #3a8d58;\n\t\t  --mod2-primary-channel: #42ffff;\n\t\t  --mod2-secondary-note: #3a8d58;\n\t\t  --mod2-primary-note: #42ffff;\n\t\t  --mod3-secondary-channel: #af6c00;\n\t\t  --mod3-primary-channel: #fa0;\n\t\t  --mod3-secondary-note: #0001a2;\n\t\t  --mod3-primary-note: #970000;\n\t\t  --mod4-secondary-channel: #d3d3d3;\n\t\t  --mod4-primary-channel: #759bff;\n\t\t  --mod4-secondary-note: #a00000;\n\t\t  --mod4-primary-note: #fff;\n\t\t  --disabled-note-primary: #3a3a3a;\n\t\t  --disabled-note-secondary: #000;\n\t\t\t}\n\t\t/* replaces hotdog with an image of the girls using the same scratch sprites from the 404 page*/\n\t\t#Hotdog {\n\t\t\tdisplay: inline !important;\n\t\t\tcontent: url("theme_resources/AzurLaneThemeStarterSquad.png") !important;\n\t\t\twidth: 75%;\n\t\t\theight: 75%;\n\t\t\ttext-align: center;\n\t\t\tmargin-top: 25px;\n\t\t}\n\t\t/* sets cursor */\n\t\t* {\n\t\tcursor: url("theme_resources/AzurLaneThemeMouse.png"), auto !important;\n\t\t}\n\t\t/* sets background image */\n\t\tbody {\n\t\tbackground-image: url("theme_resources/AzurLaneThemeMemoryTaskBackground.png") !important;\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t\t/* make editor background transparent */\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\n\t\tbackground: #0400257d !important;\n\t\t}\n\t\t\t#text-content > section > h1 > font {\n\t\tdisplay: none;\n\t\t}\n\t\t#text-content > section > h1 {\n\t\tmargin: auto;\n\t\tcontent: url("theme_resources/AzurLaneThemeLogo.png");\n\t\t}\n\t\t.promptContainerBG::before {\n\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n\t\t}\n\t}',
        custom: `${localStorage.getItem("customColors") || ":root {  }"}`
    },
    nt.pageMargin = "var(--page-margin, black)",
    nt.editorBackground = "var(--editor-background, black)",
    nt.hoverPreview = "var(--hover-preview, white)",
    nt.playhead = "var(--playhead, white)",
    nt.primaryText = "var(--primary-text, white)",
    nt.secondaryText = "var(--secondary-text, #999)",
    nt.invertedText = "var(--inverted-text, black)",
    nt.textSelection = "var(--text-selection, rgba(119,68,255,0.99))",
    nt.boxSelectionFill = "var(--box-selection-fill, rgba(255,255,255,0.2))",
    nt.loopAccent = "var(--loop-accent, #74f)",
    nt.linkAccent = "var(--link-accent, #98f)",
    nt.uiWidgetBackground = "var(--ui-widget-background, #444)",
    nt.uiWidgetFocus = "var(--ui-widget-focus, #777)",
    nt.pitchBackground = "var(--pitch-background, #444)",
    nt.tonic = "var(--tonic, #864)",
    nt.fifthNote = "var(--fifth-note, #468)",
    nt.whitePianoKey = "var(--white-piano-key, #bbb)",
    nt.blackPianoKey = "var(--black-piano-key, #444)",
    nt.whitePianoKeyText = "var(--white-piano-key-text, #131200)",
    nt.blackPianoKeyText = "var(--black-piano-key-text, #fff)",
    nt.useColorFormula = "var(--use-color-formula, false)",
    nt.pitchSecondaryChannelHue = "var(--pitch-secondary-channel-hue)",
    nt.pitchSecondaryChannelHueScale = "var(--pitch-secondary-channel-hue-scale)",
    nt.pitchSecondaryChannelSat = "var(--pitch-secondary-channel-sat)",
    nt.pitchSecondaryChannelSatScale = "var(--pitch-secondary-channel-sat-scale)",
    nt.pitchSecondaryChannelLum = "var(--pitch-secondary-channel-lum)",
    nt.pitchSecondaryChannelLumScale = "var(--pitch-secondary-channel-lum-scale)",
    nt.pitchPrimaryChannelHue = "var(--pitch-primary-channel-hue)",
    nt.pitchPrimaryChannelHueScale = "var(--pitch-primary-channel-hue-scale)",
    nt.pitchPrimaryChannelSat = "var(--pitch-primary-channel-sat)",
    nt.pitchPrimaryChannelSatScale = "var(--pitch-primary-channel-sat-scale)",
    nt.pitchPrimaryChannelLum = "var(--pitch-primary-channel-lum)",
    nt.pitchPrimaryChannelLumScale = "var(--pitch-primary-channel-lum-scale)",
    nt.pitchSecondaryNoteHue = "var(--pitch-secondary-note-hue)",
    nt.pitchSecondaryNoteHueScale = "var(--pitch-secondary-note-hue-scale)",
    nt.pitchSecondaryNoteSat = "var(--pitch-secondary-note-sat)",
    nt.pitchSecondaryNoteSatScale = "var(--pitch-secondary-note-sat-scale)",
    nt.pitchSecondaryNoteLum = "var(--pitch-secondary-note-lum)",
    nt.pitchSecondaryNoteLumScale = "var(--pitch-secondary-note-lum-scale)",
    nt.pitchPrimaryNoteHue = "var(--pitch-primary-note-hue)",
    nt.pitchPrimaryNoteHueScale = "var(--pitch-primary-note-hue-scale)",
    nt.pitchPrimaryNoteSat = "var(--pitch-primary-note-sat)",
    nt.pitchPrimaryNoteSatScale = "var(--pitch-primary-note-sat-scale)",
    nt.pitchPrimaryNoteLum = "var(--pitch-primary-note-lum)",
    nt.pitchPrimaryNoteLumScale = "var(--pitch-primary-note-lum-scale)",
    nt.modSecondaryChannelHue = "var(--mod-secondary-channel-hue)",
    nt.modSecondaryChannelHueScale = "var(--mod-secondary-channel-hue-scale)",
    nt.modSecondaryChannelSat = "var(--mod-secondary-channel-sat)",
    nt.modSecondaryChannelSatScale = "var(--mod-secondary-channel-sat-scale)",
    nt.modSecondaryChannelLum = "var(--mod-secondary-channel-lum)",
    nt.modSecondaryChannelLumScale = "var(--mod-secondary-channel-lum-scale)",
    nt.modPrimaryChannelHue = "var(--mod-primary-channel-hue)",
    nt.modPrimaryChannelHueScale = "var(--mod-primary-channel-hue-scale)",
    nt.modPrimaryChannelSat = "var(--mod-primary-channel-sat)",
    nt.modPrimaryChannelSatScale = "var(--mod-primary-channel-sat-scale)",
    nt.modPrimaryChannelLum = "var(--mod-primary-channel-lum)",
    nt.modPrimaryChannelLumScale = "var(--mod-primary-channel-lum-scale)",
    nt.modSecondaryNoteHue = "var(--mod-secondary-note-hue)",
    nt.modSecondaryNoteHueScale = "var(--mod-secondary-note-hue-scale)",
    nt.modSecondaryNoteSat = "var(--mod-secondary-note-sat)",
    nt.modSecondaryNoteSatScale = "var(--mod-secondary-note-sat-scale)",
    nt.modSecondaryNoteLum = "var(--mod-secondary-note-lum)",
    nt.modSecondaryNoteLumScale = "var(--mod-secondary-note-lum-scale)",
    nt.modPrimaryNoteHue = "var(--mod-primary-note-hue)",
    nt.modPrimaryNoteHueScale = "var(--mod-primary-note-hue-scale)",
    nt.modPrimaryNoteSat = "var(--mod-primary-note-sat)",
    nt.modPrimaryNoteSatScale = "var(--mod-primary-note-sat-scale)",
    nt.modPrimaryNoteLum = "var(--mod-primary-note-lum)",
    nt.modPrimaryNoteLumScale = "var(--mod-primary-note-lum-scale)",
    nt.noiseSecondaryChannelHue = "var(--noise-secondary-channel-hue)",
    nt.noiseSecondaryChannelHueScale = "var(--noise-secondary-channel-hue-scale)",
    nt.noiseSecondaryChannelSat = "var(--noise-secondary-channel-sat)",
    nt.noiseSecondaryChannelSatScale = "var(--noise-secondary-channel-sat-scale)",
    nt.noiseSecondaryChannelLum = "var(--noise-secondary-channel-lum)",
    nt.noiseSecondaryChannelLumScale = "var(--noise-secondary-channel-lum-scale)",
    nt.noisePrimaryChannelHue = "var(--noise-primary-channel-hue)",
    nt.noisePrimaryChannelHueScale = "var(--noise-primary-channel-hue-scale)",
    nt.noisePrimaryChannelSat = "var(--noise-primary-channel-sat)",
    nt.noisePrimaryChannelSatScale = "var(--noise-primary-channel-sat-scale)",
    nt.noisePrimaryChannelLum = "var(--noise-primary-channel-lum)",
    nt.noisePrimaryChannelLumScale = "var(--noise-primary-channel-lum-scale)",
    nt.noiseSecondaryNoteHue = "var(--noise-secondary-note-hue)",
    nt.noiseSecondaryNoteHueScale = "var(--noise-secondary-note-hue-scale)",
    nt.noiseSecondaryNoteSat = "var(--noise-secondary-note-sat)",
    nt.noiseSecondaryNoteSatScale = "var(--noise-secondary-note-sat-scale)",
    nt.noiseSecondaryNoteLum = "var(--noise-secondary-note-lum)",
    nt.noiseSecondaryNoteLumScale = "var(--noise-secondary-note-lum-scale)",
    nt.noisePrimaryNoteHue = "var(--noise-primary-note-hue)",
    nt.noisePrimaryNoteHueScale = "var(--noise-primary-note-hue-scale)",
    nt.noisePrimaryNoteSat = "var(--noise-primary-note-sat)",
    nt.noisePrimaryNoteSatScale = "var(--noise-primary-note-sat-scale)",
    nt.noisePrimaryNoteLum = "var(--noise-primary-note-lum)",
    nt.noisePrimaryNoteLumScale = "var(--noise-primary-note-lum-scale)",
    nt.trackEditorBgPitch = "var(--track-editor-bg-pitch, #444)",
    nt.trackEditorBgPitchDim = "var(--track-editor-bg-pitch-dim, #333)",
    nt.trackEditorBgNoise = "var(--track-editor-bg-noise, #444)",
    nt.trackEditorBgNoiseDim = "var(--track-editor-bg-noise-dim, #333)",
    nt.trackEditorBgMod = "var(--track-editor-bg-mod, #234)",
    nt.trackEditorBgModDim = "var(--track-editor-bg-mod-dim, #123)",
    nt.multiplicativeModSlider = "var(--multiplicative-mod-slider, #456;)",
    nt.overwritingModSlider = "var(--overwriting-mod-slider, #654)",
    nt.indicatorPrimary = "var(--indicator-primary, #74f)",
    nt.indicatorSecondary = "var(--indicator-secondary, #444)",
    nt.select2OptGroup = "var(--select2-opt-group, #585858)",
    nt.inputBoxOutline = "var(--input-box-outline, #333)",
    nt.muteButtonNormal = "var(--mute-button-normal, #ffa033)",
    nt.muteButtonMod = "var(--mute-button-mod, #9a6bff)",
    nt.modLabelPrimary = "var(--mod-label-primary, #999)",
    nt.modLabelSecondaryText = "var(--mod-label-secondary-text, #333)",
    nt.modLabelPrimaryText = "var(--mod-label-primary-text, black)",
    nt.disabledNotePrimary = "var(--disabled-note-primary, #999)",
    nt.disabledNoteSecondary = "var(--disabled-note-secondary, #666)",
    nt.c_pitchSecondaryChannelHue = 0,
    nt.c_pitchSecondaryChannelHueScale = 0,
    nt.c_pitchSecondaryChannelSat = 0,
    nt.c_pitchSecondaryChannelSatScale = 0,
    nt.c_pitchSecondaryChannelLum = 0,
    nt.c_pitchSecondaryChannelLumScale = 0,
    nt.c_pitchPrimaryChannelHue = 0,
    nt.c_pitchPrimaryChannelHueScale = 0,
    nt.c_pitchPrimaryChannelSat = 0,
    nt.c_pitchPrimaryChannelSatScale = 0,
    nt.c_pitchPrimaryChannelLum = 0,
    nt.c_pitchPrimaryChannelLumScale = 0,
    nt.c_pitchSecondaryNoteHue = 0,
    nt.c_pitchSecondaryNoteHueScale = 0,
    nt.c_pitchSecondaryNoteSat = 0,
    nt.c_pitchSecondaryNoteSatScale = 0,
    nt.c_pitchSecondaryNoteLum = 0,
    nt.c_pitchSecondaryNoteLumScale = 0,
    nt.c_pitchPrimaryNoteHue = 0,
    nt.c_pitchPrimaryNoteHueScale = 0,
    nt.c_pitchPrimaryNoteSat = 0,
    nt.c_pitchPrimaryNoteSatScale = 0,
    nt.c_pitchPrimaryNoteLum = 0,
    nt.c_pitchPrimaryNoteLumScale = 0,
    nt.c_modSecondaryChannelHue = 0,
    nt.c_modSecondaryChannelHueScale = 0,
    nt.c_modSecondaryChannelSat = 0,
    nt.c_modSecondaryChannelSatScale = 0,
    nt.c_modSecondaryChannelLum = 0,
    nt.c_modSecondaryChannelLumScale = 0,
    nt.c_modPrimaryChannelHue = 0,
    nt.c_modPrimaryChannelHueScale = 0,
    nt.c_modPrimaryChannelSat = 0,
    nt.c_modPrimaryChannelSatScale = 0,
    nt.c_modPrimaryChannelLum = 0,
    nt.c_modPrimaryChannelLumScale = 0,
    nt.c_modSecondaryNoteHue = 0,
    nt.c_modSecondaryNoteHueScale = 0,
    nt.c_modSecondaryNoteSat = 0,
    nt.c_modSecondaryNoteSatScale = 0,
    nt.c_modSecondaryNoteLum = 0,
    nt.c_modSecondaryNoteLumScale = 0,
    nt.c_modPrimaryNoteHue = 0,
    nt.c_modPrimaryNoteHueScale = 0,
    nt.c_modPrimaryNoteSat = 0,
    nt.c_modPrimaryNoteSatScale = 0,
    nt.c_modPrimaryNoteLum = 0,
    nt.c_modPrimaryNoteLumScale = 0,
    nt.c_noiseSecondaryChannelHue = 0,
    nt.c_noiseSecondaryChannelHueScale = 0,
    nt.c_noiseSecondaryChannelSat = 0,
    nt.c_noiseSecondaryChannelSatScale = 0,
    nt.c_noiseSecondaryChannelLum = 0,
    nt.c_noiseSecondaryChannelLumScale = 0,
    nt.c_noisePrimaryChannelHue = 0,
    nt.c_noisePrimaryChannelHueScale = 0,
    nt.c_noisePrimaryChannelSat = 0,
    nt.c_noisePrimaryChannelSatScale = 0,
    nt.c_noisePrimaryChannelLum = 0,
    nt.c_noisePrimaryChannelLumScale = 0,
    nt.c_noiseSecondaryNoteHue = 0,
    nt.c_noiseSecondaryNoteHueScale = 0,
    nt.c_noiseSecondaryNoteSat = 0,
    nt.c_noiseSecondaryNoteSatScale = 0,
    nt.c_noiseSecondaryNoteLum = 0,
    nt.c_noiseSecondaryNoteLumScale = 0,
    nt.c_noisePrimaryNoteHue = 0,
    nt.c_noisePrimaryNoteHueScale = 0,
    nt.c_noisePrimaryNoteSat = 0,
    nt.c_noisePrimaryNoteSatScale = 0,
    nt.c_noisePrimaryNoteLum = 0,
    nt.c_noisePrimaryNoteLumScale = 0,
    nt.c_pitchChannelCountOverride = 40,
    nt.c_noiseChannelCountOverride = 16,
    nt.c_modChannelCountOverride = 12,
    nt.c_invertedText = "",
    nt.c_trackEditorBgNoiseDim = "",
    nt.c_trackEditorBgNoise = "",
    nt.c_trackEditorBgModDim = "",
    nt.c_trackEditorBgMod = "",
    nt.c_trackEditorBgPitchDim = "",
    nt.c_trackEditorBgPitch = "",
    nt.pitchChannels = k([{
        name: "pitch1",
        secondaryChannel: "var(--pitch1-secondary-channel, #0099A1)",
        primaryChannel: "var(--pitch1-primary-channel, #25F3FF)",
        secondaryNote: "var(--pitch1-secondary-note, #00BDC7)",
        primaryNote: "var(--pitch1-primary-note, #92F9FF)"
    }, {
        name: "pitch2",
        secondaryChannel: "var(--pitch2-secondary-channel, #A1A100)",
        primaryChannel: "var(--pitch2-primary-channel, #FFFF25)",
        secondaryNote: "var(--pitch2-secondary-note, #C7C700)",
        primaryNote: "var(--pitch2-primary-note, #FFFF92)"
    }, {
        name: "pitch3",
        secondaryChannel: "var(--pitch3-secondary-channel, #C75000)",
        primaryChannel: "var(--pitch3-primary-channel, #FF9752)",
        secondaryNote: "var(--pitch3-secondary-note, #FF771C)",
        primaryNote: "var(--pitch3-primary-note, #FFCDAB)"
    }, {
        name: "pitch4",
        secondaryChannel: "var(--pitch4-secondary-channel, #00A100)",
        primaryChannel: "var(--pitch4-primary-channel, #50FF50)",
        secondaryNote: "var(--pitch4-secondary-note, #00C700)",
        primaryNote: "var(--pitch4-primary-note, #A0FFA0)"
    }, {
        name: "pitch5",
        secondaryChannel: "var(--pitch5-secondary-channel, #D020D0)",
        primaryChannel: "var(--pitch5-primary-channel, #FF90FF)",
        secondaryNote: "var(--pitch5-secondary-note, #E040E0)",
        primaryNote: "var(--pitch5-primary-note, #FFC0FF)"
    }, {
        name: "pitch6",
        secondaryChannel: "var(--pitch6-secondary-channel, #7777B0)",
        primaryChannel: "var(--pitch6-primary-channel, #A0A0FF)",
        secondaryNote: "var(--pitch6-secondary-note, #8888D0)",
        primaryNote: "var(--pitch6-primary-note, #D0D0FF)"
    }, {
        name: "pitch7",
        secondaryChannel: "var(--pitch7-secondary-channel, #8AA100)",
        primaryChannel: "var(--pitch7-primary-channel, #DEFF25)",
        secondaryNote: "var(--pitch7-secondary-note, #AAC700)",
        primaryNote: "var(--pitch7-primary-note, #E6FF92)"
    }, {
        name: "pitch8",
        secondaryChannel: "var(--pitch8-secondary-channel, #DF0019)",
        primaryChannel: "var(--pitch8-primary-channel, #FF98A4)",
        secondaryNote: "var(--pitch8-secondary-note, #FF4E63)",
        primaryNote: "var(--pitch8-primary-note, #FFB2BB)"
    }, {
        name: "pitch9",
        secondaryChannel: "var(--pitch9-secondary-channel, #00A170)",
        primaryChannel: "var(--pitch9-primary-channel, #50FFC9)",
        secondaryNote: "var(--pitch9-secondary-note, #00C78A)",
        primaryNote: "var(--pitch9-primary-note, #83FFD9)"
    }, {
        name: "pitch10",
        secondaryChannel: "var(--pitch10-secondary-channel, #A11FFF)",
        primaryChannel: "var(--pitch10-primary-channel, #CE8BFF)",
        secondaryNote: "var(--pitch10-secondary-note, #B757FF)",
        primaryNote: "var(--pitch10-primary-note, #DFACFF)"
    }]),
    nt.noiseChannels = k([{
        name: "noise1",
        secondaryChannel: "var(--noise1-secondary-channel, #6F6F6F)",
        primaryChannel: "var(--noise1-primary-channel, #AAAAAA)",
        secondaryNote: "var(--noise1-secondary-note, #A7A7A7)",
        primaryNote: "var(--noise1-primary-note, #E0E0E0)"
    }, {
        name: "noise2",
        secondaryChannel: "var(--noise2-secondary-channel, #996633)",
        primaryChannel: "var(--noise2-primary-channel, #DDAA77)",
        secondaryNote: "var(--noise2-secondary-note, #CC9966)",
        primaryNote: "var(--noise2-primary-note, #F0D0BB)"
    }, {
        name: "noise3",
        secondaryChannel: "var(--noise3-secondary-channel, #4A6D8F)",
        primaryChannel: "var(--noise3-primary-channel, #77AADD)",
        secondaryNote: "var(--noise3-secondary-note, #6F9FCF)",
        primaryNote: "var(--noise3-primary-note, #BBD7FF)"
    }, {
        name: "noise4",
        secondaryChannel: "var(--noise4-secondary-channel, #7A4F9A)",
        primaryChannel: "var(--noise4-primary-channel, #AF82D2)",
        secondaryNote: "var(--noise4-secondary-note, #9E71C1)",
        primaryNote: "var(--noise4-primary-note, #D4C1EA)"
    }, {
        name: "noise5",
        secondaryChannel: "var(--noise5-secondary-channel, #607837)",
        primaryChannel: "var(--noise5-primary-channel, #A2BB77)",
        secondaryNote: "var(--noise5-secondary-note, #91AA66)",
        primaryNote: "var(--noise5-primary-note, #C5E2B2)"
    }]),
    nt.modChannels = k([{
        name: "mod1",
        secondaryChannel: "var(--mod1-secondary-channel, #339955)",
        primaryChannel: "var(--mod1-primary-channel, #77fc55)",
        secondaryNote: "var(--mod1-secondary-note, #77ff8a)",
        primaryNote: "var(--mod1-primary-note, #cdffee)"
    }, {
        name: "mod2",
        secondaryChannel: "var(--mod2-secondary-channel, #993355)",
        primaryChannel: "var(--mod2-primary-channel, #f04960)",
        secondaryNote: "var(--mod2-secondary-note, #f057a0)",
        primaryNote: "var(--mod2-primary-note, #ffb8de)"
    }, {
        name: "mod3",
        secondaryChannel: "var(--mod3-secondary-channel, #553399)",
        primaryChannel: "var(--mod3-primary-channel, #8855fc)",
        secondaryNote: "var(--mod3-secondary-note, #aa64ff)",
        primaryNote: "var(--mod3-primary-note, #f8ddff)"
    }, {
        name: "mod4",
        secondaryChannel: "var(--mod4-secondary-channel, #a86436)",
        primaryChannel: "var(--mod4-primary-channel, #c8a825)",
        secondaryNote: "var(--mod4-secondary-note, #e8ba46)",
        primaryNote: "var(--mod4-primary-note, #fff6d3)"
    }]),
    nt.l = document.head.appendChild(J.style({
        type: "text/css"
    }));
    const st = document.body.appendChild(J.div({
        style: "width:30px; height:30px; overflow: auto;"
    }, J.div({
        style: "width:100%;height:40px"
    })));
    st.firstChild.clientWidth < 30 && document.documentElement.classList.add("obtrusive-scrollbars"),
    document.body.removeChild(st),
    document.head.appendChild(J.style({
        type: "text/css"
    }, `\n\n/* Note: "#" symbols need to be encoded as "%23" in SVG data urls, otherwise they are interpreted as fragment identifiers! */\n:root {\n\t--button-size: 26px;\n\t--settings-area-width: 192px;\n\t--internal-play-symbol: var(--play-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -5 -8 L -5 8 L 8 0 z" fill="gray"/></svg>'));\n\t--internal-pause-symbol: var(--pause-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-5" y="-7" width="4" height="14" fill="gray"/><rect x="3" y="-7" width="4" height="14" fill="gray"/></svg>'));\n\t--internal-record-symbol: var(--record-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><circle cx="0" cy="0" r="6" fill="gray"/></svg>'));\n\t--internal-stop-symbol: var(--stop-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-6" y="-6" width="12" height="12" fill="gray"/></svg>'));\n\t--internal-prev-bar-symbol: var(--prev-bar-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="-6" y="-6" width="2" height="12" fill="gray"/><path d="M 6 -6 L 6 6 L -3 0 z" fill="gray"/></svg>'));\n\t--internal-next-bar-symbol: var(--next-bar-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><rect x="4" y="-6" width="2" height="12" fill="gray"/><path d="M -6 -6 L -6 6 L 3 0 z" fill="gray"/></svg>'));\n\t--internal-volume-symbol: var(--volume-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z" fill="gray"/></svg>'));\n\t--internal-unmuted-symbol: var(--unmuted-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="3 3 20 20"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z" fill="gray"/></svg>'));\n\t--internal-muted-symbol: var(--muted-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="3 3 20 20"><path d="M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z" fill="gray"/></svg>'));\n\t--internal-menu-down-symbol: var(--menu-down-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -4 -2 L 4 -2 L 0 3 z" fill="gray"/></svg>'));\n\t--internal-select-arrows-symbol: var(--select-arrows-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M -4 -3 L 4 -3 L 0 -8 z M -4 3 L 4 3 L 0 8 z" fill="gray"/></svg>'));\n\t--internal-file-page-symbol: var(--file-page-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 2 0 L 2 -16 L 10 -16 L 14 -12 L 14 0 z M 3 -1 L 13 -1 L 13 -11 L 9 -11 L 9 -15 L 3 -15 z" fill="gray"/></svg>'));\n\t--internal-edit-pencil-symbol: var(--edit-pencil-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 0 0 L 1 -4 L 4 -1 z M 2 -5 L 10 -13 L 13 -10 L 5 -2 zM 11 -14 L 13 -16 L 14 -16 L 16 -14 L 16 -13 L 14 -11 z" fill="gray"/></svg>'));\n\t--internal-preferences-gear-symbol: var(--preferences-gear-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path d="M 5.78 -1.6 L 7.93 -0.94 L 7.93 0.94 L 5.78 1.6 L 4.85 3.53 L 5.68 5.61 L 4.21 6.78 L 2.36 5.52 L 0.27 5.99 L -0.85 7.94 L -2.68 7.52 L -2.84 5.28 L -4.52 3.95 L -6.73 4.28 L -7.55 2.59 L -5.9 1.07 L -5.9 -1.07 L -7.55 -2.59 L -6.73 -4.28 L -4.52 -3.95 L -2.84 -5.28 L -2.68 -7.52 L -0.85 -7.94 L 0.27 -5.99 L 2.36 -5.52 L 4.21 -6.78 L 5.68 -5.61 L 4.85 -3.53 M 2.92 0.67 L 2.92 -0.67 L 2.35 -1.87 L 1.3 -2.7 L 0 -3 L -1.3 -2.7 L -2.35 -1.87 L -2.92 -0.67 L -2.92 0.67 L -2.35 1.87 L -1.3 2.7 L -0 3 L 1.3 2.7 L 2.35 1.87 z" fill="gray"/></svg>'));\n\t--internal-customize-dial-symbol: var(--customize-dial-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"> \t\t\t<g transform="translate(0,1)" fill="gray"> \t\t\t\t<circle cx="0" cy="0" r="6.5" stroke="gray" stroke-width="1" fill="none"/> \t\t\t\t<rect x="-1" y="-5" width="2" height="4" transform="rotate(30)"/> \t\t\t\t<circle cx="-7.79" cy="4.5" r="0.75"/> \t\t\t\t<circle cx="-9" cy="0" r="0.75"/> \t\t\t\t<circle cx="-7.79" cy="-4.5" r="0.75"/> \t\t\t\t<circle cx="-4.5" cy="-7.79" r="0.75"/> \t\t\t\t<circle cx="0" cy="-9" r="0.75"/> \t\t\t\t<circle cx="4.5" cy="-7.79" r="0.75"/> \t\t\t\t<circle cx="7.79" cy="-4.5" r="0.75"/> \t\t\t\t<circle cx="9" cy="0" r="0.75"/> \t\t\t\t<circle cx="7.79" cy="4.5" r="0.75"/> \t\t\t</g> \t\t</svg>'));\n\t--internal-instrument-copy-symbol: var(--instrument-copy-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-5 -21 26 26"><path d="M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z" fill="currentColor"></path></svg>'));\n\t--internal-instrument-paste-symbol: var(--instrument-paste-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z" stroke="currentColor" fill="none"></path><path d="M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z" fill="currentColor"></path></svg>'));\n\t--internal-export-symbol: var(--export-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -8 3 L -8 8 L 8 8 L 8 3 L 6 3 L 6 6 L -6 6 L -6 3 z M 0 2 L -4 -2 L -1 -2 L -1 -8 L 1 -8 L 1 -2 L 4 -2 z"/></svg>'));\n\t--internal-close-symbol: var(--close-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -7.07 -5.66 L -5.66 -7.07 L 0 -1.4 L 5.66 -7.07 L 7.07 -5.66 L 1.4 0 L 7.07 5.66 L 5.66 7.07 L 0 1.4 L -5.66 7.07 L -7.07 5.66 L -1.4 0 z"/></svg>'));\n\t--internal-add-symbol: var(--add-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -8 -1 L -1 -1 L -1 -8  L 1 -8 L 1 -1 L 8 -1 L 8 1 L 1 1 L 1 8 L -1 8 L -1 1 L -8 1 z"/></svg>'));\n\t--internal-zoom-in-symbol: var(--zoom-in-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="-10 -10 20 20"><circle cx="-1" cy="-1" r="6" stroke-width="2" stroke="gray" fill="none"></circle><path stroke="gray" stroke-width="2" d="M 3 3 L 7 7 M -1 -4 L -1 2 M -4 -1 L 2 -1" fill="none"></path></svg>'));\n\t--internal-zoom-out-symbol: var(--zoom-out-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="-10 -10 20 20"><circle cx="-1" cy="-1" r="6" stroke-width="2" stroke="gray" fill="none"></circle><path stroke="gray" stroke-width="2" d="M 3 3 L 7 7 M -4 -1 L 2 -1" fill="none"></path></svg>'));\n\t--internal-checkmark-symbol: var(--checkmark-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="-13 -13 26 26"><path fill="gray" d="M -9 -2 L -8 -3 L -3 2 L 9 -8 L 10 -7 L -3 8 z"/></svg>'));\n\t--internal-drum-symbol: var(--drum-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 32 40"> \t\t\t<defs> \t\t\t\t<linearGradient id="gold1" x1="0%" y1="0%" x2="100%" y2="0%"> \t\t\t\t\t<stop offset="0%" stop-color="%237e3302"/> \t\t\t\t\t<stop offset="40%" stop-color="%23ffec6b"/> \t\t\t\t\t<stop offset="100%" stop-color="%237e3302"/> \t\t\t\t</linearGradient> \t\t\t\t<linearGradient id="gold2" x1="0%" y1="0%" x2="100%" y2="0%"> \t\t\t\t\t<stop offset="0%" stop-color="%23faaf7d"/> \t\t\t\t\t<stop offset="15%" stop-color="%23fffba9"/> \t\t\t\t\t<stop offset="40%" stop-color="%23ffffe3"/> \t\t\t\t\t<stop offset="65%" stop-color="%23fffba9"/> \t\t\t\t\t<stop offset="100%" stop-color="%23faaf7d"/> \t\t\t\t</linearGradient> \t\t\t\t<radialGradient id="gold3" cx="0%" cy="0%" r="100%"> \t\t\t\t\t<stop offset="0%" stop-color="%23ffffe3"/> \t\t\t\t\t<stop offset="50%" stop-color="%23ffec6b"/> \t\t\t\t\t<stop offset="100%" stop-color="%237e3302"/> \t\t\t\t</radialGradient> \t\t\t\t<linearGradient id="red" x1="0%" y1="0%" x2="100%" y2="0%"> \t\t\t\t\t<stop offset="0%" stop-color="%23641919"/> \t\t\t\t\t<stop offset="40%" stop-color="%23cd2c2c"/> \t\t\t\t\t<stop offset="100%" stop-color="%23641919"/> \t\t\t\t</linearGradient> \t\t\t\t<radialGradient id="membrane"> \t\t\t\t\t<stop offset="10%" stop-color="%23cccccc" /> \t\t\t\t\t<stop offset="90%" stop-color="%23f6f6f7" /> \t\t\t\t\t<stop offset="100%" stop-color="%23999" /> \t\t\t\t</radialGradient> \t\t\t</defs> \t\t\t<ellipse cx="16" cy="26" rx="16" ry="14" fill="rgba(0,0,0,0.5)"/> \t\t\t<ellipse cx="16" cy="25" rx="16" ry="14" fill="url(%23gold1)"/> \t\t\t<rect x="0" y="23" width="32" height="2" fill="url(%23gold1)"/> \t\t\t<ellipse cx="16" cy="23" rx="16" ry="14" fill="url(%23gold2)"/> \t\t\t<ellipse cx="16" cy="23" rx="15" ry="13" fill="url(%23red)"/> \t\t\t<rect x="1" y="17" width="30" height="6" fill="url(%23red)"/> \t\t\t<rect x="5" y="27" width="1" height="5" rx="0.5" fill="rgba(0,0,0,0.5)"/> \t\t\t<rect x="15" y="31" width="2" height="5" rx="1" fill="rgba(0,0,0,0.5)"/> \t\t\t<rect x="26" y="27" width="1" height="5" rx="0.5" fill="rgba(0,0,0,0.5)"/> \t\t\t<rect x="5" y="26" width="1" height="5" rx="0.5" fill="url(%23gold3)"/> \t\t\t<rect x="15" y="30" width="2" height="5" rx="1" fill="url(%23gold3)"/> \t\t\t<rect x="26" y="26" width="1" height="5" rx="0.5" fill="url(%23gold3)"/> \t\t\t<ellipse cx="16" cy="18" rx="15" ry="13" fill="rgba(0,0,0,0.5)"/> \t\t\t<ellipse cx="16" cy="16" rx="16" ry="14" fill="url(%23gold1)"/> \t\t\t<rect x="0" y="14" width="32" height="2" fill="url(%23gold1)"/> \t\t\t<ellipse cx="16" cy="14" rx="16" ry="14" fill="url(%23gold2)"/> \t\t\t<ellipse cx="16" cy="14" rx="15" ry="13" fill="url(%23membrane)"/> \t\t</svg>'));\n\t--internal-piano-key-symbol: var(--piano-key-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="15" preserveAspectRatio="none" viewBox="0 -1 32 15"> \t\t\t<defs> \t\t\t\t<linearGradient id="shadow" x1="0%" y1="0%" x2="100%" y2="0%"> \t\t\t\t\t<stop offset="0%" stop-color="rgba(0,0,0,0.5)"/> \t\t\t\t\t<stop offset="100%" stop-color="transparent"/> \t\t\t\t</linearGradient> \t\t\t</defs> \t\t\t<rect x="-1" y="1" width="31" height="1" rx="0.6" fill="rgba(255,255,255,0.4)"/> \t\t\t<path d="M -1 11 L 30 11 L 30 2 L 33 -1 L 33 14 L -1 14 z" fill="rgba(0,0,0,0.7)"/> \t\t\t<rect x="-1" y="-1" width="19" height="15" fill="url(%23shadow)"/> \t\t</svg>'));\n  --internal-mod-key-symbol: var(--mod-key-symbol, url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="80" preserveAspectRatio="none" viewBox="0 -1 32 80"> \t\t\t<defs> \t\t\t\t<linearGradient id="shadow" x1="0%" y1="0%" x2="100%" y2="0%"> \t\t\t\t\t<stop offset="0%" stop-color="rgba(0,0,0,0.4)"/> \t\t\t\t\t<stop offset="100%" stop-color="transparent"/> \t\t\t\t</linearGradient> \t\t\t</defs> \t\t\t<rect x="-1" y="1" width="31" height="1" rx="0.6" fill="rgba(255,255,255,0.2)"/> \t\t\t<path d="M -1 76 L 30 76 L 30 1 L 33 -1 L 33 80 L -1 80 z" fill="rgba(0,0,0,0.7)"/> \t\t\t<rect x="-1" y="-1" width="19" height="80" fill="url(%23shadow)"/> \t\t</svg>'));\n}\n\n\nhtml {\n\tscrollbar-color: var(--scrollbar-color, ${nt.uiWidgetBackground}) var(--scrollbar-background, ${nt.editorBackground});\n}\n\n.obtrusive-scrollbars, .obtrusive-scrollbars * {\n\tscrollbar-width: thin;\n}\n.obtrusive-scrollbars::-webkit-scrollbar, .obtrusive-scrollbars *::-webkit-scrollbar {\n\twidth: 12px;\n}\n.obtrusive-scrollbars::-webkit-scrollbar-track, .obtrusive-scrollbars *::-webkit-scrollbar-track {\n\tbackground: ${nt.editorBackground};\n}\n.obtrusive-scrollbars::-webkit-scrollbar-thumb, .obtrusive-scrollbars *::-webkit-scrollbar-thumb {\n\tbackground-color: ${nt.uiWidgetBackground};\n\tborder: 3px solid ${nt.editorBackground};\n}\n\n.beepboxEditor {\n\tdisplay: grid;\n    grid-template-columns: minmax(0, 1fr) max-content;\n    grid-template-rows: max-content 1fr; /* max-content minmax(0, 1fr); Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */\n    grid-template-areas: "pattern-area settings-area" "track-area settings-area";\n\tgrid-column-gap: 6px;\n\tgrid-row-gap: 6px;\n\tposition: relative;\n\ttouch-action: manipulation;\n\tcursor: default;\n\tfont-size: 13px;\n\toverflow: hidden;\n\tcolor: ${nt.primaryText};\n\tbackground: ${nt.editorBackground};\n    opacity: 0;\n    -webkit-transition: opacity 0.2s ease-in;\n    -moz-transition: opacity 0.2s ease-in;\n    -o-transition: opacity 0.2s ease-in;\n    -ms-transition: opacity 0.2s ease-in;\n    transition: opacity 0.2s ease-in;\n    transition-delay: 0s;\n}\n\n.beepboxEditor .operatorRow {\n\tmargin: 2px 0;\n\theight: 2em;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n}\n\n.beepboxEditor .operatorRow > * {\n\tflex-grow: 1;\n\tflex-shrink: 1;\n}\n\n.pattern-area {\n     opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0s;\n}\n\n.settings-area {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.15s;\n}\n\n.editor-song-settings {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.35s;\n}\n\n.instrument-settings-area {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.45s;\n}\n\n.trackAndMuteContainer {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.4s;\n}\n\n.barScrollBar {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.5s;\n}\n\n\n\n.load {\n    opacity: 1;\n}\n\n.beepboxEditor .noSelection {\n\t-webkit-touch-callout: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n}\n\n.beepboxEditor div {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n.beepboxEditor .pattern-area {\n\tgrid-area: pattern-area;\n\theight: 481px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tposition: relative;\n}\n\n.beepboxEditor .track-area {\n\tgrid-area: track-area;\n\tbackground-image: url(${l("customTheme2", "")});\n}\n\n.beepboxEditor .loopEditor {\n\theight: 20px;\n\tposition: sticky;\n\tbottom: 0;\n\tpadding: 5px 0;\n\tbackground-color: ${nt.editorBackground};\n}\n\n.beepboxEditor .settings-area {\n\tgrid-area: settings-area;\n\tdisplay: grid;\n    grid-template-columns: auto;\n    grid-template-rows: min-content min-content min-content min-content min-content;\n    grid-template-areas: "version-area" "play-pause-area" "menu-area" "song-settings-area" "instrument-settings-area";\n\tgrid-column-gap: 6px;\n}\n\n.beepboxEditor .version-area{ grid-area: version-area; }\n.beepboxEditor .play-pause-area{ grid-area: play-pause-area; }\n.beepboxEditor .menu-area{ grid-area: menu-area; }\n.beepboxEditor .song-settings-area{ grid-area: song-settings-area; }\n.beepboxEditor .instrument-settings-area{ grid-area: instrument-settings-area; }\n\n.beepboxEditor .tip {\n\tcursor: help;\n\tcolor: ${nt.secondaryText};\n\ttext-decoration: none;\n}\n\n.beepboxEditor .tip:hover {\n\tcolor: ${nt.linkAccent};\n\ttext-decoration: underline;\n}\n.beepboxEditor .tip:active {\n\tcolor: ${nt.primaryText};\n}\n\n.beepboxEditor .volume-speaker {\n\tflex-shrink: 0;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: ${nt.secondaryText};\n\t-webkit-mask-image: var(--internal-volume-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-volume-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .drum-button {\n\tflex: 1;\n\tbackground-color: transparent;\n\tbackground-image: var(--internal-drum-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n}\n\n.beepboxEditor .modulator-button {\n\tflex: 1;\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n}\n.beepboxEditor .modulator-button::before {\n\tcontent: "";\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground-image: var(--internal-mod-key-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n\tbackground-size: 100% 102%;\n}\n\n.beepboxEditor .piano-button {\n\tflex: 1;\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n}\n.beepboxEditor .piano-button::before {\n\tcontent: "";\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground-image: var(--internal-piano-key-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n\tbackground-size: 100% 115.38%;\n}\n.beepboxEditor .piano-button.disabled::after {\n\tcontent: "";\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n\twidth: 70%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground: ${nt.editorBackground};\n\t-webkit-mask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .piano-button.pressed, .beepboxEditor .drum-button.pressed {\n\tfilter: brightness(0.5);\n}\n\n.beepboxEditor .customize-instrument {\n\tmargin: 2px 0;\n}\n.beepboxEditor .customize-instrument::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-customize-dial-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-customize-dial-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .instrumentCopyPasteRow {\n\tgap: 2px;\n}\n\n.beepboxEditor .copy-instrument {\n\tmargin: 2px 0;\n\tflex-grow: 1;\n}\n.beepboxEditor .copy-instrument::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-instrument-copy-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-instrument-copy-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .paste-instrument {\n\tmargin: 2px 0;\n\tflex-grow: 1;\n}\n.beepboxEditor .paste-instrument::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-instrument-paste-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-instrument-paste-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .envelopeEditor {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .envelope-row {\n\tdisplay: flex;\n\tmargin: 2px 0;\n\tgap: 2px;\n}\n\n.beepboxEditor .add-envelope {\n\twidth: var(--button-size);\n}\n.beepboxEditor .add-envelope::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-add-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-add-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .add-envelope:disabled {\n\tvisibility: hidden;\n}\n\n.beepboxEditor .effects-menu {\n\twidth: var(--button-size);\n\tposition: relative;\n}\n.beepboxEditor .effects-menu::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-menu-down-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-menu-down-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .zoomInButton, .beepboxEditor .zoomOutButton {\n\twidth: var(--button-size);\n\tposition: absolute;\n\tright: 10px;\n}\n.beepboxEditor .zoomInButton {\n\ttop: 10px;\n}\n.beepboxEditor .zoomOutButton {\n\ttop: 50px;\n}\n.beepboxEditor .zoomInButton::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-zoom-in-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-zoom-in-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .zoomOutButton::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-zoom-out-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-zoom-out-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .delete-envelope {\n\twidth: var(--button-size);\n\tflex-shrink: 0;\n\tflex-grow: 0;\n}\n.beepboxEditor .delete-envelope::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .delete-envelope:disabled {\n\tvisibility: hidden;\n}\n\n.beepboxEditor .menu.file::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-file-page-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-file-page-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .menu.edit::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-edit-pencil-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-edit-pencil-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .menu.preferences::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-preferences-gear-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-preferences-gear-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .mute-button {\n\tbackground: transparent;\n\tborder: none;\n  padding-right: 0px;\n  padding-left: 0px;\n  box-shadow: none;\n}\n\n.beepboxEditor .mute-button:focus {\n  background: transparent;\n\tborder: none;\n}\n\n.beepboxEditor .mute-button::before {\n\tcontent: "";\n\tpointer-events: none;\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: inline-block;\n  background: var(--mute-button-normal);\n\t-webkit-mask-image: var(--internal-unmuted-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\t-webkit-mask-size: cover;\n  mask-repeat: no-repeat;\n\tmask-position: center;\n\tmask-size: cover;\n  mask-image: var(--internal-unmuted-symbol);\n}\n\n.beepboxEditor .mute-button.muted::before {\n  background: var(--ui-widget-background);\n\t-webkit-mask-image: var(--internal-muted-symbol);\n  mask-image: var(--internal-muted-symbol);\n}\n\n.beepboxEditor .mute-button.modMute.muted::before {\n  background: var(--ui-widget-background);\n\t-webkit-mask-image: var(--internal-muted-symbol);\n  mask-image: var(--internal-muted-symbol);\n}\n\n.beepboxEditor .mute-button.modMute::before {\n  background: var(--mute-button-mod);\n}\n\n\n.beepboxEditor .promptContainer {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tz-index: 100;\n}\n\n.beepboxEditor .prompt {\n\tmargin: auto;\n\ttext-align: center;\n\tbackground: ${nt.editorBackground};\n\tborder-radius: 15px;\n\tborder: 4px solid ${nt.uiWidgetBackground};\n\tcolor: ${nt.primaryText};\n\tpadding: 20px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: relative;\n\tbox-shadow: 5px 5px 20px 10px rgba(0,0,0,0.5);\n}\n\n.beepboxEditor .prompt > *:not(:first-child):not(.cancelButton) {\n\tmargin-top: 1.5em;\n}\n\n.beepboxEditor .prompt h2 {\n\tfont-size: 2em;\n\tmargin: 0 16px;\n\tfont-weight: normal;\n}\n\n.beepboxEditor .prompt p {\n\ttext-align: left;\n\tmargin: 1em 0;\n}\n\n.beepboxEditor .prompt label {\n\tcursor: pointer;\n}\n\n.beepboxEditor .prompt.recordingSetupPrompt p {\n\tmargin-top: 0.75em;\n\tmargin-bottom: 0;\n}\n\n.beepboxEditor .prompt.recordingSetupPrompt > label:not(:first-child):not(.cancelButton) {\n\tmargin: 2px 0;\n}\n\n.beepboxEditor .layout-option {\n\tdisplay: flex;\n\tflex-direction: column;\n\tcursor: pointer;\n\tcolor: ${nt.secondaryText};\n\twidth: 25%;\n}\n\n.beepboxEditor .layout-option input {\n\tdisplay: none;\n}\n\n.beepboxEditor .layout-option input:checked ~ * {\n\tcolor: ${nt.primaryText};\n}\n.beepboxEditor select.invalidSetting {\n\tborder: solid 1px red;\n}\n.beepboxEditor .selectContainer {\n\tposition: relative;\n}\n.beepboxEditor .selectContainer:not(.menu)::after {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: 14px;\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-select-arrows-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-select-arrows-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor .selectContainer.menu::after {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-menu-down-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-menu-down-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor select {\n\tmargin: 0;\n\tpadding: 0 4px;\n\tdisplay: block;\n\theight: var(--button-size);\n\tborder: none;\n\tborder-radius: 5px;\n\tbackground: ${nt.uiWidgetBackground};\n\tcolor: inherit;\n\tfont-size: inherit;\n\tcursor: pointer;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\n\t-webkit-appearance:none;\n\t-moz-appearance: none;\n\tappearance: none;\n}\n.beepboxEditor select option:disabled {\n\tcolor: ${nt.linkAccent};\n\tfont-weight: bold;\n}\n\n.select2-container .select2-selection--single {\n  height: auto;\n}\n\n.select2-container {\n  width: -moz-available !important;\n  width: -webkit-fill-available !important;\n}\n@media (min-width: 711px) {\n\t.select2 {\n\t  width: calc(var(--settings-area-width) * 0.625) !important;\n\t}\n}\n\n.select2-container--default .select2-selection--single{\n  border-radius: 0px;\n  border: 0px;\n  background-color: transparent;\n  outline: none;\n}\n\n.select2-selection__rendered:not(.menu)::before {\n\tcontent: "";\n\tposition: absolute;\n\tright: 0.3em;\n\ttop: 0.4em;\n\tborder-bottom: 0.4em solid currentColor;\n\tborder-left: 0.3em solid transparent;\n\tborder-right: 0.3em solid transparent;\n\tpointer-events: none;\n}\n.select2-selection__rendered:not(.menu)::after {\n\tcontent: "";\n\tposition: absolute;\n\tright: 0.3em;\n\tbottom: 0.4em;\n\tborder-top: 0.4em solid currentColor;\n\tborder-left: 0.3em solid transparent;\n\tborder-right: 0.3em solid transparent;\n\tpointer-events: none;\n}\n.select2-selection__rendered {\n\tmargin: 0;\n\tpadding: 0 0.3em;\n\tdisplay: block;\n\theight: 2em;\n\tborder: none;\n\tborder-radius: 0.4em;\n\tbackground: ${nt.uiWidgetBackground};\n\tcolor: inherit !important;\n\tfont-size: inherit;\n\tcursor: pointer;\n\tfont-family: inherit;\n\t-webkit-appearance:none;\n\t-moz-appearance: none;\n\tappearance: none;\n}\n.select2-selection__arrow b{\n    display:none !important;\n}\n\n.select2-selection__rendered--focus {\n\tbackground: ${nt.uiWidgetFocus};\n\toutline: none;\n}\n.select2-search__field {\n    background: ${nt.uiWidgetBackground};\n    color: inherit !important;\n    font-size: small;\n    font-family: inherit;\n    border: 0px !important;\n    padding: 1px !important;\n}\n.select2-dropdown {\n    box-sizing: border-box;\n    display: inline-block;\n    margin: 0;\n    font-size: small;\n    position: relative;\n    vertical-align: middle;\n    background-color: ${nt.uiWidgetFocus};\n}\n\n.select2-container--default .select2-results>.select2-results__options {\n    max-height: 430px;\n    overflow-x: hidden;\n}\n.select2-container--default .select2-results__group {\n    cursor: default;\n    display: block;\n    padding: 1px;\n    background: ${nt.select2OptGroup};\n}\n.select2-results__option {\n    padding: 2px;\n    user-select: none;\n    -webkit-user-select: none;\n}\n.select2-container--default .select2-results__option .select2-results__option {\n    padding-left: 0.1em;\n}\n.select2-container--default .select2-results__option[aria-selected=true] {\n  background-color: transparent !important;\n}\n\n.select2-results__option--highlighted[aria-selected] {\n\tcolor: white !important;\n}\n\n.beepboxEditor .menu select {\n\tpadding: 0 var(--button-size);\n}\n.beepboxEditor select:focus {\n\tbackground: ${nt.uiWidgetFocus};\n\toutline: none;\n}\n.beepboxEditor .menu select {\n\ttext-align: center;\n\ttext-align-last: center;\n}\n.beepboxEditor .settings-area select {\n       width: 100%;\n}\n\n/* This makes it look better in firefox on my computer... What about others?\n@-moz-document url-prefix() {\n\t.beepboxEditor select { padding: 0 2px; }\n}\n*/\n.beepboxEditor button {\n\tmargin: 0;\n\tposition: relative;\n\theight: var(--button-size);\n\tborder: none;\n\tborder-radius: 5px;\n\tbackground: ${nt.uiWidgetBackground};\n\tcolor: inherit;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\tcursor: pointer;\n}\n.beepboxEditor button:focus {\n\tbackground: ${nt.uiWidgetFocus};\n\toutline: none;\n}\n\n.beepboxEditor button.cancelButton {\n\tfloat: right;\n\twidth: var(--button-size);\n\tposition: absolute;\n\ttop: 8px;\n\tright: 8px;\n}\n\n.beepboxEditor .playback-bar-controls {\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);\n\tgrid-template-rows: min-content;\n\tgrid-column-gap: 4px;\n}\n\n.beepboxEditor button.playButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-play-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-play-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.pauseButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-pause-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-pause-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.recordButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-record-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-record-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.stopButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-stop-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-stop-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.prevBarButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-prev-bar-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-prev-bar-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.nextBarButton::before {\n\tcontent: "";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-next-bar-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-next-bar-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton, .beepboxEditor button.stopButton, .beepboxEditor button.okayButton, .beepboxEditor button.exportButton {\n\tpadding-left: var(--button-size);\n}\n.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton {\n\tgrid-column-start: 1;\n\tgrid-column-end: 3;\n}\n.beepboxEditor button.stopButton {\n\tgrid-column-start: 1;\n\tgrid-column-end: 5;\n}\n.beepboxEditor button.prevBarButton {\n\tgrid-column-start: 3;\n\tgrid-column-end: 4;\n}\n.beepboxEditor button.nextBarButton {\n\tgrid-column-start: 4;\n\tgrid-column-end: 5;\n}\n\n.beepboxEditor button.playButton.shrunk, .beepboxEditor button.recordButton.shrunk {\n\tpadding: 0;\n}\n.beepboxEditor button.playButton.shrunk::before, .beepboxEditor button.recordButton.shrunk::before {\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n}\n.beepboxEditor button.playButton.shrunk span, .beepboxEditor button.recordButton.shrunk span {\n\tdisplay: none;\n}\n.beepboxEditor button.playButton.shrunk {\n\tgrid-column-start: 1;\n\tgrid-column-end: 2;\n}\n.beepboxEditor button.recordButton.shrunk {\n\tgrid-column-start: 2;\n\tgrid-column-end: 3;\n}\n\n.beepboxEditor button.cancelButton::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor button.okayButton::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--internal-checkmark-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--internal-checkmark-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.exportButton::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-export-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-export-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .instrument-bar {\n\tdisplay: flex;\n\tgap: 2px;\n}\n\n.beepboxEditor .instrument-bar button {\n\tflex-grow: 1;\n\tmin-width: 0;\n\tpadding: 0;\n\tflex-basis: 0;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: var(--text-color-lit);\n}\n\n.beepboxEditor .instrument-bar .remove-instrument, .beepboxEditor .instrument-bar .add-instrument {\n\tmax-width: var(--button-size);\n}\n\n.beepboxEditor .instrument-bar > :not(:first-child) {\n\tborder-top-left-radius: 0;\n\tborder-bottom-left-radius: 0;\n}\n\n.beepboxEditor .instrument-bar > :not(.last-button) {\n\tborder-top-right-radius: 0;\n\tborder-bottom-right-radius: 0;\n\tborder-bottom: inset;\n\tborder-color: var(--background-color-dim);\n}\n\n.beepboxEditor .instrument-bar .selected-instrument {\n\tbackground: var(--background-color-lit);\n\tcolor: ${nt.invertedText};\n}\n\n.beepboxEditor .instrument-bar .deactivated {\n\tbackground: ${nt.editorBackground};\n\tcolor: var(--text-color-dim);\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .deactivated.selected-instrument {\n\tbackground: var(--background-color-dim);\n\tcolor: ${nt.invertedText};\n}\n\n.beepboxEditor .instrument-bar .remove-instrument {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .remove-instrument::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: 100%;\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .instrument-bar .add-instrument {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .no-underline {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .add-instrument::before {\n\tcontent: "";\n\tposition: absolute;\n\twidth: 100%;\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--internal-add-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--internal-add-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor canvas {\n\toverflow: hidden;\n\tposition: absolute;\n\tdisplay: block;\n  cursor: crosshair;\n}\n\n@keyframes dash-animation {\n  to {\n    stroke-dashoffset: -100;\n  }\n}\n\n.beepboxEditor .dash-move {\n  animation: dash-animation 20s infinite linear;\n}\n\n.beepboxEditor .trackContainer {\n\tflex-grow: 1;\n}\n\n.beepboxEditor .trackAndMuteContainer {\n\tdisplay: flex;\n\talign-items: flex-start;\n\twidth: 100%;\n\tmin-height: 0;\n\tflex: 1;\n\toverflow-x: hidden;\n\tposition: relative;\n}\n\n.beepboxEditor .channelRow {\n\tdisplay: flex;\n}\n.beepboxEditor .channelBox {\n\tdisplay: flex;\n\ttext-align: center;\n\talign-items: center;\n\tjustify-content: center;\n\tbox-sizing: border-box;\n\tpadding-top: 1px;\n}\n.beepboxEditor .channelBoxLabel {\n\tfont-size: 20px;\n\tfont-family: sans-serif;\n\tfont-weight: bold;\n}\n.beepboxEditor .dropFader {\n\topacity: 0;\n\t-webkit-transition:opacity 0.17s linear;\n    -moz-transition:opacity 0.17s linear;\n    -o-transition:opacity 0.17s linear;\n    -ms-transition:opacity 0.17s linear; \n    transition:opacity 0.17s linear;\n}\n\n.beepboxEditor .muteEditor {\n\twidth: 32px;\n\tflex-shrink: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: stretch;\n\tposition: sticky;\n\tleft: 0;\n\tz-index: 1;\n\tbackground: ${nt.editorBackground};\n}\n\n.beepboxEditor .selectRow, .beepboxEditor .instrumentCopyPasteRow {\n\tmargin: 2px 0;\n\theight: var(--button-size);\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n\n.beepboxEditor .selectRow > :last-child {\n\twidth: 62.5%;\n\tflex-shrink: 0;\n}\n\n.beepboxEditor .menu-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n.beepboxEditor .menu-area > * {\n\tmargin: 2px 0;\n}\n.beepboxEditor .menu-area > button {\n\tpadding: 0 var(--button-size);\n\twhite-space: nowrap;\n}\n\n.beepboxEditor .song-settings-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .editor-controls {\n\tflex-shrink: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .instrument-settings-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .editor-right-side-top > *, .beepboxEditor .editor-right-side-bottom > * {\n\tflex-shrink: 0;\n}\n\n.beepboxEditor .pitchShiftMarkerContainer {\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\theight: 100%;\n\tleft: 3px;\n\tright: 3px;\n\tposition: absolute;\n\talign-items: center;\n\tpointer-events: none;\n}\n\n.beepboxEditor .pitchShiftMarker {\n\twidth: 0;\n\theight: 0;\n\tposition: absolute;\n}\n\n.beepboxEditor .pitchShiftMarker::before {\n\tcontent: "";\n\twidth: 2px;\n\theight: 20px;\n\ttransform: translate(-50%, -50%);\n\tposition: absolute;\n\tbackground: currentColor;\n\tborder-radius: 3px;\n}\n\n.beepboxEditor input[type=text], .beepboxEditor input[type=number] {\n\tfont-size: inherit;\n\tfont-weight: inherit;\n\tfont-family: inherit;\n\tbackground: transparent;\n\ttext-align: center;\n\tborder: 1px solid ${nt.inputBoxOutline};\n\tcolor: ${nt.primaryText};\n}\n\n.beepboxEditor input[type=text]::selection, .beepboxEditor input[type=number]::selection {\n\tbackground-color: ${nt.textSelection};\n\tcolor: ${nt.primaryText};\n}\n\n.beepboxEditor input[type=checkbox] {\n  transform: scale(1.5);\n}\n\n.beepboxEditor input[type=range] {\n\t-webkit-appearance: none;\n\tcolor: inherit;\n\twidth: 100%;\n\theight: var(--button-size);\n\tfont-size: inherit;\n\tmargin: 0;\n\tcursor: pointer;\n\tbackground: none;\n\ttouch-action: pan-y;\n  position: relative;\n}\n.beepboxEditor input[type=range]:focus {\n\toutline: none;\n}\n.beepboxEditor input[type=range]::-webkit-slider-runnable-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${nt.uiWidgetBackground};\n}\n\n.modTarget:hover {\n\tfill: ${nt.hoverPreview} !important;\n}\n\n.beepboxEditor span.midTick:after {\n    content: "";\n    display:inline-block;\n    position: absolute;\n    background: currentColor;\n    width: 2%;\n    left: 49%;\n    height: 0.5em;\n    top: 32%;\n    z-index: 1;\n\t\tpointer-events: none;\n}\n.beepboxEditor span.modSlider {\n\t--mod-position: 20%;\n\t--mod-color: ${nt.overwritingModSlider};\n  --mod-border-radius: 0%;\n}\n.beepboxEditor span.modSlider:before {\n\tcontent: "";\n    display:inline-block;\n    position: absolute;\n    background: var(--mod-color);\n    width: 4%;\n    left: var(--mod-position);\n    height: 0.8em;\n    top: 28%;\n    z-index: 2;\n\t\ttransform: translate(-50%, 0%);\n\t\tpointer-events: none;\n\t\tborder: 40%;\n\t\tborder-radius: var(--mod-border-radius);\n}\n.beepboxEditor input[type=range]::-webkit-slider-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tbackground: currentColor;\n\tcursor: pointer;\n\t-webkit-appearance: none;\n\tmargin-top: -10px;\n}\n.beepboxEditor input[type=range]:focus::-webkit-slider-runnable-track {\n\tbackground: ${nt.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-moz-range-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${nt.uiWidgetBackground};\n}\n.beepboxEditor input[type=range]:focus::-moz-range-track {\n\tbackground: ${nt.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-moz-range-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tborder: none;\n\tbackground: currentColor;\n\tcursor: pointer;\n}\n.beepboxEditor input[type=range]::-ms-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${nt.uiWidgetBackground};\n\tborder-color: transparent;\n}\n.beepboxEditor input[type=range]:focus::-ms-track {\n\tbackground: ${nt.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-ms-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tbackground: currentColor;\n\tcursor: pointer;\n}\n\nli.select2-results__option[role=group] > strong:hover {\n  background-color: #516fbb;\n}\n\n/* wide screen */\n@media (min-width: 711px) {\n\t#beepboxEditorContainer {\n\t\tbackground-image: url(${l("customTheme2", "")});\n\t\tdisplay: table;\n\t}\n\t.beepboxEditor {\n\t\tflex-direction: row;\n\t}\n\t.beepboxEditor:focus-within {\n\t\toutline: 3px solid ${nt.uiWidgetBackground};\n\t}\n\t.beepboxEditor .trackAndMuteContainer {\n\t\twidth: 512px;\n\t}\n\t.beepboxEditor .trackSelectBox {\n\t\tdisplay: none;\n\t}\n    .beepboxEditor .muteButtonSelectBox {\n\t\tdisplay: none;\n\t}\n\t.beepboxEditor .play-pause-area {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t.beepboxEditor .playback-bar-controls {\n\t\tmargin: 2px 0;\n\t}\n\t.beepboxEditor .playback-volume-controls {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin: 2px 0;\n\t\talign-items: center;\n\t}\n\t.beepboxEditor .settings-area {\n\t\twidth: var(--settings-area-width);\n\t}\n}\n\n/* narrow screen */\n@media (max-width: 710px) {\n\t.beepboxEditor {\n\t\tgrid-template-columns: minmax(0, 1fr);\n\t\tgrid-template-rows: min-content 6px min-content min-content;\n\t\tgrid-template-areas: "pattern-area" "." "track-area" "settings-area";\n\t\tgrid-row-gap: 0;\n\t}\n\t.beepboxEditor .settings-area {\n\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\tgrid-template-rows: min-content min-content 1fr min-content;\n\t\tgrid-template-areas:\n\t\t\t"play-pause-area play-pause-area"\n\t\t\t"menu-area instrument-settings-area"\n\t\t\t"song-settings-area instrument-settings-area"\n\t\t\t"version-area version-area";\n\t\tgrid-column-gap: 8px;\n\t\tmargin: 0 4px;\n\t}\n\t.beepboxEditor:focus-within {\n\t\toutline: none;\n\t}\n\t.beepboxEditor .pattern-area {\n\t\tmax-height: 75vh;\n\t}\n\t.beepboxEditor .trackAndMuteContainer {\n\t\toverflow-x: auto;\n\t}\n\t.beepboxEditor .barScrollBar {\n\t\tdisplay: none;\n\t}\n\t.beepboxEditor .play-pause-area {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\tgrid-column-gap: 8px;\n\t\tmargin: 2px 0;\n\t}\n\t.beepboxEditor .playback-bar-controls {\n\t\tflex-grow: 1;\n\t}\n\t.beepboxEditor .playback-volume-controls {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t\tflex-grow: 1;\n\t}\n\t\n\t.beepboxEditor .soundIcon {\n\t  background: ${nt.editorBackground};\n\t  display: inline-block;\n\t  height: 10px;\n\t  margin-left: 0px;\n\t  margin-top: 8px;\n\t\tposition: relative;\n\t\twidth: 10px;\n\t}\n\t.beepboxEditor .soundIcon:before {\n\t  border-bottom: 6px solid transparent;\n\t  border-top: 6px solid transparent;\n\t  border-right: 10px solid ${nt.editorBackground};\n\t  content: "";\n\t  height: 10px;\n\t  left: 6px;\n\t  position: absolute;\n\t  top: -6px;\n\t  width: 0;\n\t}\n}\n\n`));
    class ot {
        constructor(t) {
            this.m = t,
            this.u = 512,
            this.v = 20,
            this.k = Y.rect("rect", {
                fill: nt.playhead,
                x: 0,
                y: 0,
                width: 2,
                height: this.v
            }),
            this.M = Y.svg({
                "pointer-events": "none"
            }),
            this.S = Y.rect({
                fill: nt.uiWidgetBackground,
                x: 0,
                y: 2,
                width: 10,
                height: this.v - 4
            }),
            this.T = Y.rect({
                fill: "none",
                stroke: nt.hoverPreview,
                "stroke-width": 2,
                "pointer-events": "none",
                x: 0,
                y: 1,
                width: 10,
                height: this.v - 2
            }),
            this.P = Y.path({
                fill: nt.hoverPreview,
                "pointer-events": "none"
            }),
            this.I = Y.path({
                fill: nt.hoverPreview,
                "pointer-events": "none"
            }),
            this.L = -1,
            this.q = Y.svg({
                style: `background-color: ${nt.editorBackground}; touch-action: pan-y; position: absolute;`,
                width: this.u,
                height: this.v
            }, this.M, this.S, this.T, this.P, this.I, this.k),
            this.container = J.div({
                class: "barScrollBar",
                style: "width: 512px; height: 20px; overflow: hidden; position: relative;"
            }, this.q),
            this.N = 0,
            this.O = !1,
            this.R = !1,
            this.$ = !1,
            this.H = -1,
            this._ = -1,
            this.animatePlayhead = () => {
                const t = Math.min(512, Math.max(0, this.V * this.m.synth.playhead - 2));
                this.L != t && (this.L = t,
                this.k.setAttribute("x", "" + t))
            }
            ,
            this.W = t => {
                this.R || (this.R = !0,
                this.j())
            }
            ,
            this.U = t => {
                this.R && (this.R = !1,
                this.j())
            }
            ,
            this.K = t => {
                t.preventDefault(),
                this.O = !0;
                const e = this.q.getBoundingClientRect();
                this.N = (t.clientX || t.pageX) - e.left,
                this.j(),
                this.N >= this.m.barScrollPos * this.V && this.N <= (this.m.barScrollPos + this.m.trackVisibleBars) * this.V && (this.$ = !0,
                this.J = this.N)
            }
            ,
            this.Y = t => {
                t.preventDefault(),
                this.O = !0;
                const e = this.q.getBoundingClientRect();
                this.N = t.touches[0].clientX - e.left,
                this.j(),
                this.N >= this.m.barScrollPos * this.V && this.N <= (this.m.barScrollPos + this.m.trackVisibleBars) * this.V && (this.$ = !0,
                this.J = this.N)
            }
            ,
            this.Z = t => {
                const e = this.q.getBoundingClientRect();
                this.N = (t.clientX || t.pageX) - e.left,
                this.X()
            }
            ,
            this.tt = t => {
                if (!this.O)
                    return;
                t.preventDefault();
                const e = this.q.getBoundingClientRect();
                this.N = t.touches[0].clientX - e.left,
                this.X()
            }
            ,
            this.et = t => {
                !this.$ && this.O && (this.N < (this.m.barScrollPos + 8) * this.V ? (this.m.barScrollPos > 0 && this.m.barScrollPos--,
                this.m.notifier.changed()) : (this.m.barScrollPos < this.m.song.barCount - this.m.trackVisibleBars && this.m.barScrollPos++,
                this.m.notifier.changed())),
                this.O = !1,
                this.$ = !1,
                this.j()
            }
            ;
            const e = .5 * this.v;
            this.P.setAttribute("d", `M 9 ${e} L 20 ${e + 6} L 20 ${e - 6} z`),
            this.I.setAttribute("d", `M ${this.u - 9} ${e} L ${this.u - 20} ${e + 6} L ${this.u - 20} ${e - 6} z`),
            this.container.addEventListener("mousedown", this.K),
            document.addEventListener("mousemove", this.Z),
            document.addEventListener("mouseup", this.et),
            this.container.addEventListener("mouseover", this.W),
            this.container.addEventListener("mouseout", this.U),
            this.container.addEventListener("touchstart", this.Y),
            this.container.addEventListener("touchmove", this.tt),
            this.container.addEventListener("touchend", this.et),
            this.container.addEventListener("touchcancel", this.et)
        }
        X() {
            if (this.$) {
                for (; this.N - this.J < .5 * -this.V && this.m.barScrollPos > 0; )
                    this.m.barScrollPos--,
                    this.J -= this.V,
                    this.m.notifier.changed();
                for (; this.N - this.J > .5 * this.V && this.m.barScrollPos < this.m.song.barCount - this.m.trackVisibleBars; )
                    this.m.barScrollPos++,
                    this.J += this.V,
                    this.m.notifier.changed()
            }
            this.R && this.j()
        }
        changePos(t) {
            for (; Math.abs(t) >= 1; )
                t < 0 ? this.m.barScrollPos > 0 && (this.m.barScrollPos--,
                this.J += this.V,
                this.m.notifier.changed()) : this.m.barScrollPos < this.m.song.barCount - this.m.trackVisibleBars && (this.m.barScrollPos++,
                this.J += this.V,
                this.m.notifier.changed()),
                t += t > 0 ? -1 : 1
        }
        j() {
            let t = !1
              , e = !1
              , i = !1;
            this.R && !this.O && (this.N < this.m.barScrollPos * this.V ? t = !0 : this.N > (this.m.barScrollPos + this.m.trackVisibleBars) * this.V ? e = !0 : i = !0),
            this.P.style.visibility = t ? "visible" : "hidden",
            this.I.style.visibility = e ? "visible" : "hidden",
            this.T.style.visibility = i ? "visible" : "hidden"
        }
        render() {
            this.V = (this.u - 1) / Math.max(this.m.trackVisibleBars, this.m.song.barCount);
            const t = this.H != this.m.song.barCount;
            if (t) {
                for (this.H = this.m.song.barCount; this.M.firstChild; )
                    this.M.removeChild(this.M.firstChild);
                for (let t = 0; t <= this.m.song.barCount; t++) {
                    const e = t % 16 == 0 ? 0 : t % 4 == 0 ? this.v / 8 : this.v / 3;
                    this.M.appendChild(Y.rect({
                        fill: nt.uiWidgetBackground,
                        x: t * this.V - 1,
                        y: e,
                        width: 2,
                        height: this.v - 2 * e
                    }))
                }
            }
            (t || this._ != this.m.barScrollPos) && (this._ = this.m.barScrollPos,
            this.S.setAttribute("x", String(this.V * this.m.barScrollPos)),
            this.S.setAttribute("width", String(this.V * this.m.trackVisibleBars)),
            this.T.setAttribute("x", String(this.V * this.m.barScrollPos)),
            this.T.setAttribute("width", String(this.V * this.m.trackVisibleBars))),
            this.j()
        }
    }
    function at(t, e) {
        for (let i = 0; i < t.length; i++)
            t[i] *= e
    }
    function rt(t) {
        if (!function(t) {
            return !(!t || t & t - 1)
        }(t))
            throw new Error("FFT array length must be a power of 2.");
        return Math.round(Math.log(t) / Math.log(2))
    }
    function ht(t, e) {
        const i = rt(e);
        if (e < 4)
            throw new Error("FFT array length must be at least 4.");
        for (let n = i - 1; n >= 2; n--) {
            const i = 1 << n
              , s = i >> 1
              , o = i << 1
              , a = 2 * Math.PI / o
              , r = Math.cos(a)
              , h = Math.sin(a)
              , l = 2 * r;
            for (let n = 0; n < e; n += o) {
                const e = n
                  , o = e + s
                  , a = e + i
                  , c = a + s
                  , d = a + i
                  , p = t[e]
                  , m = t[a];
                t[e] = p + m,
                t[o] *= 2,
                t[a] = p - m,
                t[c] *= 2;
                let u = r
                  , f = -h
                  , y = 1
                  , b = 0;
                for (let i = 1; i < s; i++) {
                    const n = e + i
                      , s = a - i
                      , o = a + i
                      , r = d - i
                      , h = t[n]
                      , c = t[s]
                      , p = t[o]
                      , m = t[r]
                      , g = h - c
                      , w = p + m;
                    t[n] = h + c,
                    t[s] = m - p,
                    t[o] = g * u - w * f,
                    t[r] = w * u + g * f;
                    const v = l * u - y
                      , x = l * f - b;
                    y = u,
                    b = f,
                    u = v,
                    f = x
                }
            }
        }
        for (let i = 0; i < e; i += 4) {
            const e = i + 1
              , n = i + 2
              , s = i + 3
              , o = t[i]
              , a = 2 * t[e]
              , r = t[n]
              , h = 2 * t[s]
              , l = o + r
              , c = o - r;
            t[i] = l + a,
            t[e] = l - a,
            t[n] = c + h,
            t[s] = c - h
        }
        !function(t, e) {
            const i = rt(e);
            if (i > 16)
                throw new Error("FFT array length must not be greater than 2^16.");
            const n = 16 - i;
            for (let i = 0; i < e; i++) {
                let e;
                if (e = (43690 & i) >> 1 | (21845 & i) << 1,
                e = (52428 & e) >> 2 | (13107 & e) << 2,
                e = (61680 & e) >> 4 | (3855 & e) << 4,
                e = (e >> 8 | (255 & e) << 8) >> n,
                e > i) {
                    let n = t[i];
                    t[i] = t[e],
                    t[e] = n
                }
            }
        }(t, e)
    }
    class lt {
        constructor() {
            this.it = 1,
            this.nt = [void 0],
            this.st = 0,
            this.ot = 0,
            this.rt = 0
        }
        pushFront(t) {
            this.rt >= this.it && this.ht(),
            this.ot = this.ot - 1 & this.st,
            this.nt[this.ot] = t,
            this.rt++
        }
        pushBack(t) {
            this.rt >= this.it && this.ht(),
            this.nt[this.ot + this.rt & this.st] = t,
            this.rt++
        }
        popFront() {
            if (this.rt <= 0)
                throw new Error("No elements left to pop.");
            const t = this.nt[this.ot];
            return this.nt[this.ot] = void 0,
            this.ot = this.ot + 1 & this.st,
            this.rt--,
            t
        }
        popBack() {
            if (this.rt <= 0)
                throw new Error("No elements left to pop.");
            this.rt--;
            const t = this.ot + this.rt & this.st
              , e = this.nt[t];
            return this.nt[t] = void 0,
            e
        }
        peakFront() {
            if (this.rt <= 0)
                throw new Error("No elements left to pop.");
            return this.nt[this.ot]
        }
        peakBack() {
            if (this.rt <= 0)
                throw new Error("No elements left to pop.");
            return this.nt[this.ot + this.rt - 1 & this.st]
        }
        count() {
            return this.rt
        }
        set(t, e) {
            if (t < 0 || t >= this.rt)
                throw new Error("Invalid index");
            this.nt[this.ot + t & this.st] = e
        }
        get(t) {
            if (t < 0 || t >= this.rt)
                throw new Error("Invalid index");
            return this.nt[this.ot + t & this.st]
        }
        remove(t) {
            if (t < 0 || t >= this.rt)
                throw new Error("Invalid index");
            if (t <= this.rt >> 1) {
                for (; t > 0; )
                    this.set(t, this.get(t - 1)),
                    t--;
                this.popFront()
            } else {
                for (t++; t < this.rt; )
                    this.set(t - 1, this.get(t)),
                    t++;
                this.popBack()
            }
        }
        ht() {
            if (this.it >= 1073741824)
                throw new Error("Capacity too big.");
            this.it = this.it << 1;
            const t = this.nt
              , e = new Array(this.it)
              , i = 0 | this.rt
              , n = 0 | this.ot;
            for (let s = 0; s < i; s++)
                e[s] = t[n + s & this.st];
            for (let t = i; t < this.it; t++)
                e[t] = void 0;
            this.ot = 0,
            this.nt = e,
            this.st = this.it - 1
        }
    }
    const ct = new class {
        constructor() {
            this.activeEvents = [],
            this.listeners = {},
            this.activeEvents = [],
            this.listeners = {}
        }
        raise(t, e, i) {
            if (null != this.listeners[t]) {
                this.activeEvents.push(t);
                for (let n = 0; n < this.listeners[t].length; n++)
                    this.listeners[t][n](e, i);
                this.activeEvents.pop()
            }
        }
        listen(t, e) {
            null == this.listeners[t] && (this.listeners[t] = []),
            this.listeners[t].push(e)
        }
        unlisten(t, e) {
            if (null == this.listeners[t])
                return;
            const i = this.listeners[t].indexOf(e);
            -1 != i && this.listeners[t].splice(i, 1)
        }
        unlistenAll(t) {
            null != this.listeners[t] && (this.listeners[t] = [])
        }
    }
    ;
    class dt {
        constructor() {
            this.a = [1],
            this.b = [1],
            this.order = 0
        }
        linearGain0thOrder(t) {
            this.b[0] = t,
            this.order = 0
        }
        lowPass1stOrderButterworth(t) {
            const e = 1 / Math.tan(.5 * t)
              , i = 1 + e;
            this.a[1] = (1 - e) / i,
            this.b[1] = this.b[0] = 1 / i,
            this.order = 1
        }
        lowPass1stOrderSimplified(t) {
            const e = 2 * Math.sin(.5 * t);
            this.a[1] = e - 1,
            this.b[0] = e,
            this.b[1] = 0,
            this.order = 1
        }
        highPass1stOrderButterworth(t) {
            const e = 1 / Math.tan(.5 * t)
              , i = 1 + e;
            this.a[1] = (1 - e) / i,
            this.b[0] = e / i,
            this.b[1] = -e / i,
            this.order = 1
        }
        highShelf1stOrder(t, e) {
            const i = Math.tan(.5 * t)
              , n = Math.sqrt(e)
              , s = (i * n - 1) / (i * n + 1);
            this.a[1] = s / 1,
            this.b[0] = (1 + s + e * (1 - s)) / 2,
            this.b[1] = (1 + s - e * (1 - s)) / 2,
            this.order = 1
        }
        allPass1stOrderInvertPhaseAbove(t) {
            const e = (Math.sin(t) - 1) / Math.cos(t);
            this.a[1] = e,
            this.b[0] = e,
            this.b[1] = 1,
            this.order = 1
        }
        allPass1stOrderFractionalDelay(t) {
            const e = (1 - t) / (1 + t);
            this.a[1] = e,
            this.b[0] = e,
            this.b[1] = 1,
            this.order = 1
        }
        lowPass2ndOrderButterworth(t, e) {
            const i = Math.sin(t) / (2 * e)
              , n = Math.cos(t)
              , s = 1 + i;
            this.a[1] = -2 * n / s,
            this.a[2] = (1 - i) / s,
            this.b[2] = this.b[0] = (1 - n) / (2 * s),
            this.b[1] = (1 - n) / s,
            this.order = 2
        }
        lowPass2ndOrderSimplified(t, e) {
            const i = 2 * Math.sin(t / 2)
              , n = 1 - 1 / (2 * e)
              , s = n + n / (1 - i);
            this.a[1] = 2 * i + (i - 1) * i * s - 2,
            this.a[2] = (i - 1) * (i - i * s - 1),
            this.b[0] = i * i,
            this.b[1] = 0,
            this.b[2] = 0,
            this.order = 2
        }
        highPass2ndOrderButterworth(t, e) {
            const i = Math.sin(t) / (2 * e)
              , n = Math.cos(t)
              , s = 1 + i;
            this.a[1] = -2 * n / s,
            this.a[2] = (1 - i) / s,
            this.b[2] = this.b[0] = (1 + n) / (2 * s),
            this.b[1] = -(1 + n) / s,
            this.order = 2
        }
        highShelf2ndOrder(t, e, i) {
            const n = Math.sqrt(e)
              , s = Math.cos(t)
              , o = n + 1
              , a = n - 1
              , r = .5 * Math.sin(t) * Math.sqrt(o / n * (1 / i - 1) + 2)
              , h = 2 * Math.sqrt(n) * r
              , l = o - a * s + h;
            this.a[1] = 2 * (a - o * s) / l,
            this.a[2] = (o - a * s - h) / l,
            this.b[0] = n * (o + a * s + h) / l,
            this.b[1] = -2 * n * (a + o * s) / l,
            this.b[2] = n * (o + a * s - h) / l,
            this.order = 2
        }
        peak2ndOrder(t, e, i) {
            const n = Math.sqrt(e)
              , s = i * t / (n >= 1 ? n : 1 / n)
              , o = Math.tan(.5 * s)
              , a = 1 + o / n;
            this.b[0] = (1 + o * n) / a,
            this.b[1] = this.a[1] = -2 * Math.cos(t) / a,
            this.b[2] = (1 - o * n) / a,
            this.a[2] = (1 - o / n) / a,
            this.order = 2
        }
    }
    class pt {
        constructor() {
            this.real = 0,
            this.imag = 0,
            this.denom = 1
        }
        analyze(t, e) {
            this.analyzeComplex(t, Math.cos(e), Math.sin(e))
        }
        analyzeComplex(t, e, i) {
            const n = t.a
              , s = t.b
              , o = e
              , a = -i;
            let r = s[0] + s[1] * o
              , h = s[1] * a
              , l = 1 + n[1] * o
              , c = n[1] * a
              , d = o
              , p = a;
            for (let e = 2; e <= t.order; e++) {
                const t = d * a + p * o;
                d = d * o - p * a,
                p = t,
                r += s[e] * d,
                h += s[e] * p,
                l += n[e] * d,
                c += n[e] * p
            }
            this.denom = l * l + c * c,
            this.real = r * l + h * c,
            this.imag = h * l - r * c
        }
        magnitude() {
            return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom
        }
        angle() {
            return Math.atan2(this.imag, this.real)
        }
    }
    class mt {
        constructor() {
            this.a1 = 0,
            this.a2 = 0,
            this.b0 = 1,
            this.b1 = 0,
            this.b2 = 0,
            this.a1Delta = 0,
            this.a2Delta = 0,
            this.b0Delta = 0,
            this.b1Delta = 0,
            this.b2Delta = 0,
            this.output1 = 0,
            this.output2 = 0,
            this.useMultiplicativeInputCoefficients = !1
        }
        resetOutput() {
            this.output1 = 0,
            this.output2 = 0
        }
        loadCoefficientsWithGradient(t, e, i, n) {
            if (2 != t.order || 2 != e.order)
                throw new Error;
            this.a1 = t.a[1],
            this.a2 = t.a[2],
            this.b0 = t.b[0],
            this.b1 = t.b[1],
            this.b2 = t.b[2],
            this.a1Delta = (e.a[1] - t.a[1]) * i,
            this.a2Delta = (e.a[2] - t.a[2]) * i,
            n ? (this.b0Delta = Math.pow(e.b[0] / t.b[0], i),
            this.b1Delta = Math.pow(e.b[1] / t.b[1], i),
            this.b2Delta = Math.pow(e.b[2] / t.b[2], i)) : (this.b0Delta = (e.b[0] - t.b[0]) * i,
            this.b1Delta = (e.b[1] - t.b[1]) * i,
            this.b2Delta = (e.b[2] - t.b[2]) * i),
            this.useMultiplicativeInputCoefficients = n
        }
    }
    function ut(t) {
        return 2 * Math.atan(.5 * t)
    }
    const ft = 1e-24;
    function yt(t, e, i) {
        return i <= (e -= 1) ? i >= t ? i : t : e
    }
    function bt(t, e, i) {
        if (t <= i && i <= e)
            return i;
        throw new Error(`Value ${i} not in range [${t}, ${e}]`)
    }
    function gt(t, e) {
        let i = parseFloat(t);
        return Number.isNaN(i) && (i = e),
        i
    }
    function wt(t, e) {
        let i = parseInt(t);
        return Number.isNaN(i) && (i = e),
        i
    }
    function vt(t, e) {
        t.push(St[e >>> 30 & 3]),
        t.push(St[e >>> 24 & 63]),
        t.push(St[e >>> 18 & 63]),
        t.push(St[e >>> 12 & 63]),
        t.push(St[e >>> 6 & 63]),
        t.push(St[e >>> 0 & 63])
    }
    function xt(t, e) {
        let i = 0;
        return i |= Ft[t.charCodeAt(e++)] << 30,
        i |= Ft[t.charCodeAt(e++)] << 24,
        i |= Ft[t.charCodeAt(e++)] << 18,
        i |= Ft[t.charCodeAt(e++)] << 12,
        i |= Ft[t.charCodeAt(e++)] << 6,
        i |= Ft[t.charCodeAt(e++)] << 0,
        i
    }
    function kt(t, e, i, n, s, o) {
        t.push(St[e]),
        t.push(St[Number(i > 0)]);
        let a = Math.round(1e3 * Math.abs(i))
          , r = Math.floor(a / 63);
        t.push(St[a % 63], St[r % 63], St[Math.floor(r / 63)]),
        t.push(St[Number(n > 0)]);
        let h = Math.round(1e3 * Math.abs(n))
          , l = Math.floor(h / 63);
        t.push(St[h % 63], St[l % 63], St[Math.floor(l / 63)]),
        t.push(St[Number(s > 0)]);
        let c = Math.round(1e3 * Math.abs(s));
        t.push(St[c % 63], St[Math.floor(c / 63)]),
        t.push(St[Number(o > 0)]);
        let d = Math.round(1e3 * Math.abs(o));
        t.push(St[d % 63], St[Math.floor(d / 63)])
    }
    function Mt(t) {
        let e = yt(0, p.keys.length, t)
          , i = 0;
        return 12 === t ? (e = 0,
        i = 1) : 13 === t ? (e = 6,
        i = -1) : 14 === t ? (e = 0,
        i = -1) : 15 === t && (e = 5,
        i = -1),
        [e, i]
    }
    const St = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95]
      , Ft = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];
    class Ct {
        constructor(t, e, i) {
            this.lt = [],
            this.ct = 0;
            for (let n = e; n < i; n++) {
                const e = Ft[t.charCodeAt(n)];
                this.lt.push(e >> 5 & 1),
                this.lt.push(e >> 4 & 1),
                this.lt.push(e >> 3 & 1),
                this.lt.push(e >> 2 & 1),
                this.lt.push(e >> 1 & 1),
                this.lt.push(1 & e)
            }
        }
        read(t) {
            let e = 0;
            for (; t > 0; )
                e <<= 1,
                e += this.lt[this.ct++],
                t--;
            return e
        }
        readLongTail(t, e) {
            let i = t
              , n = e;
            for (; this.lt[this.ct++]; )
                i += 1 << n,
                n++;
            for (; n > 0; )
                n--,
                this.lt[this.ct++] && (i += 1 << n);
            return i
        }
        readPartDuration() {
            return this.readLongTail(1, 3)
        }
        readLegacyPartDuration() {
            return this.readLongTail(1, 2)
        }
        readPinCount() {
            return this.readLongTail(1, 0)
        }
        readPitchInterval() {
            return this.read(1) ? -this.readLongTail(1, 3) : this.readLongTail(1, 3)
        }
    }
    class At {
        constructor() {
            this.dt = 0,
            this.lt = []
        }
        clear() {
            this.dt = 0
        }
        write(t, e) {
            for (t--; t >= 0; )
                this.lt[this.dt++] = e >>> t & 1,
                t--
        }
        writeLongTail(t, e, i) {
            if (i < t)
                throw new Error("value out of bounds");
            i -= t;
            let n = e;
            for (; i >= 1 << n; )
                this.lt[this.dt++] = 1,
                i -= 1 << n,
                n++;
            for (this.lt[this.dt++] = 0; n > 0; )
                n--,
                this.lt[this.dt++] = i >>> n & 1
        }
        writePartDuration(t) {
            this.writeLongTail(1, 3, t)
        }
        writePinCount(t) {
            this.writeLongTail(1, 0, t)
        }
        writePitchInterval(t) {
            t < 0 ? (this.write(1, 1),
            this.writeLongTail(1, 3, -t)) : (this.write(1, 0),
            this.writeLongTail(1, 3, t))
        }
        concat(t) {
            for (let e = 0; e < t.dt; e++)
                this.lt[this.dt++] = t.lt[e]
        }
        encodeBase64(t) {
            for (let e = 0; e < this.dt; e += 6) {
                const i = this.lt[e] << 5 | this.lt[e + 1] << 4 | this.lt[e + 2] << 3 | this.lt[e + 3] << 2 | this.lt[e + 4] << 1 | this.lt[e + 5];
                t.push(St[i])
            }
            return t
        }
        lengthBase64() {
            return Math.ceil(this.dt / 6)
        }
    }
    function Et(t, e, i) {
        return {
            interval: t,
            time: e,
            size: i
        }
    }
    class Tt {
        constructor(t, e, i, n, s=!1) {
            this.pitches = [t],
            this.pins = [Et(0, 0, n), Et(0, i - e, s ? 0 : n)],
            this.start = e,
            this.end = i,
            this.continuesLastPattern = !1
        }
        pickMainInterval() {
            let t = 0
              , e = 0;
            for (let i = 1; i < this.pins.length; i++) {
                const n = this.pins[i - 1]
                  , s = this.pins[i];
                if (n.interval == s.interval) {
                    const i = s.time - n.time;
                    t < i && (t = i,
                    e = n.interval)
                }
            }
            if (0 == t) {
                let t = 0;
                for (let i = 0; i < this.pins.length; i++) {
                    const n = this.pins[i];
                    t < n.size && (t = n.size,
                    e = n.interval)
                }
            }
            return e
        }
        clone() {
            const t = new Tt(-1,this.start,this.end,3);
            t.pitches = this.pitches.concat(),
            t.pins = [];
            for (const e of this.pins)
                t.pins.push(Et(e.interval, e.time, e.size));
            return t.continuesLastPattern = this.continuesLastPattern,
            t
        }
        getEndPinIndex(t) {
            let e;
            for (e = 1; e < this.pins.length - 1 && !(this.pins[e].time + this.start > t); e++)
                ;
            return e
        }
    }
    class Pt {
        constructor() {
            this.notes = [],
            this.instruments = [0]
        }
        cloneNotes() {
            const t = [];
            for (const e of this.notes)
                t.push(e.clone());
            return t
        }
        reset() {
            this.notes.length = 0,
            this.instruments[0] = 0,
            this.instruments.length = 1
        }
        toJsonObject(t, e, i) {
            const n = [];
            for (const s of this.notes) {
                let o = e.instruments[this.instruments[0]]
                  , a = Math.max(0, p.modCount - s.pitches[0] - 1)
                  , r = t.getVolumeCapForSetting(i, o.modulators[a], o.modFilterTypes[a]);
                const h = [];
                for (const e of s.pins) {
                    let n = i ? Math.round(e.size) : Math.round(100 * e.size / r);
                    h.push({
                        tick: (e.time + s.start) * p.rhythms[t.rhythm].stepsPerBeat / p.partsPerBeat,
                        pitchBend: e.interval,
                        volume: n,
                        forMod: i
                    })
                }
                const l = {
                    pitches: s.pitches,
                    points: h
                };
                0 == s.start && (l.continuesLastPattern = s.continuesLastPattern),
                n.push(l)
            }
            const s = {
                notes: n
            };
            return t.patternInstruments && (s.instruments = this.instruments.map((t => t + 1))),
            s
        }
        fromJsonObject(t, e, i, n, s, o, a="auto") {
            const r = a.toLowerCase();
            if (e.patternInstruments)
                if (Array.isArray(t.instruments)) {
                    const n = t.instruments
                      , s = yt(p.instrumentCountMin, e.getMaxInstrumentsPerPatternForChannel(i) + 1, n.length);
                    for (let t = 0; t < s; t++)
                        this.instruments[t] = yt(0, i.instruments.length, (0 | n[t]) - 1);
                    this.instruments.length = s
                } else
                    this.instruments[0] = yt(0, i.instruments.length, (0 | t.instrument) - 1),
                    this.instruments.length = 1;
            if (t.notes && t.notes.length > 0) {
                const a = Math.min(e.beatsPerBar * p.partsPerBeat * (o ? p.modCount : 1), t.notes.length >>> 0);
                for (let h = 0; h < t.notes.length && !(h >= a); h++) {
                    const a = t.notes[h];
                    if (!(a && a.pitches && a.pitches.length >= 1 && a.points && a.points.length >= 2))
                        continue;
                    const l = new Tt(0,0,0,0);
                    l.pitches = [],
                    l.pins = [];
                    for (let t = 0; t < a.pitches.length; t++) {
                        const e = 0 | a.pitches[t];
                        if (-1 == l.pitches.indexOf(e) && (l.pitches.push(e),
                        l.pitches.length >= p.maxChordSize))
                            break
                    }
                    if (l.pitches.length < 1)
                        continue;
                    let c = 0
                      , d = i.instruments[this.instruments[0]]
                      , m = Math.max(0, p.modCount - l.pitches[0] - 1);
                    for (let t = 0; t < a.points.length; t++) {
                        const i = a.points[t];
                        if (null == i || null == i.tick)
                            continue;
                        const s = null == i.pitchBend ? 0 : 0 | i.pitchBend
                          , r = Math.round(+i.tick * p.partsPerBeat / n);
                        let h, u = e.getVolumeCapForSetting(o, d.modulators[m], d.modFilterTypes[m]);
                        h = null == i.volume ? u : null == i.forMod ? Math.max(0, Math.min(u, Math.round((0 | i.volume) * u / 100))) : (0 | i.forMod) > 0 ? Math.round(0 | i.volume) : Math.max(0, Math.min(u, Math.round((0 | i.volume) * u / 100))),
                        r > e.beatsPerBar * p.partsPerBeat || (0 == l.pins.length && (l.start = r,
                        c = s),
                        l.pins.push(Et(s - c, r - l.start, h)))
                    }
                    if (l.pins.length < 2)
                        continue;
                    l.end = l.pins[l.pins.length - 1].time + l.start;
                    const u = s ? p.drumCount - 1 : p.maxPitch;
                    let f = u
                      , y = 0;
                    for (let t = 0; t < l.pitches.length; t++)
                        l.pitches[t] += c,
                        (l.pitches[t] < 0 || l.pitches[t] > u) && (l.pitches.splice(t, 1),
                        t--),
                        l.pitches[t] < f && (f = l.pitches[t]),
                        l.pitches[t] > y && (y = l.pitches[t]);
                    if (!(l.pitches.length < 1)) {
                        for (let t = 0; t < l.pins.length; t++) {
                            const e = l.pins[t];
                            e.interval + f < 0 && (e.interval = -f),
                            e.interval + y > u && (e.interval = u - y),
                            t >= 2 && e.interval == l.pins[t - 1].interval && e.interval == l.pins[t - 2].interval && e.size == l.pins[t - 1].size && e.size == l.pins[t - 2].size && (l.pins.splice(t - 1, 1),
                            t--)
                        }
                        if (0 == l.start ? l.continuesLastPattern = !0 === a.continuesLastPattern : l.continuesLastPattern = !1,
                        "ultrabox" != r && d.modulators[m] == p.modulators.dictionary.tempo.index)
                            for (const t of l.pins) {
                                const e = 30
                                  , i = 1
                                  , n = t.size + e;
                                t.size = n - i
                            }
                        this.notes.push(l)
                    }
                }
            }
        }
    }
    class Bt {
        constructor(t) {
            this.frequency = 4,
            this.amplitude = 0,
            this.waveform = 0,
            this.pulseWidth = .5,
            this.reset(t)
        }
        reset(t) {
            this.frequency = 4,
            this.amplitude = t <= 1 ? p.operatorAmplitudeMax : 0,
            this.waveform = 0,
            this.pulseWidth = 5
        }
        copy(t) {
            this.frequency = t.frequency,
            this.amplitude = t.amplitude,
            this.waveform = t.waveform,
            this.pulseWidth = t.pulseWidth
        }
    }
    class It {
        constructor() {
            this.name = "",
            this.carrierCount = 0,
            this.modulatedBy = [[], [], [], [], [], []],
            this.associatedCarrier = [],
            this.fromPreset(1)
        }
        set(t, e) {
            this.reset(),
            this.carrierCount = t;
            for (let i = 0; i < this.modulatedBy.length; i++) {
                this.modulatedBy[i] = e[i],
                i < t && (this.associatedCarrier[i] = i + 1),
                this.name += i + 1;
                for (let n = 0; n < e[i].length; n++)
                    this.name += e[i][n],
                    e[i][n] > t - 1 && (this.associatedCarrier[e[i][n] - 1] = i + 1),
                    this.name += ",";
                this.name += i < t ? "|" : "."
            }
        }
        reset() {
            this.name = "",
            this.carrierCount = 1,
            this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []],
            this.associatedCarrier = [1, 1, 1, 1, 1, 1]
        }
        copy(t) {
            this.name = t.name,
            this.carrierCount = t.carrierCount,
            this.modulatedBy = t.modulatedBy,
            this.associatedCarrier = t.associatedCarrier
        }
        fromPreset(t) {
            this.reset();
            let e = p.algorithms6Op[t];
            this.name = e.name,
            this.carrierCount = e.carrierCount;
            for (var i = 0; i < e.modulatedBy.length; i++)
                this.modulatedBy[i] = Array.from(e.modulatedBy[i]),
                this.associatedCarrier[i] = e.associatedCarrier[i]
        }
    }
    class Lt {
        constructor() {
            this.name = "",
            this.indices = [[], [], [], [], [], []],
            this.fromPreset(1)
        }
        set(t) {
            this.reset();
            for (let e = 0; e < this.indices.length; e++) {
                this.indices[e] = t[e];
                for (let i = 0; i < t[e].length; i++)
                    this.name += t[e][i],
                    this.name += ",";
                this.name += "."
            }
        }
        reset() {
            this.reset,
            this.name = "",
            this.indices = [[1], [], [], [], [], []]
        }
        copy(t) {
            this.name = t.name,
            this.indices = t.indices
        }
        fromPreset(t) {
            this.reset();
            let e = p.feedbacks6Op[t];
            for (var i = 0; i < e.indices.length; i++) {
                this.indices[i] = Array.from(e.indices[i]);
                for (let t = 0; t < e.indices[i].length; t++)
                    this.name += e.indices[i][t],
                    this.name += ",";
                this.name += "."
            }
        }
    }
    class Dt {
        constructor(t) {
            this.spectrum = [],
            this.hash = -1,
            this.reset(t)
        }
        reset(t) {
            for (let e = 0; e < p.spectrumControlPoints; e++)
                if (t)
                    this.spectrum[e] = Math.round(p.spectrumMax * (1 / Math.sqrt(1 + e / 3)));
                else {
                    const t = 0 == e || 7 == e || 11 == e || 14 == e || 16 == e || 18 == e || 21 == e || 23 == e || e >= 25;
                    this.spectrum[e] = t ? Math.max(0, Math.round(p.spectrumMax * (1 - e / 30))) : 0
                }
            this.markCustomWaveDirty()
        }
        markCustomWaveDirty() {
            const t = Jt.fittingPowerOfTwo(p.spectrumMax + 2) - 1;
            let e = 0;
            for (const i of this.spectrum)
                e = e * t + i >>> 0;
            this.hash = e
        }
    }
    class zt {
        constructor() {
            this.wave = null,
            this.ut = -1
        }
        getCustomWave(t, e) {
            if (this.ut == t.hash)
                return this.wave;
            this.ut = t.hash;
            const i = p.spectrumNoiseLength;
            null != this.wave && this.wave.length == i + 1 || (this.wave = new Float32Array(i + 1));
            const n = this.wave;
            for (let t = 0; t < i; t++)
                n[t] = 0;
            const s = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(1.5), 5 / 7, 6 / 7];
            function o(t) {
                return e + Math.floor(t / p.spectrumControlPointsPerOctave) + s[(t + p.spectrumControlPointsPerOctave) % p.spectrumControlPointsPerOctave]
            }
            let a = 1;
            for (let e = 0; e < p.spectrumControlPoints + 1; e++) {
                const s = e <= 0 ? 0 : t.spectrum[e - 1]
                  , r = e >= p.spectrumControlPoints ? t.spectrum[p.spectrumControlPoints - 1] : t.spectrum[e]
                  , h = o(e - 1);
                let l = o(e);
                e >= p.spectrumControlPoints && (l = 14 + .25 * (l - 14)),
                0 == s && 0 == r || (a += .02 * g(n, i, h, l, s / p.spectrumMax, r / p.spectrumMax, -.5))
            }
            return t.spectrum[p.spectrumControlPoints - 1] > 0 && (a += .02 * g(n, i, 14 + .25 * (o(p.spectrumControlPoints) - 14), 14, t.spectrum[p.spectrumControlPoints - 1] / p.spectrumMax, 0, -.5)),
            ht(n, i),
            at(n, 5 / (Math.sqrt(i) * Math.pow(a, .75))),
            n[i] = n[0],
            n
        }
    }
    class qt {
        constructor() {
            this.harmonics = [],
            this.hash = -1,
            this.reset()
        }
        reset() {
            for (let t = 0; t < p.harmonicsControlPoints; t++)
                this.harmonics[t] = 0;
            this.harmonics[0] = p.harmonicsMax,
            this.harmonics[3] = p.harmonicsMax,
            this.harmonics[6] = p.harmonicsMax,
            this.markCustomWaveDirty()
        }
        markCustomWaveDirty() {
            const t = Jt.fittingPowerOfTwo(p.harmonicsMax + 2) - 1;
            let e = 0;
            for (const i of this.harmonics)
                e = e * t + i >>> 0;
            this.hash = e
        }
    }
    class Nt {
        constructor() {
            this.wave = null,
            this.ut = -1
        }
        getCustomWave(t, e) {
            if (this.ut == t.hash && this.ft == e)
                return this.wave;
            this.ut = t.hash,
            this.ft = e;
            const i = 7 == e ? p.harmonicsRenderedForPickedString : p.harmonicsRendered
              , n = p.harmonicsWavelength
              , s = b(0, null, null);
            null != this.wave && this.wave.length == n + 1 || (this.wave = new Float32Array(n + 1));
            const o = this.wave;
            for (let t = 0; t < n; t++)
                o[t] = 0;
            let a = 1;
            for (let e = 0; e < i; e++) {
                const r = e + 1;
                let h = e < p.harmonicsControlPoints ? t.harmonics[e] : t.harmonics[p.harmonicsControlPoints - 1];
                e >= p.harmonicsControlPoints && (h *= 1 - (e - p.harmonicsControlPoints) / (i - p.harmonicsControlPoints));
                const l = h / p.harmonicsMax;
                let c = Math.pow(2, h - p.harmonicsMax + 1) * Math.sqrt(l);
                e < p.harmonicsControlPoints && (a += c),
                c *= Math.pow(r, -.25),
                c *= s[e + 589],
                o[n - r] = c
            }
            ht(o, n);
            const r = 1 / Math.pow(a, .7);
            for (let t = 0; t < o.length; t++)
                o[t] *= r;
            return function(t) {
                let e = 0;
                for (let i = 0; i < t.length; i++) {
                    const n = t[i];
                    t[i] = e,
                    e += n
                }
            }(o),
            o[n] = o[0],
            o
        }
    }
    class Ot {
        constructor() {
            this.freq = 0,
            this.gain = p.filterGainCenter,
            this.type = 2
        }
        set(t, e) {
            this.freq = t,
            this.gain = e
        }
        getHz() {
            return Ot.getHzFromSettingValue(this.freq)
        }
        static getHzFromSettingValue(t) {
            return p.filterFreqReferenceHz * Math.pow(2, (t - p.filterFreqReferenceSetting) * p.filterFreqStep)
        }
        static getSettingValueFromHz(t) {
            return Math.log2(t / p.filterFreqReferenceHz) / p.filterFreqStep + p.filterFreqReferenceSetting
        }
        static getRoundedSettingValueFromHz(t) {
            return Math.max(0, Math.min(p.filterFreqRange - 1, Math.round(Ot.getSettingValueFromHz(t))))
        }
        getLinearGain(t=1) {
            const e = (this.gain - p.filterGainCenter) * p.filterGainStep
              , i = 2 == this.type ? 0 : -.5
              , n = i + (e - i) * t;
            return Math.pow(2, n)
        }
        static getRoundedSettingValueFromLinearGain(t) {
            return Math.max(0, Math.min(p.filterGainRange - 1, Math.round(Math.log2(t) / p.filterGainStep + p.filterGainCenter)))
        }
        toCoefficients(t, e, i=1, n=1) {
            const s = 2 * Math.PI * Math.max(p.filterFreqMinHz, Math.min(p.filterFreqMaxHz, i * this.getHz())) / e
              , o = this.getLinearGain(n);
            switch (this.type) {
            case 0:
                t.lowPass2ndOrderButterworth(s, o);
                break;
            case 1:
                t.highPass2ndOrderButterworth(s, o);
                break;
            case 2:
                t.peak2ndOrder(s, o, 1);
                break;
            default:
                throw new Error
            }
        }
        getVolumeCompensationMult() {
            const t = (this.freq - p.filterFreqReferenceSetting) * p.filterFreqStep
              , e = (this.gain - p.filterGainCenter) * p.filterGainStep;
            switch (this.type) {
            case 0:
                const i = Math.pow(2, t) * p.filterFreqReferenceHz / 8e3
                  , n = (Math.sqrt(1 + 4 * i) - 1) / 2
                  , s = Math.log2(n);
                return Math.pow(.5, .2 * Math.max(0, e + 1) + Math.min(0, Math.max(-3, .595 * s + .35 * Math.min(0, e + 1))));
            case 1:
                return Math.pow(.5, .125 * Math.max(0, e + 1) + Math.min(0, .3 * (-t - Math.log2(p.filterFreqReferenceHz / 125)) + .2 * Math.min(0, e + 1)));
            case 2:
                const o = t + Math.log2(p.filterFreqReferenceHz / 2e3)
                  , a = Math.pow(1 / (1 + Math.pow(o / 3, 2)), 2);
                return Math.pow(.5, .125 * Math.max(0, e) + .1 * a * Math.min(0, e));
            default:
                throw new Error
            }
        }
    }
    class Rt {
        constructor() {
            this.controlPoints = [],
            this.controlPointCount = 0,
            this.reset()
        }
        reset() {
            this.controlPointCount = 0
        }
        addPoint(t, e, i) {
            let n;
            this.controlPoints.length <= this.controlPointCount ? (n = new Ot,
            this.controlPoints[this.controlPointCount] = n) : n = this.controlPoints[this.controlPointCount],
            this.controlPointCount++,
            n.type = t,
            n.set(e, i)
        }
        toJsonObject() {
            const t = [];
            for (let e = 0; e < this.controlPointCount; e++) {
                const i = this.controlPoints[e];
                t.push({
                    type: p.filterTypeNames[i.type],
                    cutoffHz: Math.round(100 * i.getHz()) / 100,
                    linearGain: Math.round(1e4 * i.getLinearGain()) / 1e4
                })
            }
            return t
        }
        fromJsonObject(t) {
            if (this.controlPoints.length = 0,
            t)
                for (const e of t) {
                    const t = new Ot;
                    t.type = p.filterTypeNames.indexOf(e.type),
                    -1 == t.type && (t.type = 2),
                    null != e.cutoffHz ? t.freq = Ot.getRoundedSettingValueFromHz(e.cutoffHz) : t.freq = 0,
                    null != e.linearGain ? t.gain = Ot.getRoundedSettingValueFromLinearGain(e.linearGain) : t.gain = p.filterGainCenter,
                    this.controlPoints.push(t)
                }
            this.controlPointCount = this.controlPoints.length
        }
        static filtersCanMorph(t, e) {
            if (t.controlPointCount != e.controlPointCount)
                return !1;
            for (let i = 0; i < t.controlPointCount; i++)
                if (t.controlPoints[i].type != e.controlPoints[i].type)
                    return !1;
            return !0
        }
        static lerpFilters(t, e, i) {
            let n = new Rt;
            if (null == t)
                return t;
            if (null == e)
                return e;
            if (i = Math.max(0, Math.min(1, i)),
            this.filtersCanMorph(t, e)) {
                for (let s = 0; s < t.controlPointCount; s++)
                    n.controlPoints[s] = new Ot,
                    n.controlPoints[s].type = t.controlPoints[s].type,
                    n.controlPoints[s].freq = t.controlPoints[s].freq + (e.controlPoints[s].freq - t.controlPoints[s].freq) * i,
                    n.controlPoints[s].gain = t.controlPoints[s].gain + (e.controlPoints[s].gain - t.controlPoints[s].gain) * i;
                return n.controlPointCount = t.controlPointCount,
                n
            }
            return i >= 1 ? e : t
        }
        convertLegacySettings(t, e, i) {
            this.reset();
            const n = 2 * Math.asin(.475)
              , s = e > 1
              , o = 0 == e
              , a = 10 == t
              , r = 3 == i.type || 4 == i.type || 8 == i.type || 0 == i.type
              , h = 48e3
              , l = 8e3 * Math.pow(2, .5 * (t - 10))
              , c = Math.min(n, 2 * Math.PI * l / h);
            if (1 == i.type && !s && a)
                ;
            else if (o) {
                const t = 3.5
                  , e = c * Math.pow(2, t)
                  , i = h * (e / (1 + e / Math.PI)) / (2 * Math.PI)
                  , n = Ot.getRoundedSettingValueFromHz(i)
                  , s = Ot.getHzFromSettingValue(n)
                  , o = 2 * Math.PI * s / h
                  , a = new dt;
                a.lowPass1stOrderSimplified(c);
                const l = new pt;
                l.analyze(a, o);
                const d = l.magnitude();
                let p = Math.log2(d);
                p = .82 * (p + t) - t,
                r && (p = Math.min(p, -1));
                const m = Math.pow(2, p)
                  , u = Ot.getRoundedSettingValueFromLinearGain(m);
                this.addPoint(0, n, u)
            } else {
                const t = .5 / (1 - .95 * Math.sqrt(Math.max(0, e - 1) / 6))
                  , i = .5 / t
                  , n = c + (c * (c / (2 * Math.PI * 8e3 / h) * Math.pow(i, .9) + 1) - c) * i;
                let o;
                o = r ? h * Math.min(n, c * Math.pow(2, .25)) / (2 * Math.PI) : h * n / (2 * Math.PI);
                const a = Ot.getRoundedSettingValueFromHz(o);
                let l;
                if (r)
                    l = t;
                else {
                    const e = new dt;
                    e.lowPass2ndOrderSimplified(c, t);
                    const i = new pt;
                    i.analyze(e, n),
                    l = i.magnitude()
                }
                s || (l = Math.min(l, Math.sqrt(.5)));
                const d = Ot.getRoundedSettingValueFromLinearGain(l);
                this.addPoint(0, a, d)
            }
            this.controlPoints.length = this.controlPointCount
        }
        convertLegacySettingsForSynth(t, e, i=!1) {
            this.reset();
            const n = 2 * Math.asin(.475)
              , s = 0 == e && i
              , o = 48e3
              , a = 8e3 * Math.pow(2, .5 * (t - 10))
              , r = Math.min(n, 2 * Math.PI * a / o);
            if (s) {
                const t = 3.5
                  , e = r * Math.pow(2, t)
                  , i = o * (e / (1 + e / Math.PI)) / (2 * Math.PI)
                  , n = Ot.getRoundedSettingValueFromHz(i)
                  , s = Ot.getHzFromSettingValue(n)
                  , a = 2 * Math.PI * s / o
                  , h = new dt;
                h.lowPass1stOrderSimplified(r);
                const l = new pt;
                l.analyze(h, a);
                const c = l.magnitude();
                let d = Math.log2(c);
                d = .82 * (d + t) - t;
                const p = Math.pow(2, d)
                  , m = Ot.getRoundedSettingValueFromLinearGain(p);
                this.addPoint(0, n, m)
            } else {
                const t = .5 / (1 - .95 * Math.sqrt(Math.max(0, e - 1) / 6))
                  , i = .5 / t
                  , n = r + (r * (r / (2 * Math.PI * 8e3 / o) * Math.pow(i, .9) + 1) - r) * i;
                let s;
                s = o * n / (2 * Math.PI);
                const a = Ot.getSettingValueFromHz(s);
                let h;
                const l = new dt;
                l.lowPass2ndOrderSimplified(r, t);
                const c = new pt;
                c.analyze(l, n),
                h = c.magnitude();
                const d = Ot.getRoundedSettingValueFromLinearGain(h);
                this.addPoint(0, a, d)
            }
        }
    }
    class $t {
        constructor() {
            this.target = 0,
            this.index = 0,
            this.envelope = 0,
            this.reset()
        }
        reset() {
            this.target = 0,
            this.index = 0,
            this.envelope = 0
        }
        toJsonObject() {
            const t = {
                target: p.instrumentAutomationTargets[this.target].name,
                envelope: p.envelopes[this.envelope].name
            };
            return p.instrumentAutomationTargets[this.target].maxCount > 1 && (t.index = this.index),
            t
        }
        fromJsonObject(t) {
            this.reset();
            let e = p.instrumentAutomationTargets.dictionary[t.target];
            null == e && (e = p.instrumentAutomationTargets.dictionary.noteVolume),
            this.target = e.index;
            let i = p.envelopes.dictionary[t.envelope];
            null == i && (i = p.envelopes.dictionary.none),
            this.envelope = i.index,
            null != t.index ? this.index = yt(0, p.instrumentAutomationTargets[this.target].maxCount, 0 | t.index) : this.index = 0
        }
    }
    class Ht {
        constructor(t, e) {
            if (this.type = 0,
            this.preset = 0,
            this.chipWave = 2,
            this.isUsingAdvancedLoopControls = !1,
            this.chipWaveLoopStart = 0,
            this.chipWaveLoopEnd = p.rawRawChipWaves[this.chipWave].samples.length - 1,
            this.chipWaveLoopMode = 0,
            this.chipWavePlayBackwards = !1,
            this.chipWaveStartOffset = 0,
            this.chipNoise = 1,
            this.eqFilter = new Rt,
            this.eqFilterType = !1,
            this.eqFilterSimpleCut = p.filterSimpleCutRange - 1,
            this.eqFilterSimplePeak = 0,
            this.noteFilter = new Rt,
            this.noteFilterType = !1,
            this.noteFilterSimpleCut = p.filterSimpleCutRange - 1,
            this.noteFilterSimplePeak = 0,
            this.eqSubFilters = [],
            this.noteSubFilters = [],
            this.envelopes = [],
            this.fadeIn = 0,
            this.fadeOut = p.fadeOutNeutral,
            this.envelopeCount = 0,
            this.transition = p.transitions.dictionary.normal.index,
            this.pitchShift = 0,
            this.detune = 0,
            this.vibrato = 0,
            this.interval = 0,
            this.vibratoDepth = 0,
            this.vibratoSpeed = 10,
            this.vibratoDelay = 0,
            this.vibratoType = 0,
            this.envelopeSpeed = 12,
            this.discreteEnvelope = !1,
            this.unison = 0,
            this.unisonVoices = 1,
            this.unisonSpread = 0,
            this.unisonOffset = 0,
            this.unisonExpression = 1.4,
            this.unisonSign = 1,
            this.effects = 0,
            this.chord = 1,
            this.volume = 0,
            this.pan = p.panCenter,
            this.panDelay = 0,
            this.arpeggioSpeed = 12,
            this.fastTwoNoteArp = !1,
            this.legacyTieOver = !1,
            this.clicklessTransition = !1,
            this.aliases = !1,
            this.pulseWidth = p.pulseWidthRange,
            this.decimalOffset = 0,
            this.supersawDynamism = p.supersawDynamismMax,
            this.supersawSpread = Math.ceil(p.supersawSpreadMax / 2),
            this.supersawShape = 0,
            this.stringSustain = 10,
            this.stringSustainType = 1,
            this.distortion = 0,
            this.bitcrusherFreq = 0,
            this.bitcrusherQuantization = 0,
            this.chorus = 0,
            this.reverb = 0,
            this.echoSustain = 0,
            this.echoDelay = 0,
            this.algorithm = 0,
            this.feedbackType = 0,
            this.algorithm6Op = 1,
            this.feedbackType6Op = 1,
            this.customAlgorithm = new It,
            this.customFeedbackType = new Lt,
            this.feedbackAmplitude = 0,
            this.customChipWave = new Float32Array(64),
            this.customChipWaveIntegral = new Float32Array(65),
            this.operators = [],
            this.harmonicsWave = new qt,
            this.drumsetEnvelopes = [],
            this.drumsetSpectrumWaves = [],
            this.modChannels = [],
            this.modInstruments = [],
            this.modulators = [],
            this.modFilterTypes = [],
            this.invalidModulators = [],
            e)
                for (let t = 0; t < p.modCount; t++)
                    this.modChannels.push(-2),
                    this.modInstruments.push(0),
                    this.modulators.push(p.modulators.dictionary.none.index);
            this.spectrumWave = new Dt(t);
            for (let t = 0; t < p.operatorCount + 2; t++)
                this.operators[t] = new Bt(t);
            for (let t = 0; t < p.drumCount; t++)
                this.drumsetEnvelopes[t] = p.envelopes.dictionary["twang 2"].index,
                this.drumsetSpectrumWaves[t] = new Dt(!0);
            for (let t = 0; t < 64; t++)
                this.customChipWave[t] = 24 - Math.floor(.75 * t);
            let i = 0;
            for (let t = 0; t < this.customChipWave.length; t++)
                i += this.customChipWave[t];
            const n = i / this.customChipWave.length;
            let s = 0
              , o = 0;
            for (let t = 0; t < this.customChipWave.length; t++)
                s += o,
                o = this.customChipWave[t] - n,
                this.customChipWaveIntegral[t] = s;
            this.customChipWaveIntegral[64] = 0
        }
        setTypeAndReset(t, e, i) {
            i && (t = 10),
            this.type = t,
            this.preset = t,
            this.volume = 0,
            this.effects = 4,
            this.chorus = p.chorusRange - 1,
            this.reverb = 0,
            this.echoSustain = Math.floor(.5 * (p.echoSustainRange - 1)),
            this.echoDelay = Math.floor(.5 * (p.echoDelayRange - 1)),
            this.eqFilter.reset(),
            this.eqFilterType = !1,
            this.eqFilterSimpleCut = p.filterSimpleCutRange - 1,
            this.eqFilterSimplePeak = 0;
            for (let t = 0; t < p.filterMorphCount; t++)
                this.eqSubFilters[t] = null,
                this.noteSubFilters[t] = null;
            switch (this.noteFilter.reset(),
            this.noteFilterType = !1,
            this.noteFilterSimpleCut = p.filterSimpleCutRange - 1,
            this.noteFilterSimplePeak = 0,
            this.distortion = Math.floor(.75 * (p.distortionRange - 1)),
            this.bitcrusherFreq = Math.floor(.5 * (p.bitcrusherFreqRange - 1)),
            this.bitcrusherQuantization = Math.floor(.5 * (p.bitcrusherQuantizationRange - 1)),
            this.pan = p.panCenter,
            this.panDelay = 0,
            this.pitchShift = p.pitchShiftCenter,
            this.detune = p.detuneCenter,
            this.vibrato = 0,
            this.unison = 0,
            this.stringSustain = 10,
            this.stringSustainType = p.enableAcousticSustain ? 1 : 0,
            this.clicklessTransition = !1,
            this.arpeggioSpeed = 12,
            this.envelopeSpeed = 12,
            this.discreteEnvelope = !1,
            this.legacyTieOver = !1,
            this.aliases = !1,
            this.fadeIn = 0,
            this.fadeOut = p.fadeOutNeutral,
            this.transition = p.transitions.dictionary.normal.index,
            this.envelopeCount = 0,
            t) {
            case 0:
                this.chipWave = 2,
                this.chord = p.chords.dictionary.arpeggio.index,
                this.isUsingAdvancedLoopControls = !1,
                this.chipWaveLoopStart = 0,
                this.chipWaveLoopEnd = p.rawRawChipWaves[this.chipWave].samples.length - 1,
                this.chipWaveLoopMode = 0,
                this.chipWavePlayBackwards = !1,
                this.chipWaveStartOffset = 0;
                break;
            case 9:
                this.chipWave = 2,
                this.chord = p.chords.dictionary.arpeggio.index;
                for (let t = 0; t < 64; t++)
                    this.customChipWave[t] = 24 - Math.floor(.75 * t);
                let i = 0;
                for (let t = 0; t < this.customChipWave.length; t++)
                    i += this.customChipWave[t];
                const n = i / this.customChipWave.length;
                let s = 0
                  , o = 0;
                for (let t = 0; t < this.customChipWave.length; t++)
                    s += o,
                    o = this.customChipWave[t] - n,
                    this.customChipWaveIntegral[t] = s;
                this.customChipWaveIntegral[64] = 0;
                break;
            case 1:
                this.chord = p.chords.dictionary["custom interval"].index,
                this.algorithm = 0,
                this.feedbackType = 0,
                this.feedbackAmplitude = 0;
                for (let t = 0; t < this.operators.length; t++)
                    this.operators[t].reset(t);
                break;
            case 11:
                this.transition = 1,
                this.vibrato = 0,
                this.effects = 1,
                this.chord = 3,
                this.algorithm = 0,
                this.feedbackType = 0,
                this.algorithm6Op = 1,
                this.feedbackType6Op = 1,
                this.customAlgorithm.fromPreset(1),
                this.feedbackAmplitude = 0;
                for (let t = 0; t < this.operators.length; t++)
                    this.operators[t].reset(t);
                break;
            case 2:
                this.chipNoise = 1,
                this.chord = p.chords.dictionary.arpeggio.index;
                break;
            case 3:
                this.chord = p.chords.dictionary.simultaneous.index,
                this.spectrumWave.reset(e);
                break;
            case 4:
                this.chord = p.chords.dictionary.simultaneous.index;
                for (let t = 0; t < p.drumCount; t++)
                    this.drumsetEnvelopes[t] = p.envelopes.dictionary["twang 2"].index,
                    null == this.drumsetSpectrumWaves[t] && (this.drumsetSpectrumWaves[t] = new Dt(!0)),
                    this.drumsetSpectrumWaves[t].reset(e);
                break;
            case 5:
                this.chord = p.chords.dictionary.simultaneous.index,
                this.harmonicsWave.reset();
                break;
            case 6:
                this.chord = p.chords.dictionary.arpeggio.index,
                this.pulseWidth = p.pulseWidthRange,
                this.decimalOffset = 0;
                break;
            case 7:
                this.chord = p.chords.dictionary.strum.index,
                this.harmonicsWave.reset();
                break;
            case 10:
                this.transition = 0,
                this.vibrato = 0,
                this.interval = 0,
                this.effects = 0,
                this.chord = 0,
                this.modChannels = [],
                this.modInstruments = [],
                this.modulators = [];
                for (let t = 0; t < p.modCount; t++)
                    this.modChannels.push(-2),
                    this.modInstruments.push(0),
                    this.modulators.push(p.modulators.dictionary.none.index),
                    this.invalidModulators[t] = !1,
                    this.modFilterTypes[t] = 0;
                break;
            case 8:
                this.chord = p.chords.dictionary.arpeggio.index,
                this.supersawDynamism = p.supersawDynamismMax,
                this.supersawSpread = Math.ceil(p.supersawSpreadMax / 2),
                this.supersawShape = 0,
                this.pulseWidth = p.pulseWidthRange - 1,
                this.decimalOffset = 0;
                break;
            default:
                throw new Error("Unrecognized instrument type: " + t)
            }
            this.chord != p.chords.dictionary.simultaneous.index && (this.effects = 2048 | this.effects)
        }
        convertLegacySettings(t, e) {
            let i = t.filterCutoff
              , n = t.filterResonance
              , s = t.filterEnvelope
              , o = t.pulseEnvelope
              , a = t.operatorEnvelopes
              , r = t.feedbackEnvelope;
            null == i && (i = 0 == this.type ? 6 : 10),
            null == n && (n = 0),
            null == s && (s = p.envelopes.dictionary.none),
            null == o && (o = p.envelopes.dictionary[6 == this.type ? "twang 2" : "none"]),
            null == a && (a = [p.envelopes.dictionary[1 == this.type ? "note size" : "none"], p.envelopes.dictionary.none, p.envelopes.dictionary.none, p.envelopes.dictionary.none]),
            null == r && (r = p.envelopes.dictionary.none);
            10 == i && 2 == s.type && (s = p.envelopes.dictionary.none);
            const h = p.algorithms[this.algorithm].carrierCount;
            let l = !0
              , c = !0
              , d = 0 == s.type || 0 == o.type;
            if (1 == this.type || 11 == this.type) {
                d = d || 0 == r.type;
                for (let t = 0; t < a.length; t++)
                    t < h ? 0 != a[t].type ? c = !1 : l = !1 : d = d || 0 == a[t].type
            }
            this.envelopeCount = 0,
            1 != this.type && 11 != this.type || (c && d ? this.addEnvelope(p.instrumentAutomationTargets.dictionary.noteVolume.index, 0, p.envelopes.dictionary["note size"].index) : l && !d && this.addEnvelope(p.instrumentAutomationTargets.dictionary.none.index, 0, p.envelopes.dictionary["note size"].index)),
            1 == s.type ? (this.noteFilter.reset(),
            this.noteFilterType = !1,
            this.eqFilter.convertLegacySettings(i, n, s),
            this.effects &= -33,
            (e || this.eqFilterType) && (this.eqFilterType = !0,
            this.eqFilterSimpleCut = i,
            this.eqFilterSimplePeak = n)) : (this.eqFilter.reset(),
            this.eqFilterType = !1,
            this.noteFilterType = !1,
            this.noteFilter.convertLegacySettings(i, n, s),
            this.effects |= 32,
            this.addEnvelope(p.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index, 0, s.index),
            (e || this.noteFilterType) && (this.noteFilterType = !0,
            this.noteFilterSimpleCut = i,
            this.noteFilterSimplePeak = n)),
            1 != o.type && this.addEnvelope(p.instrumentAutomationTargets.dictionary.pulseWidth.index, 0, o.index);
            for (let t = 0; t < a.length; t++)
                t < h && c || 1 != a[t].type && this.addEnvelope(p.instrumentAutomationTargets.dictionary.operatorAmplitude.index, t, a[t].index);
            1 != r.type && this.addEnvelope(p.instrumentAutomationTargets.dictionary.feedbackAmplitude.index, 0, r.index)
        }
        toJsonObject() {
            const t = {
                type: p.instrumentTypeNames[this.type],
                volume: this.volume,
                eqFilter: this.eqFilter.toJsonObject(),
                eqFilterType: this.eqFilterType,
                eqSimpleCut: this.eqFilterSimpleCut,
                eqSimplePeak: this.eqFilterSimplePeak,
                envelopeSpeed: this.envelopeSpeed,
                discreteEnvelope: this.discreteEnvelope
            };
            this.preset != this.type && (t.preset = this.preset);
            for (let e = 0; e < p.filterMorphCount; e++)
                null != this.eqSubFilters[e] && (t["eqSubFilters" + e] = this.eqSubFilters[e].toJsonObject());
            const e = [];
            for (const t of p.effectOrder)
                this.effects & 1 << t && e.push(p.effectNames[t]);
            if (t.effects = e,
            M(this.effects) && (t.transition = p.transitions[this.transition].name,
            t.clicklessTransition = this.clicklessTransition),
            S(this.effects) && (t.chord = this.getChord().name,
            t.fastTwoNoteArp = this.fastTwoNoteArp,
            t.arpeggioSpeed = this.arpeggioSpeed),
            F(this.effects) && (t.pitchShiftSemitones = this.pitchShift),
            C(this.effects) && (t.detuneCents = Jt.detuneToCents(this.detune)),
            A(this.effects) && (-1 == this.vibrato && (this.vibrato = 5),
            5 != this.vibrato ? t.vibrato = p.vibratos[this.vibrato].name : t.vibrato = "custom",
            t.vibratoDepth = this.vibratoDepth,
            t.vibratoDelay = this.vibratoDelay,
            t.vibratoSpeed = this.vibratoSpeed,
            t.vibratoType = this.vibratoType),
            E(this.effects)) {
                t.noteFilterType = this.noteFilterType,
                t.noteSimpleCut = this.noteFilterSimpleCut,
                t.noteSimplePeak = this.noteFilterSimplePeak,
                t.noteFilter = this.noteFilter.toJsonObject();
                for (let e = 0; e < p.filterMorphCount; e++)
                    null != this.noteSubFilters[e] && (t["noteSubFilters" + e] = this.noteSubFilters[e].toJsonObject())
            }
            if (T(this.effects) && (t.distortion = Math.round(100 * this.distortion / (p.distortionRange - 1)),
            t.aliases = this.aliases),
            P(this.effects) && (t.bitcrusherOctave = (p.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * p.bitcrusherOctaveStep,
            t.bitcrusherQuantization = Math.round(100 * this.bitcrusherQuantization / (p.bitcrusherQuantizationRange - 1))),
            B(this.effects) && (t.pan = Math.round(100 * (this.pan - p.panCenter) / p.panCenter),
            t.panDelay = this.panDelay),
            I(this.effects) && (t.chorus = Math.round(100 * this.chorus / (p.chorusRange - 1))),
            L(this.effects) && (t.echoSustain = Math.round(100 * this.echoSustain / (p.echoSustainRange - 1)),
            t.echoDelayBeats = Math.round(1e3 * (this.echoDelay + 1) * p.echoDelayStepTicks / (p.ticksPerPart * p.partsPerBeat)) / 1e3),
            D(this.effects) && (t.reverb = Math.round(100 * this.reverb / (p.reverbRange - 1))),
            4 != this.type && (t.fadeInSeconds = Math.round(1e4 * Jt.fadeInSettingToSeconds(this.fadeIn)) / 1e4,
            t.fadeOutTicks = Jt.fadeOutSettingToTicks(this.fadeOut)),
            5 == this.type || 7 == this.type) {
                t.harmonics = [];
                for (let e = 0; e < p.harmonicsControlPoints; e++)
                    t.harmonics[e] = Math.round(100 * this.harmonicsWave.harmonics[e] / p.harmonicsMax)
            }
            if (2 == this.type)
                t.wave = p.chipNoises[this.chipNoise].name,
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign);
            else if (3 == this.type) {
                t.spectrum = [];
                for (let e = 0; e < p.spectrumControlPoints; e++)
                    t.spectrum[e] = Math.round(100 * this.spectrumWave.spectrum[e] / p.spectrumMax);
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign)
            } else if (4 == this.type) {
                t.drums = [];
                for (let e = 0; e < p.drumCount; e++) {
                    const i = [];
                    for (let t = 0; t < p.spectrumControlPoints; t++)
                        i[t] = Math.round(100 * this.drumsetSpectrumWaves[e].spectrum[t] / p.spectrumMax);
                    t.drums[e] = {
                        filterEnvelope: this.getDrumsetEnvelope(e).name,
                        spectrum: i
                    }
                }
            } else if (0 == this.type)
                t.wave = p.chipWaves[this.chipWave].name,
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign),
                t.isUsingAdvancedLoopControls = this.isUsingAdvancedLoopControls,
                t.chipWaveLoopStart = this.chipWaveLoopStart,
                t.chipWaveLoopEnd = this.chipWaveLoopEnd,
                t.chipWaveLoopMode = this.chipWaveLoopMode,
                t.chipWavePlayBackwards = this.chipWavePlayBackwards,
                t.chipWaveStartOffset = this.chipWaveStartOffset;
            else if (6 == this.type)
                t.pulseWidth = this.pulseWidth,
                t.decimalOffset = this.decimalOffset,
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign);
            else if (8 == this.type)
                t.pulseWidth = this.pulseWidth,
                t.decimalOffset = this.decimalOffset,
                t.dynamism = Math.round(100 * this.supersawDynamism / p.supersawDynamismMax),
                t.spread = Math.round(100 * this.supersawSpread / p.supersawSpreadMax),
                t.shape = Math.round(100 * this.supersawShape / p.supersawShapeMax);
            else if (7 == this.type)
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign),
                t.stringSustain = Math.round(100 * this.stringSustain / (p.stringSustainRange - 1)),
                p.enableAcousticSustain && (t.stringSustainType = p.sustainTypeNames[this.stringSustainType]);
            else if (5 == this.type)
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign);
            else if (1 == this.type || 11 == this.type) {
                const e = [];
                for (const t of this.operators)
                    e.push({
                        frequency: p.operatorFrequencies[t.frequency].name,
                        amplitude: t.amplitude,
                        waveform: p.operatorWaves[t.waveform].name,
                        pulseWidth: t.pulseWidth
                    });
                if (1 == this.type)
                    t.algorithm = p.algorithms[this.algorithm].name,
                    t.feedbackType = p.feedbacks[this.feedbackType].name,
                    t.feedbackAmplitude = this.feedbackAmplitude,
                    t.operators = e;
                else {
                    if (t.algorithm = p.algorithms6Op[this.algorithm6Op].name,
                    t.feedbackType = p.feedbacks6Op[this.feedbackType6Op].name,
                    t.feedbackAmplitude = this.feedbackAmplitude,
                    0 == this.algorithm6Op) {
                        const e = {};
                        e.mods = this.customAlgorithm.modulatedBy,
                        e.carrierCount = this.customAlgorithm.carrierCount,
                        t.customAlgorithm = e
                    }
                    if (0 == this.feedbackType6Op) {
                        const e = {};
                        e.mods = this.customFeedbackType.indices,
                        t.customFeedback = e
                    }
                    t.operators = e
                }
            } else if (9 == this.type) {
                t.wave = p.chipWaves[this.chipWave].name,
                t.unison = this.unison == p.unisons.length ? "custom" : p.unisons[this.unison].name,
                this.unison == p.unisons.length && (t.unisonVoices = this.unisonVoices,
                t.unisonSpread = this.unisonSpread,
                t.unisonOffset = this.unisonOffset,
                t.unisonExpression = this.unisonExpression,
                t.unisonSign = this.unisonSign),
                t.customChipWave = new Float64Array(64),
                t.customChipWaveIntegral = new Float64Array(65);
                for (let e = 0; e < this.customChipWave.length; e++)
                    t.customChipWave[e] = this.customChipWave[e]
            } else {
                if (10 != this.type)
                    throw new Error("Unrecognized instrument type");
                t.modChannels = [],
                t.modInstruments = [],
                t.modSettings = [],
                t.modFilterTypes = [];
                for (let e = 0; e < p.modCount; e++)
                    t.modChannels[e] = this.modChannels[e],
                    t.modInstruments[e] = this.modInstruments[e],
                    t.modSettings[e] = this.modulators[e],
                    t.modFilterTypes[e] = this.modFilterTypes[e]
            }
            const i = [];
            for (let t = 0; t < this.envelopeCount; t++)
                i.push(this.envelopes[t].toJsonObject());
            return t.envelopes = i,
            t
        }
        fromJsonObject(t, e, i, n, s, o=0, a=p.jsonFormat) {
            null == t && (t = {});
            const r = a.toLowerCase();
            let h = p.instrumentTypeNames.indexOf(t.type);
            if ("synthbox" == r && "FM" == t.type && (h = p.instrumentTypeNames.indexOf("FM6op")),
            -1 == h && (h = i ? 10 : e ? 2 : 0),
            this.setTypeAndReset(h, e, i),
            this.effects &= -5,
            null != t.preset && (this.preset = t.preset >>> 0),
            null != t.volume ? this.volume = "jummbox" == r || "midbox" == r || "synthbox" == r || "goldbox" == r || "paandorasbox" == r || "ultrabox" == r ? yt(-p.volumeRange / 2, p.volumeRange / 2 + 1, 0 | t.volume) : Math.round(25 * -yt(0, 8, Math.round(5 - (0 | t.volume) / 20)) / 7) : this.volume = 0,
            null != t.envelopeSpeed ? this.envelopeSpeed = yt(0, p.modulators.dictionary["envelope speed"].maxRawVol + 1, 0 | t.envelopeSpeed) : this.envelopeSpeed = 12,
            null != t.discreteEnvelope ? this.discreteEnvelope = t.discreteEnvelope : this.discreteEnvelope = !1,
            Array.isArray(t.effects)) {
                let e = 0;
                for (let i = 0; i < t.effects.length; i++)
                    e |= 1 << p.effectNames.indexOf(t.effects[i]);
                this.effects = 4095 & e
            } else {
                const e = ["none", "reverb", "chorus", "chorus & reverb"];
                this.effects = e.indexOf(t.effects),
                -1 == this.effects && (this.effects = 2 == this.type ? 0 : 1)
            }
            this.transition = p.transitions.dictionary.normal.index;
            const l = t.transition || t.envelope;
            if (null != l) {
                let e = p.transitions.dictionary[l];
                if (null == t.fadeInSeconds || null == t.fadeOutTicks) {
                    const t = {
                        binary: {
                            transition: "interrupt",
                            fadeInSeconds: 0,
                            fadeOutTicks: -1
                        },
                        seamless: {
                            transition: "interrupt",
                            fadeInSeconds: 0,
                            fadeOutTicks: -1
                        },
                        sudden: {
                            transition: "normal",
                            fadeInSeconds: 0,
                            fadeOutTicks: -3
                        },
                        hard: {
                            transition: "normal",
                            fadeInSeconds: 0,
                            fadeOutTicks: -3
                        },
                        smooth: {
                            transition: "normal",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        },
                        soft: {
                            transition: "normal",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        },
                        slide: {
                            transition: "slide in pattern",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        },
                        "cross fade": {
                            transition: "normal",
                            fadeInSeconds: .04,
                            fadeOutTicks: 6
                        },
                        "hard fade": {
                            transition: "normal",
                            fadeInSeconds: 0,
                            fadeOutTicks: 48
                        },
                        "medium fade": {
                            transition: "normal",
                            fadeInSeconds: .0125,
                            fadeOutTicks: 72
                        },
                        "soft fade": {
                            transition: "normal",
                            fadeInSeconds: .06,
                            fadeOutTicks: 96
                        }
                    }[l];
                    null != t && (e = p.transitions.dictionary[t.transition],
                    this.fadeIn = Jt.secondsToFadeInSetting(t.fadeInSeconds),
                    this.fadeOut = Jt.ticksToFadeOutSetting(t.fadeOutTicks))
                }
                null != e && (this.transition = e.index),
                this.transition != p.transitions.dictionary.normal.index && (this.effects = 1024 | this.effects)
            }
            null != t.fadeInSeconds && (this.fadeIn = Jt.secondsToFadeInSetting(+t.fadeInSeconds)),
            null != t.fadeOutTicks && (this.fadeOut = Jt.ticksToFadeOutSetting(+t.fadeOutTicks));
            {
                const e = t.chord
                  , i = {
                    harmony: "simultaneous"
                }
                  , n = p.chords.dictionary[i[e]] || p.chords.dictionary[e];
                null != n ? this.chord = n.index : 2 == this.type ? this.chord = p.chords.dictionary.arpeggio.index : 7 == this.type ? this.chord = p.chords.dictionary.strum.index : 0 == this.type ? this.chord = p.chords.dictionary.arpeggio.index : 1 == this.type || 11 == this.type ? this.chord = p.chords.dictionary["custom interval"].index : this.chord = p.chords.dictionary.simultaneous.index
            }
            this.unison = p.unisons.dictionary.none.index;
            const c = t.unison || t.interval || t.chorus;
            if (null != c) {
                const t = {
                    union: "none",
                    fifths: "fifth",
                    octaves: "octave",
                    error: "voiced"
                }
                  , e = p.unisons.dictionary[t[c]] || p.unisons.dictionary[c];
                null != e && (this.unison = e.index),
                "custom" == c && (this.unison = p.unisons.length)
            }
            if (this.unisonVoices = null == t.unisonVoices ? p.unisons[this.unison].voices : t.unisonVoices,
            this.unisonSpread = null == t.unisonSpread ? p.unisons[this.unison].spread : t.unisonSpread,
            this.unisonOffset = null == t.unisonOffset ? p.unisons[this.unison].offset : t.unisonOffset,
            this.unisonExpression = null == t.unisonExpression ? p.unisons[this.unison].expression : t.unisonExpression,
            this.unisonSign = null == t.unisonSign ? p.unisons[this.unison].sign : t.unisonSign,
            "custom harmony" == t.chorus && (this.unison = p.unisons.dictionary.hum.index,
            this.chord = p.chords.dictionary["custom interval"].index),
            this.chord == p.chords.dictionary.simultaneous.index || Array.isArray(t.effects) || (this.effects = 2048 | this.effects),
            null != t.pitchShiftSemitones && (this.pitchShift = yt(0, p.pitchShiftRange, Math.round(+t.pitchShiftSemitones))),
            null != t.octoff) {
                let e = t.octoff;
                this.effects = 128 | this.effects,
                this.pitchShift = "+1 (octave)" == e || "+2 (2 octaves)" == e ? 24 : "+1/2 (fifth)" == e || "+1 1/2 (octave and fifth)" == e ? 18 : "-1 (octave)" == e || "-2 (2 octaves" == e ? 0 : "-1/2 (fifth)" == e || "-1 1/2 (octave and fifth)" == e ? 6 : 12
            }
            null != t.detuneCents && (this.detune = yt(p.detuneMin, p.detuneMax + 1, Math.round(Jt.centsToDetune(+t.detuneCents)))),
            this.vibrato = p.vibratos.dictionary.none.index;
            const d = t.vibrato || t.effect;
            if (null != d) {
                const e = {
                    "vibrato light": "light",
                    "vibrato delayed": "delayed",
                    "vibrato heavy": "heavy"
                }
                  , i = p.vibratos.dictionary[e[c]] || p.vibratos.dictionary[d];
                null != i ? this.vibrato = i.index : "custom" == d && (this.vibrato = p.vibratos.length),
                this.vibrato == p.vibratos.length ? (this.vibratoDepth = t.vibratoDepth,
                this.vibratoSpeed = t.vibratoSpeed,
                this.vibratoDelay = t.vibratoDelay,
                this.vibratoType = t.vibratoType) : (this.vibratoDepth = p.vibratos[this.vibrato].amplitude,
                this.vibratoDelay = p.vibratos[this.vibrato].delayTicks / 2,
                this.vibratoSpeed = 10,
                this.vibratoType = p.vibratos[this.vibrato].type),
                i != p.vibratos.dictionary.none && (this.effects = 512 | this.effects)
            }
            if (null != t.pan ? this.pan = yt(0, p.panMax + 1, Math.round(p.panCenter + (0 | t.pan) * p.panCenter / 100)) : null != t.ipan ? this.pan = yt(0, p.panMax + 1, p.panCenter + -50 * t.ipan) : this.pan = p.panCenter,
            this.pan != p.panCenter && (this.effects = 4 | this.effects),
            null != t.panDelay ? this.panDelay = 0 | t.panDelay : this.panDelay = 0,
            null != t.detune ? this.detune = yt(p.detuneMin, p.detuneMax + 1, 0 | t.detune) : null == t.detuneCents && (this.detune = p.detuneCenter),
            null != t.distortion && (this.distortion = yt(0, p.distortionRange, Math.round((p.distortionRange - 1) * (0 | t.distortion) / 100))),
            null != t.bitcrusherOctave && (this.bitcrusherFreq = p.bitcrusherFreqRange - 1 - +t.bitcrusherOctave / p.bitcrusherOctaveStep),
            null != t.bitcrusherQuantization && (this.bitcrusherQuantization = yt(0, p.bitcrusherQuantizationRange, Math.round((p.bitcrusherQuantizationRange - 1) * (0 | t.bitcrusherQuantization) / 100))),
            null != t.echoSustain && (this.echoSustain = yt(0, p.echoSustainRange, Math.round((p.echoSustainRange - 1) * (0 | t.echoSustain) / 100))),
            null != t.echoDelayBeats && (this.echoDelay = yt(0, p.echoDelayRange, Math.round(+t.echoDelayBeats * (p.ticksPerPart * p.partsPerBeat) / p.echoDelayStepTicks - 1))),
            isNaN(t.chorus) || (this.chorus = yt(0, p.chorusRange, Math.round((p.chorusRange - 1) * (0 | t.chorus) / 100))),
            null != t.reverb ? this.reverb = yt(0, p.reverbRange, Math.round((p.reverbRange - 1) * (0 | t.reverb) / 100)) : this.reverb = o,
            null != t.pulseWidth ? this.pulseWidth = yt(1, p.pulseWidthRange + 1, Math.round(t.pulseWidth)) : this.pulseWidth = p.pulseWidthRange,
            null != t.decimalOffset ? this.decimalOffset = yt(0, 100, Math.round(t.decimalOffset)) : this.decimalOffset = 0,
            null != t.dynamism ? this.supersawDynamism = yt(0, p.supersawDynamismMax + 1, Math.round(p.supersawDynamismMax * (0 | t.dynamism) / 100)) : this.supersawDynamism = p.supersawDynamismMax,
            null != t.spread ? this.supersawSpread = yt(0, p.supersawSpreadMax + 1, Math.round(p.supersawSpreadMax * (0 | t.spread) / 100)) : this.supersawSpread = Math.ceil(p.supersawSpreadMax / 2),
            null != t.shape ? this.supersawShape = yt(0, p.supersawShapeMax + 1, Math.round(p.supersawShapeMax * (0 | t.shape) / 100)) : this.supersawShape = 0,
            null != t.harmonics) {
                for (let e = 0; e < p.harmonicsControlPoints; e++)
                    this.harmonicsWave.harmonics[e] = Math.max(0, Math.min(p.harmonicsMax, Math.round(p.harmonicsMax * +t.harmonics[e] / 100)));
                this.harmonicsWave.markCustomWaveDirty()
            } else
                this.harmonicsWave.reset();
            if (null != t.spectrum)
                for (let e = 0; e < p.spectrumControlPoints; e++)
                    this.spectrumWave.spectrum[e] = Math.max(0, Math.min(p.spectrumMax, Math.round(p.spectrumMax * +t.spectrum[e] / 100))),
                    this.spectrumWave.markCustomWaveDirty();
            else
                this.spectrumWave.reset(e);
            null != t.stringSustain ? this.stringSustain = yt(0, p.stringSustainRange, Math.round((p.stringSustainRange - 1) * (0 | t.stringSustain) / 100)) : this.stringSustain = 10,
            this.stringSustainType = p.enableAcousticSustain ? p.sustainTypeNames.indexOf(t.stringSustainType) : 0,
            -1 == this.stringSustainType && (this.stringSustainType = 0),
            2 == this.type && (this.chipNoise = p.chipNoises.findIndex((e => e.name == t.wave)),
            "pink noise" == t.wave && (this.chipNoise = p.chipNoises.findIndex((t => "pink" == t.name))),
            "brownian noise" == t.wave && (this.chipNoise = p.chipNoises.findIndex((t => "brownian" == t.name))),
            -1 == this.chipNoise && (this.chipNoise = 1));
            const m = {
                custom: "note size",
                steady: "none",
                "pluck 1": "twang 1",
                "pluck 2": "twang 2",
                "pluck 3": "twang 3"
            }
              , u = t => null != m[t] ? p.envelopes.dictionary[m[t]] : p.envelopes.dictionary[t];
            if (4 == this.type && null != t.drums)
                for (let e = 0; e < p.drumCount; e++) {
                    const i = t.drums[e];
                    if (null != i) {
                        if (this.drumsetEnvelopes[e] = p.envelopes.dictionary["twang 2"].index,
                        null != i.filterEnvelope) {
                            const t = u(i.filterEnvelope);
                            null != t && (this.drumsetEnvelopes[e] = t.index)
                        }
                        if (null != i.spectrum)
                            for (let t = 0; t < p.spectrumControlPoints; t++)
                                this.drumsetSpectrumWaves[e].spectrum[t] = Math.max(0, Math.min(p.spectrumMax, Math.round(p.spectrumMax * +i.spectrum[t] / 100)));
                        this.drumsetSpectrumWaves[e].markCustomWaveDirty()
                    }
                }
            if (0 == this.type) {
                const e = {
                    triangle: 1,
                    square: 2,
                    "pulse wide": 3,
                    "pulse narrow": 4,
                    sawtooth: 5,
                    "double saw": 6,
                    "double pulse": 7,
                    spiky: 8,
                    plateau: 0
                }
                  , i = {
                    "10% pulse": 22,
                    "sunsoft bass": 23,
                    "loud pulse": 24,
                    sax: 25,
                    guitar: 26,
                    "atari bass": 28,
                    "atari pulse": 29,
                    "1% pulse": 30,
                    "curved sawtooth": 31,
                    viola: 32,
                    brass: 33,
                    "acoustic bass": 34,
                    lyre: 35,
                    "ramp pulse": 36,
                    piccolo: 37,
                    squaretooth: 38,
                    flatline: 39,
                    "pnryshk a (u5)": 40,
                    "pnryshk b (riff)": 41
                }
                  , n = {
                    "shrill lute": 42,
                    "shrill bass": 44,
                    "nes pulse": 45,
                    "saw bass": 46,
                    euphonium: 47,
                    "shrill pulse": 48,
                    "r-sawtooth": 49,
                    recorder: 50,
                    "narrow saw": 51,
                    "deep square": 52,
                    "ring pulse": 53,
                    "double sine": 54,
                    contrabass: 55,
                    "double bass": 56
                }
                  , s = {
                    "semi-square": 63,
                    "deep square": 64,
                    squaretal: 40,
                    "saw wide": 65,
                    "saw narrow ": 66,
                    "deep sawtooth": 67,
                    sawtal: 68,
                    pulse: 69,
                    "triple pulse": 70,
                    "high pulse": 71,
                    "deep pulse": 72
                }
                  , o = {
                    test1: 56,
                    "pokey 4bit lfsr": 57,
                    "pokey 5step bass": 58,
                    "isolated spiky": 59,
                    "unnamed 1": 60,
                    "unnamed 2": 61,
                    "guitar string": 75,
                    intense: 76,
                    "buzz wave": 77,
                    "pokey square": 57,
                    "pokey bass": 58,
                    "banana wave": 83,
                    "test 1": 84,
                    "test 2": 84,
                    "real snare": 85,
                    "earthbound o. guitar": 86
                }
                  , a = {
                    kick: 87,
                    snare: 88,
                    piano1: 89,
                    WOW: 90,
                    overdrive: 91,
                    trumpet: 92,
                    saxophone: 93,
                    orchestrahit: 94,
                    "detached violin": 95,
                    synth: 96,
                    sonic3snare: 97,
                    "come on": 98,
                    choir: 99,
                    overdriveguitar: 100,
                    flute: 101,
                    "legato violin": 102,
                    "tremolo violin": 103,
                    "amen break": 104,
                    "pizzicato violin": 105,
                    "tim allen grunt": 106,
                    tuba: 107,
                    loopingcymbal: 108,
                    standardkick: 109,
                    standardsnare: 110,
                    closedhihat: 111,
                    foothihat: 112,
                    openhihat: 113,
                    crashcymbal: 114,
                    pianoC4: 115,
                    "liver pad": 116,
                    marimba: 117,
                    susdotwav: 118,
                    wackyboxtts: 119
                };
                this.chipWave = -1;
                const r = t.wave;
                for (const t of [e, i, n, s, o, a])
                    if (-1 == this.chipWave && null != t[r] && null != p.chipWaves[t[r]]) {
                        this.chipWave = t[r];
                        break
                    }
                if (-1 == this.chipWave) {
                    const t = p.chipWaves.findIndex((t => t.name == r));
                    -1 != t && (this.chipWave = t)
                }
                -1 == this.chipWave && (this.chipWave = 1)
            }
            if (1 == this.type || 11 == this.type) {
                if (1 == this.type)
                    this.algorithm = p.algorithms.findIndex((e => e.name == t.algorithm)),
                    -1 == this.algorithm && (this.algorithm = 0),
                    this.feedbackType = p.feedbacks.findIndex((e => e.name == t.feedbackType)),
                    -1 == this.feedbackType && (this.feedbackType = 0);
                else {
                    if (this.algorithm6Op = p.algorithms6Op.findIndex((e => e.name == t.algorithm)),
                    -1 == this.algorithm6Op && (this.algorithm6Op = 1),
                    0 == this.algorithm6Op ? this.customAlgorithm.set(t.customAlgorithm.carrierCount, t.customAlgorithm.mods) : this.customAlgorithm.fromPreset(this.algorithm6Op),
                    this.feedbackType6Op = p.feedbacks6Op.findIndex((e => e.name == t.feedbackType)),
                    -1 == this.feedbackType6Op) {
                        let e = k([{
                            name: "2⟲ 3⟲",
                            indices: [[], [2], [3], [], [], []]
                        }, {
                            name: "3⟲ 4⟲",
                            indices: [[], [], [3], [4], [], []]
                        }, {
                            name: "4⟲ 5⟲",
                            indices: [[], [], [], [4], [5], []]
                        }, {
                            name: "5⟲ 6⟲",
                            indices: [[], [], [], [], [5], [6]]
                        }, {
                            name: "1⟲ 6⟲",
                            indices: [[1], [], [], [], [], [6]]
                        }, {
                            name: "1⟲ 3⟲",
                            indices: [[1], [], [3], [], [], []]
                        }, {
                            name: "1⟲ 4⟲",
                            indices: [[1], [], [], [4], [], []]
                        }, {
                            name: "1⟲ 5⟲",
                            indices: [[1], [], [], [], [5], []]
                        }, {
                            name: "4⟲ 6⟲",
                            indices: [[], [], [], [4], [], [6]]
                        }, {
                            name: "2⟲ 6⟲",
                            indices: [[], [2], [], [], [], [6]]
                        }, {
                            name: "3⟲ 6⟲",
                            indices: [[], [], [3], [], [], [6]]
                        }, {
                            name: "4⟲ 5⟲ 6⟲",
                            indices: [[], [], [], [4], [5], [6]]
                        }, {
                            name: "1⟲ 3⟲ 6⟲",
                            indices: [[1], [], [3], [], [], [6]]
                        }, {
                            name: "2→5",
                            indices: [[], [], [], [], [2], []]
                        }, {
                            name: "2→6",
                            indices: [[], [], [], [], [], [2]]
                        }, {
                            name: "3→5",
                            indices: [[], [], [], [], [3], []]
                        }, {
                            name: "3→6",
                            indices: [[], [], [], [], [], [3]]
                        }, {
                            name: "4→6",
                            indices: [[], [], [], [], [], [4]]
                        }, {
                            name: "5→6",
                            indices: [[], [], [], [], [], [5]]
                        }, {
                            name: "1→3→4",
                            indices: [[], [], [1], [], [3], []]
                        }, {
                            name: "2→5→6",
                            indices: [[], [], [], [], [2], [5]]
                        }, {
                            name: "2→4→6",
                            indices: [[], [], [], [2], [], [4]]
                        }, {
                            name: "4→5→6",
                            indices: [[], [], [], [], [4], [5]]
                        }, {
                            name: "3→4→5→6",
                            indices: [[], [], [], [3], [4], [5]]
                        }, {
                            name: "2→3→4→5→6",
                            indices: [[], [1], [2], [3], [4], [5]]
                        }, {
                            name: "1→2→3→4→5→6",
                            indices: [[], [1], [2], [3], [4], [5]]
                        }])
                          , i = e[e.findIndex((e => e.name == t.feedbackType))].indices;
                        null != i ? (this.feedbackType6Op = 0,
                        this.customFeedbackType.set(i)) : this.feedbackType6Op = 1
                    }
                    0 == this.feedbackType6Op && null != t.customFeedback ? this.customFeedbackType.set(t.customFeedback.mods) : this.customFeedbackType.fromPreset(this.feedbackType6Op)
                }
                null != t.feedbackAmplitude ? this.feedbackAmplitude = yt(0, p.operatorAmplitudeMax + 1, 0 | t.feedbackAmplitude) : this.feedbackAmplitude = 0;
                for (let e = 0; e < p.operatorCount + (11 == this.type ? 2 : 0); e++) {
                    const i = this.operators[e];
                    let n;
                    if (null != t.operators && (n = t.operators[e]),
                    null == n && (n = {}),
                    i.frequency = p.operatorFrequencies.findIndex((t => t.name == n.frequency)),
                    -1 == i.frequency && (i.frequency = 0),
                    null != n.amplitude ? i.amplitude = yt(0, p.operatorAmplitudeMax + 1, 0 | n.amplitude) : i.amplitude = 0,
                    null != n.waveform) {
                        if ("goldbox" == r && e > 3) {
                            i.waveform = 0;
                            continue
                        }
                        i.waveform = p.operatorWaves.findIndex((t => t.name == n.waveform)),
                        -1 == i.waveform && ("square" == n.waveform ? (i.waveform = p.operatorWaves.dictionary["pulse width"].index,
                        i.pulseWidth = 5) : "rounded" == n.waveform ? i.waveform = p.operatorWaves.dictionary["quasi-sine"].index : i.waveform = 0)
                    } else
                        i.waveform = 0;
                    null != n.pulseWidth ? i.pulseWidth = 0 | n.pulseWidth : i.pulseWidth = 5
                }
            } else if (9 == this.type) {
                if (t.customChipWave) {
                    for (let e = 0; e < 64; e++)
                        this.customChipWave[e] = t.customChipWave[e];
                    let e = 0;
                    for (let t = 0; t < this.customChipWave.length; t++)
                        e += this.customChipWave[t];
                    const i = e / this.customChipWave.length;
                    let n = 0
                      , s = 0;
                    for (let t = 0; t < this.customChipWave.length; t++)
                        n += s,
                        s = this.customChipWave[t] - i,
                        this.customChipWaveIntegral[t] = n;
                    this.customChipWaveIntegral[64] = 0
                }
            } else if (10 == this.type && null != t.modChannels)
                for (let e = 0; e < p.modCount; e++)
                    this.modChannels[e] = t.modChannels[e],
                    this.modInstruments[e] = t.modInstruments[e],
                    this.modulators[e] = t.modSettings[e],
                    null != t.modFilterTypes && (this.modFilterTypes[e] = t.modFilterTypes[e]);
            if (10 != this.type) {
                this.chord == p.chords.dictionary.arpeggio.index && null != t.arpeggioSpeed ? this.arpeggioSpeed = t.arpeggioSpeed : this.arpeggioSpeed = n ? 9 : 12,
                null != t.fastTwoNoteArp ? this.fastTwoNoteArp = t.fastTwoNoteArp : this.fastTwoNoteArp = s,
                null != t.clicklessTransition ? this.clicklessTransition = t.clicklessTransition : this.clicklessTransition = !1,
                null != t.aliases ? this.aliases = t.aliases : "modbox" == r ? (this.effects = 8 | this.effects,
                this.aliases = !0,
                this.distortion = 0) : this.aliases = !1,
                null != t.noteFilterType && (this.noteFilterType = t.noteFilterType),
                null != t.noteSimpleCut && (this.noteFilterSimpleCut = t.noteSimpleCut),
                null != t.noteSimplePeak && (this.noteFilterSimplePeak = t.noteSimplePeak),
                null != t.noteFilter ? this.noteFilter.fromJsonObject(t.noteFilter) : this.noteFilter.reset();
                for (let e = 0; e < p.filterMorphCount; e++)
                    Array.isArray(t["noteSubFilters" + e]) && (this.noteSubFilters[e] = new Rt,
                    this.noteSubFilters[e].fromJsonObject(t["noteSubFilters" + e]));
                if (null != t.eqFilterType && (this.eqFilterType = t.eqFilterType),
                null != t.eqSimpleCut && (this.eqFilterSimpleCut = t.eqSimpleCut),
                null != t.eqSimplePeak && (this.eqFilterSimplePeak = t.eqSimplePeak),
                Array.isArray(t.eqFilter))
                    this.eqFilter.fromJsonObject(t.eqFilter);
                else {
                    this.eqFilter.reset();
                    const e = {}
                      , i = 8e3
                      , n = 11
                      , s = 8;
                    if (null != t.filterCutoffHz ? e.filterCutoff = yt(0, n, Math.round(n - 1 + 2 * Math.log((0 | t.filterCutoffHz) / i) / Math.LN2)) : e.filterCutoff = 0 == this.type ? 6 : 10,
                    null != t.filterResonance ? e.filterResonance = yt(0, s, Math.round((s - 1) * (0 | t.filterResonance) / 100)) : e.filterResonance = 0,
                    e.filterEnvelope = u(t.filterEnvelope),
                    e.pulseEnvelope = u(t.pulseEnvelope),
                    e.feedbackEnvelope = u(t.feedbackEnvelope),
                    Array.isArray(t.operators)) {
                        e.operatorEnvelopes = [];
                        for (let i = 0; i < p.operatorCount + (11 == this.type ? 2 : 0); i++) {
                            let n;
                            null != t.operators[i] && (n = u(t.operators[i].envelope)),
                            e.operatorEnvelopes[i] = null != n ? n : p.envelopes.dictionary.none
                        }
                    }
                    if (null != t.filter) {
                        const i = [10, 6, 3, 0, 8, 5, 2]
                          , n = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"]
                          , s = ["none", "bright", "medium", "soft", "decay bright", "decay medium", "decay soft"]
                          , o = {
                            "sustain sharp": 1,
                            "sustain medium": 2,
                            "sustain soft": 3,
                            "decay sharp": 4
                        };
                        let a = null != o[t.filter] ? o[t.filter] : s.indexOf(t.filter);
                        -1 == a && (a = 0),
                        e.filterCutoff = i[a],
                        e.filterEnvelope = u(n[a]),
                        e.filterResonance = 0
                    }
                    this.convertLegacySettings(e, !0)
                }
                for (let e = 0; e < p.filterMorphCount; e++)
                    Array.isArray(t["eqSubFilters" + e]) && (this.eqSubFilters[e] = new Rt,
                    this.eqSubFilters[e].fromJsonObject(t["eqSubFilters" + e]));
                if (Array.isArray(t.envelopes)) {
                    const e = t.envelopes;
                    for (let t = 0; t < e.length && !(this.envelopeCount >= p.maxEnvelopeCount); t++) {
                        const i = new $t;
                        i.fromJsonObject(e[t]),
                        this.addEnvelope(i.target, i.index, i.envelope)
                    }
                }
            }
            0 === h && (null != t.isUsingAdvancedLoopControls ? (this.isUsingAdvancedLoopControls = t.isUsingAdvancedLoopControls,
            this.chipWaveLoopStart = t.chipWaveLoopStart,
            this.chipWaveLoopEnd = t.chipWaveLoopEnd,
            this.chipWaveLoopMode = t.chipWaveLoopMode,
            this.chipWavePlayBackwards = t.chipWavePlayBackwards,
            this.chipWaveStartOffset = t.chipWaveStartOffset) : (this.isUsingAdvancedLoopControls = !1,
            this.chipWaveLoopStart = 0,
            this.chipWaveLoopEnd = p.rawRawChipWaves[this.chipWave].samples.length - 1,
            this.chipWaveLoopMode = 0,
            this.chipWavePlayBackwards = !1,
            this.chipWaveStartOffset = 0))
        }
        getLargestControlPointCount(t) {
            let e;
            if (t) {
                e = this.noteFilter.controlPointCount;
                for (let t = 0; t < p.filterMorphCount; t++)
                    null != this.noteSubFilters[t] && this.noteSubFilters[t].controlPointCount > e && (e = this.noteSubFilters[t].controlPointCount)
            } else {
                e = this.eqFilter.controlPointCount;
                for (let t = 0; t < p.filterMorphCount; t++)
                    null != this.eqSubFilters[t] && this.eqSubFilters[t].controlPointCount > e && (e = this.eqSubFilters[t].controlPointCount)
            }
            return e
        }
        static frequencyFromPitch(t) {
            return 440 * Math.pow(2, (t - 69) / 12)
        }
        addEnvelope(t, e, i) {
            let n = !1;
            if (this.supportsEnvelopeTarget(t, e) || (n = !0),
            this.envelopeCount >= p.maxEnvelopeCount)
                throw new Error;
            for (; this.envelopes.length <= this.envelopeCount; )
                this.envelopes[this.envelopes.length] = new $t;
            const s = this.envelopes[this.envelopeCount];
            s.target = n ? p.instrumentAutomationTargets.dictionary.none.index : t,
            s.index = n ? 0 : e,
            s.envelope = i,
            this.envelopeCount++
        }
        supportsEnvelopeTarget(t, e) {
            const i = p.instrumentAutomationTargets[t];
            if (null == i.computeIndex && "none" != i.name)
                return !1;
            if (e >= i.maxCount)
                return !1;
            if (null != i.compatibleInstruments && -1 == i.compatibleInstruments.indexOf(this.type))
                return !1;
            if (null != i.effect && 0 == (this.effects & 1 << i.effect))
                return !1;
            if (i.isFilter) {
                let t = this.noteFilter.controlPointCount;
                if (this.noteFilterType && (t = 1),
                e >= t)
                    return !1
            }
            return "operatorFrequency" != i.name && "operatorAmplitude" != i.name || !(e >= 4 + (11 == this.type ? 2 : 0))
        }
        clearInvalidEnvelopeTargets() {
            for (let t = 0; t < this.envelopeCount; t++) {
                const e = this.envelopes[t].target
                  , i = this.envelopes[t].index;
                this.supportsEnvelopeTarget(e, i) || (this.envelopes[t].target = p.instrumentAutomationTargets.dictionary.none.index,
                this.envelopes[t].index = 0)
            }
        }
        getTransition() {
            return M(this.effects) ? p.transitions[this.transition] : 10 == this.type ? p.transitions.dictionary.interrupt : p.transitions.dictionary.normal
        }
        getFadeInSeconds() {
            return 4 == this.type ? 0 : Jt.fadeInSettingToSeconds(this.fadeIn)
        }
        getFadeOutTicks() {
            return 4 == this.type ? p.drumsetFadeOutTicks : Jt.fadeOutSettingToTicks(this.fadeOut)
        }
        getChord() {
            return S(this.effects) ? p.chords[this.chord] : p.chords.dictionary.simultaneous
        }
        getDrumsetEnvelope(t) {
            if (4 != this.type)
                throw new Error("Can't getDrumsetEnvelope() for non-drumset.");
            return p.envelopes[this.drumsetEnvelopes[t]]
        }
    }
    class _t {
        constructor() {
            this.octave = 0,
            this.instruments = [],
            this.patterns = [],
            this.bars = [],
            this.muted = !1,
            this.name = ""
        }
    }
    class Vt {
        constructor(t) {
            this.scaleCustom = [],
            this.channels = [],
            this.limitDecay = 4,
            this.limitRise = 4e3,
            this.compressionThreshold = 1,
            this.limitThreshold = 1,
            this.compressionRatio = 1,
            this.limitRatio = 1,
            this.masterGain = 1,
            this.inVolumeCap = 0,
            this.outVolumeCap = 0,
            this.getNewNoteVolume = (t, e, i, n) => {
                if (t && null != e && null != i && null != n) {
                    n = p.modCount - n - 1;
                    let t = p.modulators[this.channels[e].instruments[i].modulators[n]].newNoteVol
                      , s = p.modulators.dictionary.tempo.index;
                    return this.channels[e].instruments[i].modulators[n] == s && (t = this.tempo - p.modulators[s].convertRealFactor),
                    null != t ? t : 6
                }
                return 6
            }
            ,
            this.getVolumeCap = (t, e, i, n) => {
                if (t && null != e && null != i && null != n) {
                    n = p.modCount - n - 1;
                    let t = this.channels[e].instruments[i]
                      , s = p.modulators[t.modulators[n]]
                      , o = s.maxRawVol;
                    return null != o ? ("eq filter" != s.name && "note filter" != s.name || (o = p.filterMorphCount - 1,
                    t.modFilterTypes[n] > 0 && t.modFilterTypes[n] % 2 ? o = p.filterFreqRange : t.modFilterTypes[n] > 0 && (o = p.filterGainRange)),
                    o) : 6
                }
                return 6
            }
            ,
            this.getVolumeCapForSetting = (t, e, i) => {
                if (t) {
                    let t = p.modulators[e].maxRawVol;
                    return null != t ? (null == i || "eq filter" != p.modulators[e].name && "note filter" != p.modulators[e].name || (t = p.filterMorphCount - 1,
                    i > 0 && i % 2 ? t = p.filterFreqRange : i > 0 && (t = p.filterGainRange)),
                    t) : p.noteSizeMax
                }
                return p.noteSizeMax
            }
            ,
            null != t ? this.fromBase64String(t) : this.initToDefault(!0)
        }
        getChannelCount() {
            return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount
        }
        getMaxInstrumentsPerChannel() {
            return Math.max(this.layeredInstruments ? p.layeredInstrumentCountMax : p.instrumentCountMin, this.patternInstruments ? p.patternInstrumentCountMax : p.instrumentCountMin)
        }
        getMaxInstrumentsPerPattern(t) {
            return this.getMaxInstrumentsPerPatternForChannel(this.channels[t])
        }
        getMaxInstrumentsPerPatternForChannel(t) {
            return this.layeredInstruments ? Math.min(p.layeredInstrumentCountMax, t.instruments.length) : 1
        }
        getChannelIsNoise(t) {
            return t >= this.pitchChannelCount && t < this.pitchChannelCount + this.noiseChannelCount
        }
        getChannelIsMod(t) {
            return t >= this.pitchChannelCount + this.noiseChannelCount
        }
        initToDefault(t=!0) {
            if (this.scale = 0,
            this.scaleCustom = [!0, !1, !0, !0, !1, !1, !1, !0, !0, !1, !0, !0],
            this.key = 0,
            this.octave = 0,
            this.loopStart = 0,
            this.loopLength = 4,
            this.tempo = 120,
            this.reverb = 0,
            this.beatsPerBar = 8,
            this.barCount = 16,
            this.patternsPerChannel = 8,
            this.rhythm = 1,
            this.layeredInstruments = !1,
            this.patternInstruments = !1,
            this.title = "Untitled",
            document.title = this.title + " - " + N.versionDisplayName,
            t) {
                this.pitchChannelCount = 3,
                this.noiseChannelCount = 1,
                this.modChannelCount = 0;
                for (let t = 0; t < this.getChannelCount(); t++) {
                    const e = t >= this.pitchChannelCount && t < this.pitchChannelCount + this.noiseChannelCount
                      , i = t >= this.pitchChannelCount + this.noiseChannelCount;
                    this.channels.length <= t && (this.channels[t] = new _t);
                    const n = this.channels[t];
                    n.octave = Math.max(3 - t, 0);
                    for (let t = 0; t < this.patternsPerChannel; t++)
                        n.patterns.length <= t ? n.patterns[t] = new Pt : n.patterns[t].reset();
                    n.patterns.length = this.patternsPerChannel;
                    for (let t = 0; t < p.instrumentCountMin; t++)
                        n.instruments.length <= t && (n.instruments[t] = new Ht(e,i)),
                        n.instruments[t].setTypeAndReset(i ? 10 : e ? 2 : 0, e, i);
                    n.instruments.length = p.instrumentCountMin;
                    for (let t = 0; t < this.barCount; t++)
                        n.bars[t] = t < 4 ? 1 : 0;
                    n.bars.length = this.barCount
                }
                this.channels.length = this.getChannelCount()
            }
        }
        toBase64String() {
            let t, e = [];
            e.push(Vt.yt),
            e.push(St[Vt.bt]),
            e.push(78);
            var i = encodeURIComponent(this.title);
            e.push(St[i.length >> 6], St[63 & i.length]);
            for (let t = 0; t < i.length; t++)
                e.push(i.charCodeAt(t));
            if (e.push(110, St[this.pitchChannelCount], St[this.noiseChannelCount], St[this.modChannelCount]),
            e.push(115, St[this.scale]),
            this.scale == p.scales.dictionary.Custom.index)
                for (var n = 1; n < p.pitchesPerOctave; n++)
                    e.push(St[this.scaleCustom[n] ? 1 : 0]);
            e.push(107, St[this.key], St[this.octave - p.octaveMin]),
            e.push(108, St[this.loopStart >> 6], St[63 & this.loopStart]),
            e.push(101, St[this.loopLength - 1 >> 6], St[this.loopLength - 1 & 63]),
            e.push(116, St[this.tempo >> 6], St[63 & this.tempo]),
            e.push(97, St[this.beatsPerBar - 1]),
            e.push(103, St[this.barCount - 1 >> 6], St[this.barCount - 1 & 63]),
            e.push(106, St[this.patternsPerChannel - 1 >> 6], St[this.patternsPerChannel - 1 & 63]),
            e.push(114, St[this.rhythm]),
            e.push(79),
            1 != this.compressionRatio || 1 != this.limitRatio || 4e3 != this.limitRise || 4 != this.limitDecay || 1 != this.limitThreshold || 1 != this.compressionThreshold || 1 != this.masterGain ? (e.push(St[Math.round(this.compressionRatio < 1 ? 10 * this.compressionRatio : 10 + 60 * (this.compressionRatio - 1))]),
            e.push(St[Math.round(this.limitRatio < 1 ? 10 * this.limitRatio : 9 + this.limitRatio)]),
            e.push(St[this.limitDecay]),
            e.push(St[Math.round((this.limitRise - 2e3) / 250)]),
            e.push(St[Math.round(20 * this.compressionThreshold)]),
            e.push(St[Math.round(20 * this.limitThreshold)]),
            e.push(St[Math.round(50 * this.masterGain) >> 6], St[63 & Math.round(50 * this.masterGain)])) : e.push(St[63]),
            e.push(85);
            for (let t = 0; t < this.getChannelCount(); t++) {
                var s = encodeURIComponent(this.channels[t].name);
                e.push(St[s.length >> 6], St[63 & s.length]);
                for (let t = 0; t < s.length; t++)
                    e.push(s.charCodeAt(t))
            }
            if (e.push(105, St[this.layeredInstruments << 1 | this.patternInstruments]),
            this.layeredInstruments || this.patternInstruments)
                for (let t = 0; t < this.getChannelCount(); t++)
                    e.push(St[this.channels[t].instruments.length - p.instrumentCountMin]);
            e.push(111);
            for (let t = 0; t < this.pitchChannelCount; t++)
                e.push(St[this.channels[t].octave]);
            for (let t = 0; t < this.getChannelCount(); t++)
                for (let i = 0; i < this.channels[t].instruments.length; i++) {
                    const n = this.channels[t].instruments[i];
                    if (e.push(84, St[n.type]),
                    e.push(118, St[n.volume + p.volumeRange / 2 >> 6], St[n.volume + p.volumeRange / 2 & 63]),
                    e.push(117, St[n.preset >> 6], St[63 & n.preset]),
                    e.push(102),
                    e.push(St[+n.eqFilterType]),
                    n.eqFilterType)
                        e.push(St[n.eqFilterSimpleCut]),
                        e.push(St[n.eqFilterSimplePeak]);
                    else {
                        if (null == n.eqFilter)
                            e.push(St[0]),
                            console.log("Null EQ filter settings detected in toBase64String for channelIndex " + t + ", instrumentIndex " + i);
                        else {
                            e.push(St[n.eqFilter.controlPointCount]);
                            for (let t = 0; t < n.eqFilter.controlPointCount; t++) {
                                const i = n.eqFilter.controlPoints[t];
                                e.push(St[i.type], St[Math.round(i.freq)], St[Math.round(i.gain)])
                            }
                        }
                        let s = 0;
                        for (let t = 0; t < p.filterMorphCount - 1; t++)
                            s |= +(null != n.eqSubFilters[t + 1]) << t;
                        e.push(St[s >> 6], St[63 & s]);
                        for (let t = 0; t < p.filterMorphCount - 1; t++)
                            if (s & 1 << t) {
                                e.push(St[n.eqSubFilters[t + 1].controlPointCount]);
                                for (let i = 0; i < n.eqSubFilters[t + 1].controlPointCount; i++) {
                                    const s = n.eqSubFilters[t + 1].controlPoints[i];
                                    e.push(St[s.type], St[Math.round(s.freq)], St[Math.round(s.gain)])
                                }
                            }
                    }
                    if (e.push(113, St[n.effects >> 6], St[63 & n.effects]),
                    E(n.effects))
                        if (e.push(St[+n.noteFilterType]),
                        n.noteFilterType)
                            e.push(St[n.noteFilterSimpleCut]),
                            e.push(St[n.noteFilterSimplePeak]);
                        else {
                            if (null == n.noteFilter)
                                e.push(St[0]),
                                console.log("Null note filter settings detected in toBase64String for channelIndex " + t + ", instrumentIndex " + i);
                            else {
                                e.push(St[n.noteFilter.controlPointCount]);
                                for (let t = 0; t < n.noteFilter.controlPointCount; t++) {
                                    const i = n.noteFilter.controlPoints[t];
                                    e.push(St[i.type], St[Math.round(i.freq)], St[Math.round(i.gain)])
                                }
                            }
                            let s = 0;
                            for (let t = 0; t < p.filterMorphCount - 1; t++)
                                s |= +(null != n.noteSubFilters[t + 1]) << t;
                            e.push(St[s >> 6], St[63 & s]);
                            for (let t = 0; t < p.filterMorphCount - 1; t++)
                                if (s & 1 << t) {
                                    e.push(St[n.noteSubFilters[t + 1].controlPointCount]);
                                    for (let i = 0; i < n.noteSubFilters[t + 1].controlPointCount; i++) {
                                        const s = n.noteSubFilters[t + 1].controlPoints[i];
                                        e.push(St[s.type], St[Math.round(s.freq)], St[Math.round(s.gain)])
                                    }
                                }
                        }
                    if (M(n.effects) && e.push(St[n.transition]),
                    S(n.effects) && (e.push(St[n.chord]),
                    n.chord == p.chords.dictionary.arpeggio.index && (e.push(St[n.arpeggioSpeed]),
                    e.push(St[+n.fastTwoNoteArp]))),
                    F(n.effects) && e.push(St[n.pitchShift]),
                    C(n.effects) && e.push(St[n.detune - p.detuneMin >> 6], St[n.detune - p.detuneMin & 63]),
                    A(n.effects) && (e.push(St[n.vibrato]),
                    n.vibrato == p.vibratos.length && (e.push(St[Math.round(25 * n.vibratoDepth)]),
                    e.push(St[n.vibratoSpeed]),
                    e.push(St[Math.round(n.vibratoDelay)]),
                    e.push(St[n.vibratoType]))),
                    T(n.effects) && (e.push(St[n.distortion]),
                    e.push(St[+n.aliases])),
                    P(n.effects) && e.push(St[n.bitcrusherFreq], St[n.bitcrusherQuantization]),
                    B(n.effects) && (e.push(St[n.pan >> 6], St[63 & n.pan]),
                    e.push(St[n.panDelay])),
                    I(n.effects) && e.push(St[n.chorus]),
                    L(n.effects) && e.push(St[n.echoSustain], St[n.echoDelay]),
                    D(n.effects) && e.push(St[n.reverb]),
                    4 != n.type && (e.push(100, St[n.fadeIn], St[n.fadeOut]),
                    e.push(St[+n.clicklessTransition])),
                    5 == n.type || 7 == n.type) {
                        e.push(72);
                        const t = new At;
                        for (let e = 0; e < p.harmonicsControlPoints; e++)
                            t.write(p.harmonicsControlPointBits, n.harmonicsWave.harmonics[e]);
                        t.encodeBase64(e)
                    }
                    if (0 == n.type) {
                        n.chipWave > 186 ? (e.push(119, St[n.chipWave - 186]),
                        e.push(St[3])) : n.chipWave > 124 ? (e.push(119, St[n.chipWave - 124]),
                        e.push(St[2])) : n.chipWave > 62 ? (e.push(119, St[n.chipWave - 62]),
                        e.push(St[1])) : (e.push(119, St[n.chipWave]),
                        e.push(St[0])),
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign),
                        e.push(121);
                        const t = yt(0, 32, n.chipWaveLoopMode) << 1 | (n.isUsingAdvancedLoopControls ? 1 : 0);
                        e.push(St[t]);
                        const i = yt(0, 32, 0) << 1 | (n.chipWavePlayBackwards ? 1 : 0);
                        e.push(St[i]),
                        vt(e, n.chipWaveLoopStart),
                        vt(e, n.chipWaveLoopEnd),
                        vt(e, n.chipWaveStartOffset)
                    } else if (1 == n.type || 11 == n.type) {
                        if (1 == n.type)
                            e.push(65, St[n.algorithm]),
                            e.push(70, St[n.feedbackType]);
                        else {
                            if (e.push(65, St[n.algorithm6Op]),
                            0 == n.algorithm6Op) {
                                e.push(67, St[n.customAlgorithm.carrierCount]),
                                e.push(113);
                                for (let t = 0; t < n.customAlgorithm.modulatedBy.length; t++) {
                                    for (let i = 0; i < n.customAlgorithm.modulatedBy[t].length; i++)
                                        e.push(St[n.customAlgorithm.modulatedBy[t][i]]);
                                    e.push(82)
                                }
                                e.push(113)
                            }
                            if (e.push(70, St[n.feedbackType6Op]),
                            0 == n.feedbackType6Op) {
                                e.push(113);
                                for (let t = 0; t < n.customFeedbackType.indices.length; t++) {
                                    for (let i = 0; i < n.customFeedbackType.indices[t].length; i++)
                                        e.push(St[n.customFeedbackType.indices[t][i]]);
                                    e.push(82)
                                }
                                e.push(113)
                            }
                        }
                        e.push(66, St[n.feedbackAmplitude]),
                        e.push(81);
                        for (let t = 0; t < (11 == n.type ? 6 : p.operatorCount); t++)
                            e.push(St[n.operators[t].frequency]);
                        e.push(80);
                        for (let t = 0; t < (11 == n.type ? 6 : p.operatorCount); t++)
                            e.push(St[n.operators[t].amplitude]);
                        e.push(82);
                        for (let t = 0; t < (11 == n.type ? 6 : p.operatorCount); t++)
                            e.push(St[n.operators[t].waveform]),
                            2 == n.operators[t].waveform && e.push(St[n.operators[t].pulseWidth])
                    } else if (9 == n.type) {
                        n.chipWave > 186 ? (e.push(119, St[n.chipWave - 186]),
                        e.push(St[3])) : n.chipWave > 124 ? (e.push(119, St[n.chipWave - 124]),
                        e.push(St[2])) : n.chipWave > 62 ? (e.push(119, St[n.chipWave - 62]),
                        e.push(St[1])) : (e.push(119, St[n.chipWave]),
                        e.push(St[0])),
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign),
                        e.push(77);
                        for (let t = 0; t < 64; t++)
                            e.push(St[n.customChipWave[t] + 24])
                    } else if (2 == n.type)
                        e.push(119, St[n.chipNoise]),
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign);
                    else if (3 == n.type) {
                        e.push(83);
                        const t = new At;
                        for (let e = 0; e < p.spectrumControlPoints; e++)
                            t.write(p.spectrumControlPointBits, n.spectrumWave.spectrum[e]);
                        t.encodeBase64(e),
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign)
                    } else if (4 == n.type) {
                        e.push(122);
                        for (let t = 0; t < p.drumCount; t++)
                            e.push(St[n.drumsetEnvelopes[t]]);
                        e.push(83);
                        const t = new At;
                        for (let e = 0; e < p.drumCount; e++)
                            for (let i = 0; i < p.spectrumControlPoints; i++)
                                t.write(p.spectrumControlPointBits, n.drumsetSpectrumWaves[e].spectrum[i]);
                        t.encodeBase64(e)
                    } else if (5 == n.type)
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign);
                    else if (6 == n.type)
                        e.push(87, St[n.pulseWidth]),
                        e.push(St[n.decimalOffset >> 6], St[63 & n.decimalOffset]),
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign);
                    else if (8 == n.type)
                        e.push(120, St[n.supersawDynamism], St[n.supersawSpread], St[n.supersawShape]),
                        e.push(87, St[n.pulseWidth]),
                        e.push(St[n.decimalOffset >> 6], St[63 & n.decimalOffset]);
                    else if (7 == n.type) {
                        if (p.stringSustainRange > 32)
                            throw new Error("Not enough bits to represent sustain value and type in same base64 character.");
                        e.push(104, St[n.unison]),
                        n.unison == p.unisons.length && kt(e, n.unisonVoices, n.unisonSpread, n.unisonOffset, n.unisonExpression, n.unisonSign),
                        e.push(73, St[n.stringSustain | n.stringSustainType << 5])
                    } else if (10 != n.type)
                        throw new Error("Unknown instrument type.");
                    e.push(69, St[n.envelopeCount]),
                    e.push(St[n.envelopeSpeed]),
                    e.push(St[+n.discreteEnvelope]);
                    for (let t = 0; t < n.envelopeCount; t++)
                        e.push(St[n.envelopes[t].target]),
                        p.instrumentAutomationTargets[n.envelopes[t].target].maxCount > 1 && e.push(St[n.envelopes[t].index]),
                        e.push(St[n.envelopes[t].envelope])
                }
            e.push(98),
            t = new At;
            let o = 0;
            for (; 1 << o < this.patternsPerChannel + 1; )
                o++;
            for (let e = 0; e < this.getChannelCount(); e++)
                for (let i = 0; i < this.barCount; i++)
                    t.write(o, this.channels[e].bars[i]);
            t.encodeBase64(e),
            e.push(112),
            t = new At;
            const a = new At
              , r = Vt.getNeededBits(p.noteSizeMax);
            for (let e = 0; e < this.getChannelCount(); e++) {
                const i = this.channels[e]
                  , n = this.getMaxInstrumentsPerPattern(e)
                  , s = this.getChannelIsNoise(e)
                  , o = this.getChannelIsMod(e)
                  , h = Vt.getNeededBits(n - p.instrumentCountMin)
                  , l = Vt.getNeededBits(i.instruments.length - 1);
                if (o) {
                    const n = Vt.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                    for (let s = 0; s < i.instruments.length; s++) {
                        let i = this.channels[e].instruments[s];
                        for (let e = 0; e < p.modCount; e++) {
                            const s = i.modChannels[e]
                              , o = i.modInstruments[e]
                              , a = i.modulators[e]
                              , r = i.modFilterTypes[e];
                            let h = p.modulators[a].forSong ? 2 : 0;
                            a == p.modulators.dictionary.none.index && (h = 3),
                            t.write(2, h),
                            0 != h && 1 != h || (t.write(8, s),
                            t.write(n, o)),
                            3 != h && t.write(6, a),
                            "eq filter" != p.modulators[i.modulators[e]].name && "note filter" != p.modulators[i.modulators[e]].name || t.write(6, r)
                        }
                    }
                }
                const c = s || o ? 0 : i.octave * p.pitchesPerOctave;
                let d = s ? 4 : c;
                const m = o ? [0, 1, 2, 3, 4, 5] : s ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]
                  , u = [];
                for (let t = 0; t < m.length; t++)
                    m[t] += c;
                for (const e of i.patterns) {
                    if (this.patternInstruments) {
                        const i = bt(p.instrumentCountMin, n, e.instruments.length);
                        t.write(h, i - p.instrumentCountMin);
                        for (let n = 0; n < i; n++)
                            t.write(l, e.instruments[n])
                    }
                    if (e.notes.length > 0) {
                        t.write(1, 1);
                        let i = 0;
                        for (const n of e.notes) {
                            n.start < i && o && (t.write(2, 0),
                            t.write(1, 1),
                            t.writePartDuration(i - n.start)),
                            n.start > i && (t.write(2, 0),
                            o && t.write(1, 0),
                            t.writePartDuration(n.start - i)),
                            a.clear(),
                            1 == n.pitches.length ? a.write(1, 0) : (a.write(1, 1),
                            a.write(3, n.pitches.length - 2)),
                            a.writePinCount(n.pins.length - 1),
                            o ? a.write(9, n.pins[0].size) : a.write(r, n.pins[0].size);
                            let e = 0
                              , s = n.pitches[0]
                              , h = s;
                            const l = [];
                            for (let t = 1; t < n.pins.length; t++) {
                                const i = n.pins[t]
                                  , c = s + i.interval;
                                h != c ? (a.write(1, 1),
                                l.push(c),
                                h = c) : a.write(1, 0),
                                a.writePartDuration(i.time - e),
                                e = i.time,
                                o ? a.write(9, i.size) : a.write(r, i.size)
                            }
                            const c = String.fromCharCode.apply(null, a.encodeBase64([]))
                              , p = u.indexOf(c);
                            -1 == p ? (t.write(2, 1),
                            t.concat(a)) : (t.write(1, 1),
                            t.writeLongTail(0, 0, p),
                            u.splice(p, 1)),
                            u.unshift(c),
                            u.length > 10 && u.pop();
                            const f = n.pitches.concat(l);
                            for (let e = 0; e < f.length; e++) {
                                const i = f[e]
                                  , s = m.indexOf(i);
                                if (-1 == s) {
                                    let e = 0
                                      , n = d;
                                    if (n < i)
                                        for (; n != i; )
                                            n++,
                                            -1 == m.indexOf(n) && e++;
                                    else
                                        for (; n != i; )
                                            n--,
                                            -1 == m.indexOf(n) && e--;
                                    t.write(1, 0),
                                    t.writePitchInterval(e)
                                } else
                                    t.write(1, 1),
                                    t.write(4, s),
                                    m.splice(s, 1);
                                m.unshift(i),
                                m.length > 16 && m.pop(),
                                d = e == n.pitches.length - 1 ? n.pitches[0] : i
                            }
                            0 == n.start && t.write(1, n.continuesLastPattern ? 1 : 0),
                            i = n.end
                        }
                        i < this.beatsPerBar * p.partsPerBeat + +o && (t.write(2, 0),
                        o && t.write(1, 0),
                        t.writePartDuration(this.beatsPerBar * p.partsPerBeat + +o - i))
                    } else
                        t.write(1, 0)
                }
            }
            let h = t.lengthBase64()
              , l = [];
            for (; h > 0; )
                l.unshift(St[63 & h]),
                h >>= 6;
            e.push(St[l.length]),
            Array.prototype.push.apply(e, l),
            t.encodeBase64(e);
            const c = 64e3;
            let d = "";
            if (null != N.customSamples && N.customSamples.length > 0 && (d = "|" + N.customSamples.join("|")),
            e.length < c)
                return String.fromCharCode.apply(null, e) + d;
            {
                let t = "";
                for (let i = 0; i < e.length; i += c)
                    t += String.fromCharCode.apply(null, e.slice(i, i + c));
                return t + d
            }
        }
        static gt(t) {
            return 0 == t ? t = 1 : 1 == t && (t = 0),
            p.envelopes[yt(0, p.envelopes.length, t)]
        }
        fromBase64String(t, e="auto") {
            if (null == t || "" == t)
                return Vt.wt(),
                void this.initToDefault(!0);
            let i = 0;
            for (; t.charCodeAt(i) <= 32; )
                i++;
            if (35 == t.charCodeAt(i) && i++,
            123 == t.charCodeAt(i))
                return void this.fromJsonObject(JSON.parse(0 == i ? t : t.substring(i)), e);
            const n = t.charCodeAt(i);
            let a, h, l, c;
            106 == n ? (a = !1,
            h = !0,
            l = !1,
            c = !1,
            i++) : 103 == n ? (a = !1,
            h = !1,
            l = !0,
            c = !1,
            i++) : 117 == n ? (a = !1,
            h = !1,
            l = !1,
            c = !0,
            i++) : 100 == n ? (a = !1,
            h = !0,
            l = !1,
            c = !1,
            i++) : (a = !0,
            h = !1,
            l = !1,
            c = !1);
            const m = Ft[t.charCodeAt(i++)];
            if (a && (-1 == m || m > Vt.vt || m < Vt.xt))
                return;
            if (h && (-1 == m || m > Vt.kt || m < Vt.Mt))
                return;
            if (l && (-1 == m || m > Vt.St || m < Vt.Ft))
                return;
            if (c && (-1 == m || m > Vt.bt || m < Vt.Ct))
                return;
            const u = m < 2
              , f = m < 3
              , y = m < 4
              , b = m < 5
              , g = m < 6
              , w = m < 7
              , v = m < 8
              , x = m < 9;
            this.initToDefault(a && x || h && b || y && l);
            const z = a && x || h && b;
            let q = !1;
            if (c || l) {
                var O = (t = t.replaceAll("%7C", "|")).split("|");
                if (t = O.shift(),
                null == N.customSamples || N.customSamples.join(", ") != O.join(", ")) {
                    Vt.At();
                    let t = !1
                      , e = !1
                      , i = !1;
                    const n = []
                      , a = [];
                    s.statusTable = {},
                    s.urlTable = {},
                    s.totalSamples = 0,
                    s.samplesLoaded = 0,
                    r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded));
                    for (const o of O)
                        if ("legacysamples" === o.toLowerCase())
                            t || (t = !0,
                            n.push(o),
                            d(0));
                        else if ("nintariboxsamples" === o.toLowerCase())
                            e || (e = !0,
                            n.push(o),
                            d(1));
                        else if ("mariopaintboxsamples" === o.toLowerCase())
                            i || (i = !0,
                            n.push(o),
                            d(2));
                        else {
                            const t = f;
                            if (!Vt.Et(o, n, a, s, t))
                                continue
                        }
                    if (n.length > 0 && (N.customSamples = n),
                    a.length > 0) {
                        const t = k(a);
                        N.presetCategories[N.presetCategories.length] = {
                            name: "Custom Sample Presets",
                            presets: t,
                            index: N.presetCategories.length
                        }
                    }
                }
            }
            if (f && a) {
                for (const t of this.channels)
                    t.instruments[0].transition = p.transitions.dictionary.interrupt.index,
                    t.instruments[0].effects |= 1024;
                this.channels[3].instruments[0].chipNoise = 0
            }
            let R = null;
            if (a && x || h && b || y && l) {
                R = [];
                for (let t = R.length; t < this.getChannelCount(); t++) {
                    R[t] = [];
                    for (let e = 0; e < p.instrumentCountMin; e++)
                        R[t][e] = {}
                }
            }
            let $, H = 0, _ = 0, V = -1, G = !1, W = !1;
            for (; i < t.length; )
                switch ($ = t.charCodeAt(i++)) {
                case 78:
                    var j = (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)];
                    this.title = decodeURIComponent(t.substring(i, i + j)),
                    document.title = this.title + " - " + N.versionDisplayName,
                    i += j;
                    break;
                case 110:
                    this.pitchChannelCount = Ft[t.charCodeAt(i++)],
                    this.noiseChannelCount = Ft[t.charCodeAt(i++)],
                    this.modChannelCount = a || h && u ? 0 : Ft[t.charCodeAt(i++)],
                    this.pitchChannelCount = bt(p.pitchChannelCountMin, p.pitchChannelCountMax, this.pitchChannelCount),
                    this.noiseChannelCount = bt(p.noiseChannelCountMin, p.noiseChannelCountMax, this.noiseChannelCount),
                    this.modChannelCount = bt(p.modChannelCountMin, p.modChannelCountMax, this.modChannelCount);
                    for (let t = this.channels.length; t < this.getChannelCount(); t++)
                        this.channels[t] = new _t;
                    if (this.channels.length = this.getChannelCount(),
                    a && x || h && b || y && l)
                        for (let t = R.length; t < this.getChannelCount(); t++) {
                            R[t] = [];
                            for (let e = 0; e < p.instrumentCountMin; e++)
                                R[t][e] = {}
                        }
                    break;
                case 115:
                    if (this.scale = yt(0, p.scales.length, Ft[t.charCodeAt(i++)]),
                    this.scale == p.scales.dictionary.Custom.index)
                        for (var U = 1; U < p.pitchesPerOctave; U++)
                            this.scaleCustom[U] = 1 == Ft[t.charCodeAt(i++)];
                    a && (this.scale = 0);
                    break;
                case 107:
                    if (w && a)
                        this.key = yt(0, p.keys.length, 11 - Ft[t.charCodeAt(i++)]),
                        this.octave = 0;
                    else if (a || h)
                        this.key = yt(0, p.keys.length, Ft[t.charCodeAt(i++)]),
                        this.octave = 0;
                    else if (l || f && c) {
                        const e = Ft[t.charCodeAt(i++)]
                          , [n,s] = Mt(e);
                        this.key = n,
                        this.octave = s
                    } else
                        this.key = yt(0, p.keys.length, Ft[t.charCodeAt(i++)]),
                        this.octave = yt(p.octaveMin, p.octaveMax + 1, Ft[t.charCodeAt(i++)] + p.octaveMin);
                    break;
                case 108:
                    this.loopStart = b && a ? Ft[t.charCodeAt(i++)] : (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)];
                    break;
                case 101:
                    this.loopLength = b && a ? Ft[t.charCodeAt(i++)] : (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)] + 1;
                    break;
                case 116:
                    this.tempo = y && a ? [95, 120, 151, 190][Ft[t.charCodeAt(i++)]] : w && a ? [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][Ft[t.charCodeAt(i++)]] : Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)],
                    this.tempo = yt(p.tempoMin, p.tempoMax + 1, this.tempo);
                    break;
                case 109:
                    x && a ? (H = 12 * Ft[t.charCodeAt(i++)],
                    H = yt(0, p.reverbRange, H)) : (h && b || y && l) && (H = Ft[t.charCodeAt(i++)],
                    H = yt(0, p.reverbRange, H));
                    break;
                case 97:
                    this.beatsPerBar = f && a ? [6, 7, 8, 9, 10][Ft[t.charCodeAt(i++)]] : Ft[t.charCodeAt(i++)] + 1,
                    this.beatsPerBar = Math.max(p.beatsPerBarMin, Math.min(p.beatsPerBarMax, this.beatsPerBar));
                    break;
                case 103:
                    {
                        const e = (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)] + 1;
                        this.barCount = bt(p.barCountMin, p.barCountMax, e);
                        for (let t = 0; t < this.getChannelCount(); t++) {
                            for (let e = this.channels[t].bars.length; e < this.barCount; e++)
                                this.channels[t].bars[e] = e < 4 ? 1 : 0;
                            this.channels[t].bars.length = this.barCount
                        }
                    }
                    break;
                case 106:
                    {
                        let e;
                        e = v && a ? Ft[t.charCodeAt(i++)] + 1 : (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)] + 1,
                        this.patternsPerChannel = bt(1, p.barCountMax, e);
                        const n = this.getChannelCount();
                        for (let t = 0; t < n; t++) {
                            const e = this.channels[t].patterns;
                            for (let t = e.length; t < this.patternsPerChannel; t++)
                                e[t] = new Pt;
                            e.length = this.patternsPerChannel
                        }
                    }
                    break;
                case 105:
                    if (x && a || h && b || y && l) {
                        const e = bt(p.instrumentCountMin, p.patternInstrumentCountMax, Ft[t.charCodeAt(i++)] + p.instrumentCountMin);
                        this.layeredInstruments = !1,
                        this.patternInstruments = e > 1;
                        for (let t = 0; t < this.getChannelCount(); t++) {
                            const i = t >= this.pitchChannelCount && t < this.pitchChannelCount + this.noiseChannelCount
                              , n = t >= this.pitchChannelCount + this.noiseChannelCount;
                            for (let s = this.channels[t].instruments.length; s < e; s++)
                                this.channels[t].instruments[s] = new Ht(i,n);
                            if (this.channels[t].instruments.length = e,
                            g && a)
                                for (let s = 0; s < e; s++)
                                    this.channels[t].instruments[s].setTypeAndReset(i ? 2 : 0, i, n);
                            for (let i = R[t].length; i < e; i++)
                                R[t][i] = {}
                        }
                    } else {
                        const e = Ft[t.charCodeAt(i++)];
                        this.layeredInstruments = 0 != (2 & e),
                        this.patternInstruments = 0 != (1 & e);
                        for (let e = 0; e < this.getChannelCount(); e++) {
                            let n = 1;
                            (this.layeredInstruments || this.patternInstruments) && (n = bt(p.instrumentCountMin, this.getMaxInstrumentsPerChannel(), Ft[t.charCodeAt(i++)] + p.instrumentCountMin));
                            const s = this.channels[e]
                              , o = this.getChannelIsNoise(e)
                              , a = this.getChannelIsMod(e);
                            for (let t = s.instruments.length; t < n; t++)
                                s.instruments[t] = new Ht(o,a);
                            s.instruments.length = n
                        }
                    }
                    break;
                case 114:
                    c ? this.rhythm = yt(0, p.rhythms.length, Ft[t.charCodeAt(i++)]) : (this.rhythm = yt(0, p.rhythms.length, Ft[t.charCodeAt(i++)]),
                    (h && f || a) && (this.rhythm != p.rhythms.dictionary["÷3 (triplets)"].index && this.rhythm != p.rhythms.dictionary["÷6"].index || (G = !0),
                    this.rhythm >= p.rhythms.dictionary["÷6"].index && (W = !0)));
                    break;
                case 111:
                    if (f && a) {
                        const e = Ft[t.charCodeAt(i++)];
                        this.channels[e].octave = yt(0, p.pitchOctaves, Ft[t.charCodeAt(i++)] + 1),
                        e >= this.pitchChannelCount && (this.channels[e].octave = 0)
                    } else if (x && a || h && b || y && l)
                        for (let e = 0; e < this.getChannelCount(); e++)
                            this.channels[e].octave = yt(0, p.pitchOctaves, Ft[t.charCodeAt(i++)] + 1),
                            e >= this.pitchChannelCount && (this.channels[e].octave = 0);
                    else {
                        for (let e = 0; e < this.pitchChannelCount; e++)
                            this.channels[e].octave = yt(0, p.pitchOctaves, Ft[t.charCodeAt(i++)]);
                        for (let t = this.pitchChannelCount; t < this.getChannelCount(); t++)
                            this.channels[t].octave = 0
                    }
                    break;
                case 84:
                    {
                        V++,
                        V >= this.channels[_].instruments.length && (_++,
                        V = 0),
                        bt(0, this.channels.length - 1, _);
                        const e = this.channels[_].instruments[V];
                        let n = bt(0, 11, Ft[t.charCodeAt(i++)]);
                        h && b || y && l ? 7 != n && 8 != n || (n += 2) : (h && g || l && !y || c && b) && (8 != n && 9 != n && 10 != n || (n += 1)),
                        e.setTypeAndReset(n, _ >= this.pitchChannelCount && _ < this.pitchChannelCount + this.noiseChannelCount, _ >= this.pitchChannelCount + this.noiseChannelCount),
                        !(w && a || u && h) || 0 != n && 9 != n && 6 != n || (e.aliases = !0,
                        e.distortion = 0,
                        e.effects |= 8),
                        G && (e.arpeggioSpeed = 9),
                        W && (e.fastTwoNoteArp = !0),
                        w && a && e.chord != p.chords.dictionary.simultaneous.index && (e.effects |= 2048)
                    }
                    break;
                case 117:
                    {
                        const e = Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)];
                        this.channels[_].instruments[V].preset = e,
                        h && b || y && l ? 7 == this.channels[_].instruments[V].preset && (this.channels[_].instruments[V].preset = 9,
                        this.channels[_].instruments[V].type = 9) : (h && g || c && b) && (8 == this.channels[_].instruments[V].preset && (this.channels[_].instruments[V].preset = 9,
                        this.channels[_].instruments[V].type = 9),
                        10 == this.channels[_].instruments[V].preset && (this.channels[_].instruments[V].preset = 11,
                        this.channels[_].instruments[V].type = 11)),
                        a && e == N.nameToPresetValue("grand piano 1") && (this.channels[_].instruments[V].preset = N.nameToPresetValue("grand piano 3"))
                    }
                    break;
                case 119:
                    if (f && a) {
                        const e = [1, 2, 3, 4, 5, 6, 7, 8, 0]
                          , n = Ft[t.charCodeAt(i++)]
                          , s = this.channels[n].instruments[0];
                        s.chipWave = yt(0, p.chipWaves.length, 0 | e[Ft[t.charCodeAt(i++)]]),
                        s.convertLegacySettings(R[n][0], z)
                    } else if (g && a) {
                        const e = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                        for (let n = 0; n < this.getChannelCount(); n++)
                            for (const s of this.channels[n].instruments)
                                n >= this.pitchChannelCount ? s.chipNoise = yt(0, p.chipNoises.length, Ft[t.charCodeAt(i++)]) : s.chipWave = yt(0, p.chipWaves.length, 0 | e[Ft[t.charCodeAt(i++)]])
                    } else if (w && a) {
                        const e = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                        _ >= this.pitchChannelCount ? this.channels[_].instruments[V].chipNoise = yt(0, p.chipNoises.length, Ft[t.charCodeAt(i++)]) : this.channels[_].instruments[V].chipWave = yt(0, p.chipWaves.length, 0 | e[Ft[t.charCodeAt(i++)]])
                    } else if (2 == this.channels[_].instruments[V].type)
                        this.channels[_].instruments[V].chipNoise = yt(0, p.chipNoises.length, Ft[t.charCodeAt(i++)]);
                    else if (c) {
                        const e = Ft[t.charCodeAt(i++)]
                          , n = Ft[t.charCodeAt(i++)];
                        this.channels[_].instruments[V].chipWave = yt(0, p.chipWaves.length, 3 == n ? e + 186 : 2 == n ? e + 124 : 1 == n ? e + 62 : e)
                    } else
                        this.channels[_].instruments[V].chipWave = yt(0, p.chipWaves.length, Ft[t.charCodeAt(i++)]);
                    break;
                case 102:
                    if (x && a || b && h || y && l)
                        if (w && a) {
                            const e = [10, 6, 3, 0, 8, 5, 2]
                              , n = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"];
                            if (f && a) {
                                const s = Ft[t.charCodeAt(i++)]
                                  , o = this.channels[s].instruments[0]
                                  , a = R[s][0]
                                  , r = [1, 3, 4, 5][yt(0, e.length, Ft[t.charCodeAt(i++)])];
                                a.filterCutoff = e[r],
                                a.filterResonance = 0,
                                a.filterEnvelope = p.envelopes.dictionary[n[r]],
                                o.convertLegacySettings(a, z)
                            } else if (g && a)
                                for (let s = 0; s < this.getChannelCount(); s++)
                                    for (let o = 0; o < this.channels[s].instruments.length; o++) {
                                        const a = this.channels[s].instruments[o]
                                          , r = R[s][o]
                                          , h = yt(0, e.length, Ft[t.charCodeAt(i++)] + 1);
                                        s < this.pitchChannelCount ? (r.filterCutoff = e[h],
                                        r.filterResonance = 0,
                                        r.filterEnvelope = p.envelopes.dictionary[n[h]]) : (r.filterCutoff = 10,
                                        r.filterResonance = 0,
                                        r.filterEnvelope = p.envelopes.dictionary.none),
                                        a.convertLegacySettings(r, z)
                                    }
                            else {
                                const s = yt(0, e.length, Ft[t.charCodeAt(i++)])
                                  , o = this.channels[_].instruments[V]
                                  , a = R[_][V];
                                a.filterCutoff = e[s],
                                a.filterResonance = 0,
                                a.filterEnvelope = p.envelopes.dictionary[n[s]],
                                o.convertLegacySettings(a, z)
                            }
                        } else {
                            const e = 11
                              , n = this.channels[_].instruments[V]
                              , s = R[_][V];
                            s.filterCutoff = yt(0, e, Ft[t.charCodeAt(i++)]),
                            n.convertLegacySettings(s, z)
                        }
                    else {
                        const e = this.channels[_].instruments[V];
                        let n = Ft[t.charCodeAt(i++)];
                        if (a || 0 == n) {
                            e.eqFilterType = !1,
                            (h || l || c) && (n = Ft[t.charCodeAt(i++)]);
                            const s = n;
                            e.eqFilter.controlPointCount = yt(0, p.filterMaxPoints + 1, s);
                            for (let t = e.eqFilter.controlPoints.length; t < e.eqFilter.controlPointCount; t++)
                                e.eqFilter.controlPoints[t] = new Ot;
                            for (let n = 0; n < e.eqFilter.controlPointCount; n++) {
                                const s = e.eqFilter.controlPoints[n];
                                s.type = yt(0, 3, Ft[t.charCodeAt(i++)]),
                                s.freq = yt(0, p.filterFreqRange, Ft[t.charCodeAt(i++)]),
                                s.gain = yt(0, p.filterGainRange, Ft[t.charCodeAt(i++)])
                            }
                            for (let t = e.eqFilter.controlPointCount; t < s; t++)
                                i += 3;
                            if (e.eqSubFilters[0] = e.eqFilter,
                            h && !b || l && !y || c) {
                                let n = Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)];
                                for (let s = 0; s < p.filterMorphCount - 1; s++)
                                    if (n & 1 << s) {
                                        const n = Ft[t.charCodeAt(i++)];
                                        null == e.eqSubFilters[s + 1] && (e.eqSubFilters[s + 1] = new Rt),
                                        e.eqSubFilters[s + 1].controlPointCount = yt(0, p.filterMaxPoints + 1, n);
                                        for (let t = e.eqSubFilters[s + 1].controlPoints.length; t < e.eqSubFilters[s + 1].controlPointCount; t++)
                                            e.eqSubFilters[s + 1].controlPoints[t] = new Ot;
                                        for (let n = 0; n < e.eqSubFilters[s + 1].controlPointCount; n++) {
                                            const o = e.eqSubFilters[s + 1].controlPoints[n];
                                            o.type = yt(0, 3, Ft[t.charCodeAt(i++)]),
                                            o.freq = yt(0, p.filterFreqRange, Ft[t.charCodeAt(i++)]),
                                            o.gain = yt(0, p.filterGainRange, Ft[t.charCodeAt(i++)])
                                        }
                                        for (let t = e.eqSubFilters[s + 1].controlPointCount; t < n; t++)
                                            i += 3
                                    }
                            }
                        } else
                            e.eqFilterType = !0,
                            e.eqFilterSimpleCut = yt(0, p.filterSimpleCutRange, Ft[t.charCodeAt(i++)]),
                            e.eqFilterSimplePeak = yt(0, p.filterSimplePeakRange, Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 121:
                    if (c)
                        if (f) {
                            const e = xt(t, i);
                            i += 6;
                            const n = t.slice(i, i + e);
                            i += e;
                            const s = JSON.parse(atob(n));
                            for (const t of s) {
                                const e = t.channel
                                  , i = t.instrument
                                  , n = t.info
                                  , s = this.channels[e].instruments[i];
                                s.isUsingAdvancedLoopControls = n.isUsingAdvancedLoopControls,
                                s.chipWaveLoopStart = n.chipWaveLoopStart,
                                s.chipWaveLoopEnd = n.chipWaveLoopEnd,
                                s.chipWaveLoopMode = n.chipWaveLoopMode,
                                s.chipWavePlayBackwards = n.chipWavePlayBackwards,
                                s.chipWaveStartOffset = n.chipWaveStartOffset
                            }
                        } else {
                            const e = Ft[t.charCodeAt(i++)]
                              , n = Boolean(1 & e)
                              , s = e >> 1
                              , o = Ft[t.charCodeAt(i++)]
                              , a = Boolean(1 & o)
                              , r = xt(t, i);
                            i += 6;
                            const h = xt(t, i);
                            i += 6;
                            const l = xt(t, i);
                            i += 6;
                            const c = this.channels[_].instruments[V];
                            c.isUsingAdvancedLoopControls = n,
                            c.chipWaveLoopStart = r,
                            c.chipWaveLoopEnd = h,
                            c.chipWaveLoopMode = s,
                            c.chipWavePlayBackwards = a,
                            c.chipWaveStartOffset = l
                        }
                    else if (l && !y && g)
                        "legacysamples" != document.URL.substring(document.URL.length - 13).toLowerCase() && (q || (q = !0,
                        p.willReloadForCustomSamples = !0,
                        N.customSamples = ["legacySamples"],
                        d(0))),
                        this.channels[_].instruments[V].chipWave = yt(0, p.chipWaves.length, Ft[t.charCodeAt(i++)] + 125);
                    else if (x && a || h && b || y && l) {
                        const e = 8
                          , n = this.channels[_].instruments[V]
                          , s = R[_][V];
                        s.filterResonance = yt(0, e, Ft[t.charCodeAt(i++)]),
                        n.convertLegacySettings(s, z)
                    }
                    break;
                case 122:
                    {
                        const e = this.channels[_].instruments[V]
                          , n = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                        if (x && a || b && h || y && l)
                            if (4 == e.type)
                                for (let s = 0; s < p.drumCount; s++) {
                                    let o = Ft[t.charCodeAt(i++)];
                                    (u && l || !l && !c) && (o = n[o]),
                                    e.drumsetEnvelopes[s] = Vt.gt(o).index
                                }
                            else {
                                const s = R[_][V];
                                let o = Ft[t.charCodeAt(i++)];
                                (u && l || !l && !c) && (o = n[o]),
                                s.filterEnvelope = Vt.gt(o),
                                e.convertLegacySettings(s, z)
                            }
                        else
                            for (let s = 0; s < p.drumCount; s++) {
                                let o = Ft[t.charCodeAt(i++)];
                                (u && l || !l && !c) && (o = n[o]),
                                e.drumsetEnvelopes[s] = yt(0, p.envelopes.length, o)
                            }
                    }
                    break;
                case 87:
                    {
                        const e = this.channels[_].instruments[V];
                        if (e.pulseWidth = yt(0, p.pulseWidthRange + +h + 1, Ft[t.charCodeAt(i++)]),
                        a && (e.pulseWidth = Math.round(Math.pow(.5, (7 - e.pulseWidth) * p.pulseWidthStepPower) * p.pulseWidthRange)),
                        x && a || b && h || y && l) {
                            const n = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11]
                              , s = R[_][V];
                            let o = Ft[t.charCodeAt(i++)];
                            (u && l || !l && !c) && (o = n[o]),
                            s.pulseEnvelope = Vt.gt(o),
                            e.convertLegacySettings(s, z)
                        }
                        c && !y && (e.decimalOffset = yt(0, 100, (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)]))
                    }
                    break;
                case 73:
                    {
                        const e = this.channels[_].instruments[V]
                          , n = Ft[t.charCodeAt(i++)];
                        e.stringSustain = yt(0, p.stringSustainRange, 31 & n),
                        e.stringSustainType = p.enableAcousticSustain ? yt(0, 2, n >> 5) : 0
                    }
                    break;
                case 100:
                    if (x && a || h && b || y && l) {
                        const e = [{
                            transition: "interrupt",
                            fadeInSeconds: 0,
                            fadeOutTicks: -1
                        }, {
                            transition: "normal",
                            fadeInSeconds: 0,
                            fadeOutTicks: -3
                        }, {
                            transition: "normal",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        }, {
                            transition: "slide in pattern",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        }, {
                            transition: "normal",
                            fadeInSeconds: .04,
                            fadeOutTicks: 6
                        }, {
                            transition: "normal",
                            fadeInSeconds: 0,
                            fadeOutTicks: 48
                        }, {
                            transition: "normal",
                            fadeInSeconds: .0125,
                            fadeOutTicks: 72
                        }, {
                            transition: "normal",
                            fadeInSeconds: .06,
                            fadeOutTicks: 96
                        }, {
                            transition: "slide in pattern",
                            fadeInSeconds: .025,
                            fadeOutTicks: -3
                        }];
                        if (f && a) {
                            const n = Ft[t.charCodeAt(i++)]
                              , s = e[yt(0, e.length, Ft[t.charCodeAt(i++)])]
                              , o = this.channels[n].instruments[0];
                            o.fadeIn = Jt.secondsToFadeInSetting(s.fadeInSeconds),
                            o.fadeOut = Jt.ticksToFadeOutSetting(s.fadeOutTicks),
                            o.transition = p.transitions.dictionary[s.transition].index,
                            o.transition != p.transitions.dictionary.normal.index && (o.effects |= 1024)
                        } else if (g && a)
                            for (let n = 0; n < this.getChannelCount(); n++)
                                for (const s of this.channels[n].instruments) {
                                    const n = e[yt(0, e.length, Ft[t.charCodeAt(i++)])];
                                    s.fadeIn = Jt.secondsToFadeInSetting(n.fadeInSeconds),
                                    s.fadeOut = Jt.ticksToFadeOutSetting(n.fadeOutTicks),
                                    s.transition = p.transitions.dictionary[n.transition].index,
                                    s.transition != p.transitions.dictionary.normal.index && (s.effects |= 1024)
                                }
                        else if (y && !l && !c || a) {
                            const n = e[yt(0, e.length, Ft[t.charCodeAt(i++)])]
                              , s = this.channels[_].instruments[V];
                            s.fadeIn = Jt.secondsToFadeInSetting(n.fadeInSeconds),
                            s.fadeOut = Jt.ticksToFadeOutSetting(n.fadeOutTicks),
                            s.transition = p.transitions.dictionary[n.transition].index,
                            s.transition != p.transitions.dictionary.normal.index && (s.effects |= 1024)
                        } else {
                            const n = e[yt(0, e.length, Ft[t.charCodeAt(i++)])]
                              , s = this.channels[_].instruments[V];
                            s.fadeIn = Jt.secondsToFadeInSetting(n.fadeInSeconds),
                            s.fadeOut = Jt.ticksToFadeOutSetting(n.fadeOutTicks),
                            s.transition = p.transitions.dictionary[n.transition].index,
                            Ft[t.charCodeAt(i++)] > 0 && (s.legacyTieOver = !0),
                            s.clicklessTransition = !!Ft[t.charCodeAt(i++)],
                            (s.transition != p.transitions.dictionary.normal.index || s.clicklessTransition) && (s.effects |= 1024)
                        }
                    } else {
                        const e = this.channels[_].instruments[V];
                        e.fadeIn = yt(0, p.fadeInRange, Ft[t.charCodeAt(i++)]),
                        e.fadeOut = yt(0, p.fadeOutTicks.length, Ft[t.charCodeAt(i++)]),
                        (h || l || c) && (e.clicklessTransition = !!Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 99:
                    if (x && a || h && b || y && l)
                        if (w && a)
                            if (f && a) {
                                const e = [0, 3, 2, 0]
                                  , n = ["none", "none", "none", "tremolo2"]
                                  , s = Ft[t.charCodeAt(i++)]
                                  , o = yt(0, e.length, Ft[t.charCodeAt(i++)])
                                  , a = this.channels[s].instruments[0]
                                  , r = R[s][0];
                                a.vibrato = e[o],
                                null != r.filterEnvelope && 1 != r.filterEnvelope.type || (r.filterEnvelope = p.envelopes.dictionary[n[o]],
                                a.convertLegacySettings(r, z)),
                                a.vibrato != p.vibratos.dictionary.none.index && (a.effects |= 512)
                            } else if (g && a) {
                                const e = [0, 1, 2, 3, 0, 0]
                                  , n = ["none", "none", "none", "none", "tremolo5", "tremolo2"];
                                for (let s = 0; s < this.getChannelCount(); s++)
                                    for (let o = 0; o < this.channels[s].instruments.length; o++) {
                                        const a = yt(0, e.length, Ft[t.charCodeAt(i++)])
                                          , r = this.channels[s].instruments[o]
                                          , c = R[s][o];
                                        r.vibrato = e[a],
                                        null != c.filterEnvelope && 1 != c.filterEnvelope.type || (c.filterEnvelope = p.envelopes.dictionary[n[a]],
                                        r.convertLegacySettings(c, z)),
                                        r.vibrato != p.vibratos.dictionary.none.index && (r.effects |= 512),
                                        (0 != H || h && b || y && l) && !this.getChannelIsNoise(s) && (r.effects |= 1,
                                        r.reverb = H)
                                    }
                            } else {
                                const e = [0, 1, 2, 3, 0, 0]
                                  , n = ["none", "none", "none", "none", "tremolo5", "tremolo2"]
                                  , s = yt(0, e.length, Ft[t.charCodeAt(i++)])
                                  , o = this.channels[_].instruments[V]
                                  , a = R[_][V];
                                o.vibrato = e[s],
                                null != a.filterEnvelope && 1 != a.filterEnvelope.type || (a.filterEnvelope = p.envelopes.dictionary[n[s]],
                                o.convertLegacySettings(a, z)),
                                o.vibrato != p.vibratos.dictionary.none.index && (o.effects |= 512),
                                (0 != H || h && b || y && l) && (o.effects |= 1,
                                o.reverb = H)
                            }
                        else {
                            const e = this.channels[_].instruments[V]
                              , n = yt(0, p.vibratos.length + 1, Ft[t.charCodeAt(i++)]);
                            e.vibrato = n,
                            e.vibrato != p.vibratos.dictionary.none.index && (e.effects |= 512),
                            n == p.vibratos.length ? (e.vibratoDepth = yt(0, p.modulators.dictionary["vibrato depth"].maxRawVol + 1, Ft[t.charCodeAt(i++)]) / 50,
                            e.vibratoSpeed = yt(0, p.modulators.dictionary["vibrato speed"].maxRawVol + 1, Ft[t.charCodeAt(i++)]),
                            e.vibratoDelay = yt(0, p.modulators.dictionary["vibrato delay"].maxRawVol + 1, Ft[t.charCodeAt(i++)]) / 2,
                            e.vibratoType = yt(0, p.vibratoTypes.length, Ft[t.charCodeAt(i++)]),
                            e.effects |= 512) : (e.vibratoDepth = p.vibratos[e.vibrato].amplitude,
                            e.vibratoSpeed = 10,
                            e.vibratoDelay = p.vibratos[e.vibrato].delayTicks / 2,
                            e.vibratoType = p.vibratos[e.vibrato].type)
                        }
                    break;
                case 71:
                    if (h && b || y && l) {
                        const e = this.channels[_].instruments[V];
                        e.arpeggioSpeed = yt(0, p.modulators.dictionary["arp speed"].maxRawVol + 1, Ft[t.charCodeAt(i++)]),
                        e.fastTwoNoteArp = !!Ft[t.charCodeAt(i++)]
                    }
                    break;
                case 104:
                    if (f && a) {
                        const e = Ft[t.charCodeAt(i++)];
                        this.channels[e].instruments[0].unison = yt(0, p.unisons.length, Ft[t.charCodeAt(i++)]);
                        const n = this.channels[e].instruments[0];
                        n.unisonVoices = p.unisons[n.unison].voices,
                        n.unisonSpread = p.unisons[n.unison].spread,
                        n.unisonOffset = p.unisons[n.unison].offset,
                        n.unisonExpression = p.unisons[n.unison].expression,
                        n.unisonSign = p.unisons[n.unison].sign
                    } else if (g && a)
                        for (let e = 0; e < this.getChannelCount(); e++)
                            for (const n of this.channels[e].instruments) {
                                const e = Ft[t.charCodeAt(i++)];
                                let s = yt(0, p.unisons.length, e);
                                8 == e && (s = 2,
                                n.chord = 3),
                                n.unison = s,
                                n.unisonVoices = p.unisons[n.unison].voices,
                                n.unisonSpread = p.unisons[n.unison].spread,
                                n.unisonOffset = p.unisons[n.unison].offset,
                                n.unisonExpression = p.unisons[n.unison].expression,
                                n.unisonSign = p.unisons[n.unison].sign
                            }
                    else if (w && a) {
                        const e = Ft[t.charCodeAt(i++)];
                        let n = yt(0, p.unisons.length, e);
                        8 == e && (n = 2,
                        this.channels[_].instruments[V].chord = 3),
                        this.channels[_].instruments[V].unison = n;
                        const s = this.channels[_].instruments[V];
                        s.unisonVoices = p.unisons[s.unison].voices,
                        s.unisonSpread = p.unisons[s.unison].spread,
                        s.unisonOffset = p.unisons[s.unison].offset,
                        s.unisonExpression = p.unisons[s.unison].expression,
                        s.unisonSign = p.unisons[s.unison].sign
                    } else {
                        this.channels[_].instruments[V].unison = yt(0, p.unisons.length + 1, Ft[t.charCodeAt(i++)]);
                        const e = this.channels[_].instruments[V];
                        if (c && !b && e.unison == p.unisons.length) {
                            e.unisonVoices = Ft[t.charCodeAt(i++)];
                            const n = Ft[t.charCodeAt(i++)]
                              , s = Ft[t.charCodeAt(i++)] + 63 * (Ft[t.charCodeAt(i++)] + 63 * Ft[t.charCodeAt(i++)])
                              , o = Ft[t.charCodeAt(i++)]
                              , a = Ft[t.charCodeAt(i++)] + 63 * (Ft[t.charCodeAt(i++)] + 63 * Ft[t.charCodeAt(i++)])
                              , r = Ft[t.charCodeAt(i++)]
                              , h = Ft[t.charCodeAt(i++)] + 63 * Ft[t.charCodeAt(i++)]
                              , l = Ft[t.charCodeAt(i++)]
                              , c = Ft[t.charCodeAt(i++)] + 63 * Ft[t.charCodeAt(i++)];
                            e.unisonSpread = s / 1e3,
                            0 == n && (e.unisonSpread *= -1),
                            e.unisonOffset = a / 1e3,
                            0 == o && (e.unisonOffset *= -1),
                            e.unisonExpression = h / 1e3,
                            0 == r && (e.unisonExpression *= -1),
                            e.unisonSign = c / 1e3,
                            0 == l && (e.unisonSign *= -1)
                        } else
                            e.unisonVoices = p.unisons[e.unison].voices,
                            e.unisonSpread = p.unisons[e.unison].spread,
                            e.unisonOffset = p.unisons[e.unison].offset,
                            e.unisonExpression = p.unisons[e.unison].expression,
                            e.unisonSign = p.unisons[e.unison].sign
                    }
                    break;
                case 67:
                    if (x && a || h && b || y && l) {
                        const e = this.channels[_].instruments[V];
                        e.chord = yt(0, p.chords.length, Ft[t.charCodeAt(i++)]),
                        e.chord != p.chords.dictionary.simultaneous.index && (e.effects |= 2048)
                    }
                    break;
                case 113:
                    {
                        const e = this.channels[_].instruments[V];
                        if (x && a || h && b || y && l) {
                            e.effects = 4095 & Ft[t.charCodeAt(i++)],
                            0 != H || h && b || y && l ? D(e.effects) && (e.reverb = H) : e.effects &= -2,
                            e.effects |= 4,
                            e.vibrato != p.vibratos.dictionary.none.index && (e.effects |= 512),
                            e.detune != p.detuneCenter && (e.effects |= 256),
                            e.aliases ? e.effects |= 8 : e.effects &= -9;
                            const n = R[_][V];
                            e.convertLegacySettings(n, z)
                        } else {
                            if (e.effects = Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)],
                            E(e.effects)) {
                                let n = Ft[t.charCodeAt(i++)];
                                if (a || 0 == n) {
                                    e.noteFilterType = !1,
                                    (h || l || c) && (n = Ft[t.charCodeAt(i++)]),
                                    e.noteFilter.controlPointCount = yt(0, p.filterMaxPoints + 1, n);
                                    for (let t = e.noteFilter.controlPoints.length; t < e.noteFilter.controlPointCount; t++)
                                        e.noteFilter.controlPoints[t] = new Ot;
                                    for (let n = 0; n < e.noteFilter.controlPointCount; n++) {
                                        const s = e.noteFilter.controlPoints[n];
                                        s.type = yt(0, 3, Ft[t.charCodeAt(i++)]),
                                        s.freq = yt(0, p.filterFreqRange, Ft[t.charCodeAt(i++)]),
                                        s.gain = yt(0, p.filterGainRange, Ft[t.charCodeAt(i++)])
                                    }
                                    for (let t = e.noteFilter.controlPointCount; t < n; t++)
                                        i += 3;
                                    if (e.noteSubFilters[0] = e.noteFilter,
                                    h && !b || l || c) {
                                        let n = Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)];
                                        for (let s = 0; s < p.filterMorphCount - 1; s++)
                                            if (n & 1 << s) {
                                                const n = Ft[t.charCodeAt(i++)];
                                                null == e.noteSubFilters[s + 1] && (e.noteSubFilters[s + 1] = new Rt),
                                                e.noteSubFilters[s + 1].controlPointCount = yt(0, p.filterMaxPoints + 1, n);
                                                for (let t = e.noteSubFilters[s + 1].controlPoints.length; t < e.noteSubFilters[s + 1].controlPointCount; t++)
                                                    e.noteSubFilters[s + 1].controlPoints[t] = new Ot;
                                                for (let n = 0; n < e.noteSubFilters[s + 1].controlPointCount; n++) {
                                                    const o = e.noteSubFilters[s + 1].controlPoints[n];
                                                    o.type = yt(0, 3, Ft[t.charCodeAt(i++)]),
                                                    o.freq = yt(0, p.filterFreqRange, Ft[t.charCodeAt(i++)]),
                                                    o.gain = yt(0, p.filterGainRange, Ft[t.charCodeAt(i++)])
                                                }
                                                for (let t = e.noteSubFilters[s + 1].controlPointCount; t < n; t++)
                                                    i += 3
                                            }
                                    }
                                } else
                                    e.noteFilterType = !0,
                                    e.noteFilter.reset(),
                                    e.noteFilterSimpleCut = yt(0, p.filterSimpleCutRange, Ft[t.charCodeAt(i++)]),
                                    e.noteFilterSimplePeak = yt(0, p.filterSimplePeakRange, Ft[t.charCodeAt(i++)])
                            }
                            M(e.effects) && (e.transition = yt(0, p.transitions.length, Ft[t.charCodeAt(i++)])),
                            S(e.effects) && (e.chord = yt(0, p.chords.length, Ft[t.charCodeAt(i++)]),
                            e.chord == p.chords.dictionary.arpeggio.index && (h || l || c) && (e.arpeggioSpeed = Ft[t.charCodeAt(i++)],
                            e.fastTwoNoteArp = !!Ft[t.charCodeAt(i++)])),
                            F(e.effects) && (e.pitchShift = yt(0, p.pitchShiftRange, Ft[t.charCodeAt(i++)])),
                            C(e.effects) && (a ? (e.detune = yt(p.detuneMin, p.detuneMax + 1, Ft[t.charCodeAt(i++)]),
                            e.detune = Math.round((e.detune - 9) * (Math.abs(e.detune - 9) + 1) / 2 + p.detuneCenter)) : e.detune = yt(p.detuneMin, p.detuneMax + 1, (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)])),
                            A(e.effects) && (e.vibrato = yt(0, p.vibratos.length + 1, Ft[t.charCodeAt(i++)]),
                            e.vibrato == p.vibratos.length && (h || l || c) ? (e.vibratoDepth = yt(0, p.modulators.dictionary["vibrato depth"].maxRawVol + 1, Ft[t.charCodeAt(i++)]) / 25,
                            e.vibratoSpeed = yt(0, p.modulators.dictionary["vibrato speed"].maxRawVol + 1, Ft[t.charCodeAt(i++)]),
                            e.vibratoDelay = yt(0, p.modulators.dictionary["vibrato delay"].maxRawVol + 1, Ft[t.charCodeAt(i++)]),
                            e.vibratoType = yt(0, p.vibratoTypes.length, Ft[t.charCodeAt(i++)])) : (e.vibratoDepth = p.vibratos[e.vibrato].amplitude,
                            e.vibratoSpeed = 10,
                            e.vibratoDelay = p.vibratos[e.vibrato].delayTicks / 2,
                            e.vibratoType = p.vibratos[e.vibrato].type)),
                            T(e.effects) && (e.distortion = yt(0, p.distortionRange, Ft[t.charCodeAt(i++)]),
                            (h && !b || l || c) && (e.aliases = !!Ft[t.charCodeAt(i++)])),
                            P(e.effects) && (e.bitcrusherFreq = yt(0, p.bitcrusherFreqRange, Ft[t.charCodeAt(i++)]),
                            e.bitcrusherQuantization = yt(0, p.bitcrusherQuantizationRange, Ft[t.charCodeAt(i++)])),
                            B(e.effects) && (e.pan = yt(0, p.panMax + 1, a ? Math.round(Ft[t.charCodeAt(i++)] * (p.panMax / 8)) : (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)]),
                            (h && !u || l || c) && (e.panDelay = Ft[t.charCodeAt(i++)])),
                            I(e.effects) && (e.chorus = a ? 2 * yt(0, p.chorusRange / 2 + 1, Ft[t.charCodeAt(i++)]) : yt(0, p.chorusRange, Ft[t.charCodeAt(i++)])),
                            L(e.effects) && (e.echoSustain = yt(0, p.echoSustainRange, Ft[t.charCodeAt(i++)]),
                            e.echoDelay = yt(0, p.echoDelayRange, Ft[t.charCodeAt(i++)])),
                            D(e.effects) && (e.reverb = yt(0, p.reverbRange, a ? Math.round(Ft[t.charCodeAt(i++)] * p.reverbRange / 3) : Ft[t.charCodeAt(i++)]))
                        }
                        e.effects &= 4095
                    }
                    break;
                case 118:
                    if (f && a) {
                        const e = Ft[t.charCodeAt(i++)];
                        this.channels[e].instruments[0].volume = Math.round(yt(-p.volumeRange / 2, 1, 5 * -Ft[t.charCodeAt(i++)]))
                    } else if (g && a)
                        for (let e = 0; e < this.getChannelCount(); e++)
                            for (const n of this.channels[e].instruments)
                                n.volume = Math.round(yt(-p.volumeRange / 2, 1, 5 * -Ft[t.charCodeAt(i++)]));
                    else if (w && a) {
                        this.channels[_].instruments[V].volume = Math.round(yt(-p.volumeRange / 2, 1, 5 * -Ft[t.charCodeAt(i++)]))
                    } else if (a) {
                        this.channels[_].instruments[V].volume = Math.round(yt(-p.volumeRange / 2, 1, 25 * -Ft[t.charCodeAt(i++)] / 7))
                    } else {
                        this.channels[_].instruments[V].volume = Math.round(yt(-p.volumeRange / 2, p.volumeRange / 2 + 1, (Ft[t.charCodeAt(i++)] << 6 | Ft[t.charCodeAt(i++)]) - p.volumeRange / 2))
                    }
                    break;
                case 76:
                    if (x && a) {
                        this.channels[_].instruments[V].pan = yt(0, p.panMax + 1, Ft[t.charCodeAt(i++)] * (p.panMax / 8))
                    } else if (h && b || y && l) {
                        const e = this.channels[_].instruments[V];
                        e.pan = yt(0, p.panMax + 1, (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)]),
                        (h && !f || l || c) && (e.panDelay = Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 68:
                    {
                        const e = this.channels[_].instruments[V];
                        (h && b || y && l) && (e.detune = yt(p.detuneMin, p.detuneMax + 1, 4 * ((Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)])),
                        e.effects |= 256)
                    }
                    break;
                case 77:
                    {
                        let e = this.channels[_].instruments[V];
                        for (let n = 0; n < 64; n++)
                            e.customChipWave[n] = yt(-24, 25, Ft[t.charCodeAt(i++)] - 24);
                        let n = 0;
                        for (let t = 0; t < e.customChipWave.length; t++)
                            n += e.customChipWave[t];
                        const s = n / e.customChipWave.length;
                        let o = 0
                          , a = 0;
                        for (let t = 0; t < e.customChipWave.length; t++)
                            o += a,
                            a = e.customChipWave[t] - s,
                            e.customChipWaveIntegral[t] = o;
                        e.customChipWaveIntegral[64] = 0
                    }
                    break;
                case 79:
                    {
                        let e = Ft[t.charCodeAt(i++)];
                        63 == e ? this.restoreLimiterDefaults() : (this.compressionRatio = e < 10 ? e / 10 : 1 + (e - 10) / 60,
                        e = Ft[t.charCodeAt(i++)],
                        this.limitRatio = e < 10 ? e / 10 : e - 9,
                        this.limitDecay = Ft[t.charCodeAt(i++)],
                        this.limitRise = 250 * Ft[t.charCodeAt(i++)] + 2e3,
                        this.compressionThreshold = Ft[t.charCodeAt(i++)] / 20,
                        this.limitThreshold = Ft[t.charCodeAt(i++)] / 20,
                        this.masterGain = ((Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)]) / 50)
                    }
                    break;
                case 85:
                    for (let e = 0; e < this.getChannelCount(); e++) {
                        var K;
                        K = !y || l || c ? (Ft[t.charCodeAt(i++)] << 6) + Ft[t.charCodeAt(i++)] : Ft[t.charCodeAt(i++)],
                        this.channels[e].name = decodeURIComponent(t.substring(i, i + K)),
                        i += K
                    }
                    break;
                case 65:
                    {
                        const e = this.channels[_].instruments[V];
                        if (1 == e.type)
                            e.algorithm = yt(0, p.algorithms.length, Ft[t.charCodeAt(i++)]);
                        else if (e.algorithm6Op = yt(0, p.algorithms6Op.length, Ft[t.charCodeAt(i++)]),
                        e.customAlgorithm.fromPreset(e.algorithm6Op),
                        67 == t.charCodeAt(i)) {
                            let n = yt(1, p.operatorCount + 2 + 1, Ft[t.charCodeAt(i + 1)]);
                            i++;
                            let s = [];
                            if (113 == t.charCodeAt(i + 1)) {
                                i++;
                                let o = 0;
                                for (i++; 113 != t.charCodeAt(i); ) {
                                    s[o] = [];
                                    let e = 0;
                                    for (; 82 != t.charCodeAt(i); )
                                        s[o][e] = yt(1, p.operatorCount + 3, Ft[t.charCodeAt(i)]),
                                        e++,
                                        i++;
                                    o++,
                                    i++
                                }
                                e.customAlgorithm.set(n, s),
                                i++
                            }
                        }
                        if (x && a || b && h || y && l) {
                            const t = R[_][V];
                            e.convertLegacySettings(t, z)
                        }
                    }
                    break;
                case 120:
                    if (l && !y && g) {
                        const e = Ft[t.charCodeAt(i++)];
                        e + 62 > 85 && "legacysamples" != document.URL.substring(document.URL.length - 13).toLowerCase() && (q || (q = !0,
                        p.willReloadForCustomSamples = !0,
                        N.customSamples = ["legacySamples"],
                        d(0))),
                        this.channels[_].instruments[V].chipWave = e + 62 > 78 ? yt(0, p.chipWaves.length, e + 63) : e + 62 > 67 ? yt(0, p.chipWaves.length, e + 61) : e + 62 == 67 ? 40 : yt(0, p.chipWaves.length, e + 62)
                    } else {
                        const e = this.channels[_].instruments[V];
                        e.supersawDynamism = yt(0, p.supersawDynamismMax + 1, Ft[t.charCodeAt(i++)]),
                        e.supersawSpread = yt(0, p.supersawSpreadMax + 1, Ft[t.charCodeAt(i++)]),
                        e.supersawShape = yt(0, p.supersawShapeMax + 1, Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 70:
                    {
                        const e = this.channels[_].instruments[V];
                        if (1 == e.type)
                            e.feedbackType = yt(0, p.feedbacks.length, Ft[t.charCodeAt(i++)]);
                        else {
                            e.feedbackType6Op = yt(0, p.feedbacks6Op.length, Ft[t.charCodeAt(i++)]),
                            e.customFeedbackType.fromPreset(e.feedbackType6Op);
                            let n = [];
                            if (113 == t.charCodeAt(i)) {
                                let s = 0;
                                for (i++; 113 != t.charCodeAt(i); ) {
                                    n[s] = [];
                                    let e = 0;
                                    for (; 82 != t.charCodeAt(i); )
                                        n[s][e] = yt(1, p.operatorCount + 2, Ft[t.charCodeAt(i)]),
                                        e++,
                                        i++;
                                    s++,
                                    i++
                                }
                                e.customFeedbackType.set(n),
                                i++
                            }
                        }
                    }
                    break;
                case 66:
                    this.channels[_].instruments[V].feedbackAmplitude = yt(0, p.operatorAmplitudeMax + 1, Ft[t.charCodeAt(i++)]);
                    break;
                case 86:
                    if (x && a || b && h || y && l) {
                        const e = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11]
                          , n = this.channels[_].instruments[V]
                          , s = R[_][V];
                        let o = Ft[t.charCodeAt(i++)];
                        (u && l || !l && !c) && (o = e[o]),
                        s.feedbackEnvelope = Vt.gt(Ft[o]),
                        n.convertLegacySettings(s, z)
                    }
                    break;
                case 81:
                    {
                        const e = this.channels[_].instruments[V];
                        if (f && l) {
                            const n = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];
                            for (let s = 0; s < (11 == e.type ? 6 : p.operatorCount); s++)
                                e.operators[s].frequency = n[yt(0, n.length, Ft[t.charCodeAt(i++)])]
                        } else if (l || c)
                            for (let n = 0; n < (11 == e.type ? 6 : p.operatorCount); n++)
                                e.operators[n].frequency = yt(0, p.operatorFrequencies.length, Ft[t.charCodeAt(i++)]);
                        else {
                            const n = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];
                            for (let s = 0; s < (11 == e.type ? 6 : p.operatorCount); s++)
                                e.operators[s].frequency = n[yt(0, n.length, Ft[t.charCodeAt(i++)])]
                        }
                    }
                    break;
                case 80:
                    {
                        const e = this.channels[_].instruments[V];
                        for (let n = 0; n < (11 == e.type ? 6 : p.operatorCount); n++)
                            e.operators[n].amplitude = yt(0, p.operatorAmplitudeMax + 1, Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 69:
                    {
                        const e = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11]
                          , n = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60]
                          , s = this.channels[_].instruments[V];
                        if (x && a || b && h || y && l) {
                            const o = R[_][V];
                            o.operatorEnvelopes = [];
                            for (let r = 0; r < (11 == s.type ? 6 : p.operatorCount); r++) {
                                let s = Ft[t.charCodeAt(i++)];
                                (u && l || a) && (s = e[s]),
                                h && (s = n[s]),
                                o.operatorEnvelopes[r] = Vt.gt(s)
                            }
                            s.convertLegacySettings(o, z)
                        } else {
                            const o = yt(0, p.maxEnvelopeCount + 1, Ft[t.charCodeAt(i++)]);
                            (h && !g || c && !b) && (s.envelopeSpeed = yt(0, p.modulators.dictionary["envelope speed"].maxRawVol + 1, Ft[t.charCodeAt(i++)]),
                            s.discreteEnvelope = !!Ft[t.charCodeAt(i++)]);
                            for (let r = 0; r < o; r++) {
                                const o = yt(0, p.instrumentAutomationTargets.length, Ft[t.charCodeAt(i++)]);
                                let r = 0;
                                const c = p.instrumentAutomationTargets[o].maxCount;
                                c > 1 && (r = yt(0, c, Ft[t.charCodeAt(i++)]));
                                let d = Ft[t.charCodeAt(i++)];
                                (u && l || a) && (d = e[d]),
                                h && (d = n[d]);
                                const m = yt(0, p.envelopes.length, d);
                                s.addEnvelope(o, r, m)
                            }
                        }
                    }
                    break;
                case 82:
                    {
                        const e = this.channels[_].instruments[V];
                        if (f && l)
                            for (let n = 0; n < p.operatorCount; n++) {
                                const s = [0, 1, 3, 2, 2, 2, 4, 5]
                                  , o = yt(0, s.length, Ft[t.charCodeAt(i++)]);
                                3 == o ? e.operators[n].pulseWidth = 5 : 4 == o ? e.operators[n].pulseWidth = 4 : 5 == o && (e.operators[n].pulseWidth = 6),
                                e.operators[n].waveform = s[o]
                            }
                        else
                            for (let n = 0; n < (11 == e.type ? 6 : p.operatorCount); n++) {
                                if (h) {
                                    const s = [0, 1, 3, 2, 4, 5];
                                    e.operators[n].waveform = s[yt(0, p.operatorWaves.length, Ft[t.charCodeAt(i++)])]
                                } else
                                    e.operators[n].waveform = yt(0, p.operatorWaves.length, Ft[t.charCodeAt(i++)]);
                                2 == e.operators[n].waveform && (e.operators[n].pulseWidth = yt(0, p.pwmOperatorWaves.length, Ft[t.charCodeAt(i++)]))
                            }
                    }
                    break;
                case 83:
                    {
                        const e = this.channels[_].instruments[V];
                        if (3 == e.type) {
                            const n = Math.ceil(p.spectrumControlPoints * p.spectrumControlPointBits / 6)
                              , s = new Ct(t,i,i + n);
                            for (let t = 0; t < p.spectrumControlPoints; t++)
                                e.spectrumWave.spectrum[t] = s.read(p.spectrumControlPointBits);
                            e.spectrumWave.markCustomWaveDirty(),
                            i += n
                        } else {
                            if (4 != e.type)
                                throw new Error("Unhandled instrument type for spectrum song tag code.");
                            {
                                const n = Math.ceil(p.drumCount * p.spectrumControlPoints * p.spectrumControlPointBits / 6)
                                  , s = new Ct(t,i,i + n);
                                for (let t = 0; t < p.drumCount; t++) {
                                    for (let i = 0; i < p.spectrumControlPoints; i++)
                                        e.drumsetSpectrumWaves[t].spectrum[i] = s.read(p.spectrumControlPointBits);
                                    e.drumsetSpectrumWaves[t].markCustomWaveDirty()
                                }
                                i += n
                            }
                        }
                    }
                    break;
                case 72:
                    {
                        const e = this.channels[_].instruments[V]
                          , n = Math.ceil(p.harmonicsControlPoints * p.harmonicsControlPointBits / 6)
                          , s = new Ct(t,i,i + n);
                        for (let t = 0; t < p.harmonicsControlPoints; t++)
                            e.harmonicsWave.harmonics[t] = s.read(p.harmonicsControlPointBits);
                        e.harmonicsWave.markCustomWaveDirty(),
                        i += n
                    }
                    break;
                case 88:
                    if (h && b || l && y) {
                        const e = this.channels[_].instruments[V];
                        e.aliases = !!Ft[t.charCodeAt(i++)],
                        e.aliases && (e.distortion = 0,
                        e.effects |= 8)
                    } else if (c) {
                        this.channels[_].instruments[V].decimalOffset = yt(0, 51, Ft[t.charCodeAt(i++)])
                    }
                    break;
                case 98:
                    {
                        let e;
                        if (f && a) {
                            const n = Ft[t.charCodeAt(i++)]
                              , s = Ft[t.charCodeAt(i++)];
                            e = Math.ceil(.5 * s);
                            const o = new Ct(t,i,i + e);
                            for (let t = 0; t < s; t++)
                                this.channels[n].bars[t] = o.read(3) + 1
                        } else if (b && a) {
                            let n = 0;
                            for (; 1 << n < this.patternsPerChannel; )
                                n++;
                            e = Math.ceil(this.getChannelCount() * this.barCount * n / 6);
                            const s = new Ct(t,i,i + e);
                            for (let t = 0; t < this.getChannelCount(); t++)
                                for (let e = 0; e < this.barCount; e++)
                                    this.channels[t].bars[e] = s.read(n) + 1
                        } else {
                            let n = 0;
                            for (; 1 << n < this.patternsPerChannel + 1; )
                                n++;
                            e = Math.ceil(this.getChannelCount() * this.barCount * n / 6);
                            const s = new Ct(t,i,i + e);
                            for (let t = 0; t < this.getChannelCount(); t++)
                                for (let e = 0; e < this.barCount; e++)
                                    this.channels[t].bars[e] = s.read(n)
                        }
                        i += e
                    }
                    break;
                case 112:
                    {
                        let e, n = 0, s = !(y && h || a), o = s ? 4 : 3, r = s ? 16 : 8;
                        if (f && a)
                            e = Ft[t.charCodeAt(i++)],
                            i++,
                            n = Ft[t.charCodeAt(i++)],
                            n <<= 6,
                            n += Ft[t.charCodeAt(i++)];
                        else {
                            e = 0;
                            let s = bt(1, 4, Ft[t.charCodeAt(i++)]);
                            for (; s > 0; )
                                n <<= 6,
                                n += Ft[t.charCodeAt(i++)],
                                s--
                        }
                        const d = new Ct(t,i,i + n);
                        i += n;
                        const m = Vt.getNeededBits(p.noteSizeMax);
                        let u = -1
                          , g = -1
                          , v = -1;
                        const k = h
                          , M = 30;
                        for (; ; ) {
                            const t = this.channels[e]
                              , i = this.getChannelIsNoise(e)
                              , n = this.getChannelIsMod(e)
                              , S = this.getMaxInstrumentsPerPattern(e)
                              , F = Vt.getNeededBits(S - p.instrumentCountMin)
                              , C = Vt.getNeededBits(t.instruments.length - 1);
                            if (n) {
                                let i = b && h || y && l;
                                const n = i ? C : Vt.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                                for (let s = 0; s < t.instruments.length; s++) {
                                    let o = t.instruments[s];
                                    for (let t = 0; t < p.modCount; t++) {
                                        let a = d.read(2);
                                        switch (a) {
                                        case 0:
                                            o.modChannels[t] = yt(0, this.pitchChannelCount + this.noiseChannelCount + 1, d.read(8)),
                                            o.modInstruments[t] = yt(0, this.channels[o.modChannels[t]].instruments.length + 2, d.read(n));
                                            break;
                                        case 1:
                                            o.modChannels[t] = this.pitchChannelCount + yt(0, this.noiseChannelCount + 1, d.read(8)),
                                            o.modInstruments[t] = yt(0, this.channels[o.modChannels[t]].instruments.length + 2, d.read(C));
                                            break;
                                        case 2:
                                            o.modChannels[t] = -1;
                                            break;
                                        case 3:
                                            o.modChannels[t] = -2
                                        }
                                        if (3 != a && (o.modulators[t] = d.read(6)),
                                        i || "eq filter" != p.modulators[o.modulators[t]].name && "note filter" != p.modulators[o.modulators[t]].name || (o.modFilterTypes[t] = d.read(6)),
                                        i && o.modChannels[t] >= 0) {
                                            let e = E(this.channels[o.modChannels[t]].instruments[o.modInstruments[t]].effects);
                                            7 == o.modulators[t] ? (o.modulators[t] = e ? p.modulators.dictionary["note filt cut"].index : p.modulators.dictionary["eq filt cut"].index,
                                            o.modFilterTypes[t] = 1) : 8 == o.modulators[t] && (o.modulators[t] = e ? p.modulators.dictionary["note filt peak"].index : p.modulators.dictionary["eq filt peak"].index,
                                            o.modFilterTypes[t] = 2)
                                        } else
                                            i && o.modulators[t] == p.modulators.dictionary["song reverb"].index && (u = e,
                                            g = s,
                                            v = t);
                                        i && 12 != p.modulators[o.modulators[t]].associatedEffect && (this.channels[o.modChannels[t]].instruments[o.modInstruments[t]].effects |= 1 << p.modulators[o.modulators[t]].associatedEffect)
                                    }
                                }
                            }
                            const A = [];
                            for (let e = 0; e < t.instruments.length; e++) {
                                A[e] = [];
                                for (let i = 0; i < p.modCount; i++)
                                    A[e][p.modCount - 1 - i] = 1 + 3 * +((b && h || y && l) && n && t.instruments[e].modulators[i] == p.modulators.dictionary.detune.index)
                            }
                            const T = i || n ? 0 : 12 * t.octave;
                            let P = i || n ? 4 : T;
                            const B = n ? [0, 1, 2, 3, 4, 5] : i ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]
                              , I = [];
                            for (let t = 0; t < B.length; t++)
                                B[t] += T;
                            for (let e = 0; e < this.patternsPerChannel; e++) {
                                const i = t.patterns[e];
                                if (x && a || b && h || y && l)
                                    i.instruments[0] = bt(0, t.instruments.length - 1, d.read(C)),
                                    i.instruments.length = 1;
                                else if (this.patternInstruments) {
                                    const e = bt(p.instrumentCountMin, S, d.read(F) + p.instrumentCountMin);
                                    for (let s = 0; s < e; s++)
                                        i.instruments[s] = bt(0, t.instruments.length - 1 + 2 * +n, d.read(C));
                                    i.instruments.length = e
                                } else
                                    i.instruments[0] = 0,
                                    i.instruments.length = p.instrumentCountMin;
                                if (!(a && f || 0 != d.read(1))) {
                                    i.notes.length = 0;
                                    continue
                                }
                                let u = 0;
                                const g = i.notes;
                                let v = 0;
                                for (; u < this.beatsPerBar * p.partsPerBeat + +n; ) {
                                    const e = 1 == d.read(1);
                                    let f = !1
                                      , S = 0;
                                    if (e ? S = bt(0, I.length - 1, d.readLongTail(0, 0)) : f = 1 == d.read(1),
                                    e || f) {
                                        let f, F, C;
                                        if (e)
                                            f = I[S],
                                            I.splice(S, 1);
                                        else {
                                            if (f = {},
                                            s)
                                                1 == d.read(1) ? f.pitchCount = d.read(3) + 2 : f.pitchCount = 1;
                                            else
                                                for (f.pitchCount = 1; f.pitchCount < 4 && 1 == d.read(1); )
                                                    f.pitchCount++;
                                            f.pinCount = d.readPinCount(),
                                            f.initialSize = a ? 2 * d.read(2) : n ? d.read(9) : d.read(m),
                                            f.pins = [],
                                            f.length = 0,
                                            f.bendCount = 0;
                                            for (let t = 0; t < f.pinCount; t++) {
                                                let t = {};
                                                t.pitchBend = 1 == d.read(1),
                                                t.pitchBend && f.bendCount++,
                                                f.length += w && a ? d.readLegacyPartDuration() * p.partsPerBeat / p.rhythms[this.rhythm].stepsPerBeat : d.readPartDuration(),
                                                t.time = f.length,
                                                t.size = a ? 2 * d.read(2) : n ? d.read(9) : d.read(m),
                                                f.pins.push(t)
                                            }
                                        }
                                        I.unshift(f),
                                        I.length > 10 && I.pop(),
                                        g.length <= v ? (F = new Tt(0,u,u + f.length,f.initialSize),
                                        g[v++] = F) : (F = g[v++],
                                        F.start = u,
                                        F.end = u + f.length,
                                        F.pins[0].size = f.initialSize);
                                        let E = 0;
                                        const T = [];
                                        for (let t = 0; t < f.pitchCount + f.bendCount; t++) {
                                            if (1 == d.read(1)) {
                                                const t = bt(0, B.length - 1, d.read(o));
                                                C = B[t],
                                                B.splice(t, 1)
                                            } else {
                                                C = P;
                                                let t = d.readPitchInterval();
                                                for (; t > 0; ) {
                                                    for (C++; -1 != B.indexOf(C); )
                                                        C++;
                                                    t--
                                                }
                                                for (; t < 0; ) {
                                                    for (C--; -1 != B.indexOf(C); )
                                                        C--;
                                                    t++
                                                }
                                            }
                                            B.unshift(C),
                                            B.length > r && B.pop(),
                                            t < f.pitchCount ? F.pitches[E++] = C : T.push(C),
                                            P = t == f.pitchCount - 1 ? F.pitches[0] : C
                                        }
                                        F.pitches.length = E,
                                        T.unshift(F.pitches[0]);
                                        const L = n && t.instruments[i.instruments[0]].modulators[p.modCount - 1 - F.pitches[0]] === p.modulators.dictionary.tempo.index;
                                        let D = 0;
                                        k && L && (D = M - p.tempoMin),
                                        n && (F.pins[0].size += D,
                                        F.pins[0].size *= A[i.instruments[0]][F.pitches[0]]);
                                        let z = 1;
                                        for (const t of f.pins) {
                                            t.pitchBend && T.shift();
                                            const e = T[0] - F.pitches[0];
                                            if (F.pins.length <= z)
                                                F.pins[z++] = Et(e, t.time, n ? t.size * A[i.instruments[0]][F.pitches[0]] + D : t.size);
                                            else {
                                                const s = F.pins[z++];
                                                s.interval = e,
                                                s.time = t.time,
                                                s.size = n ? t.size * A[i.instruments[0]][F.pitches[0]] + D : t.size
                                            }
                                        }
                                        F.pins.length = z,
                                        0 == F.start && (F.continuesLastPattern = x && a || b && h || y && l ? !(y && !c || a) && t.instruments[i.instruments[0]].legacyTieOver : 1 == d.read(1)),
                                        u = bt(0, this.beatsPerBar * p.partsPerBeat, F.end)
                                    } else if (n) {
                                        const t = 1 == d.read(1)
                                          , e = d.readPartDuration();
                                        t ? u -= e : u += e
                                    } else {
                                        u += w && a ? d.readLegacyPartDuration() * p.partsPerBeat / p.rhythms[this.rhythm].stepsPerBeat : d.readPartDuration()
                                    }
                                }
                                g.length = v
                            }
                            if (f && a)
                                break;
                            if (e++,
                            e >= this.getChannelCount())
                                break
                        }
                        if ((h && b || y && l) && v >= 0)
                            for (let t = 0; t < this.channels.length; t++)
                                for (let e = 0; e < this.channels[t].instruments.length; e++) {
                                    const i = this.channels[t].instruments[e];
                                    if (D(i.effects) && (i.reverb = p.reverbRange - 1),
                                    u == t && g == e) {
                                        const e = this.channels[t].bars[0];
                                        if (e > 0) {
                                            const i = this.channels[t].patterns[e - 1];
                                            let n = 6;
                                            for (const t of i.notes)
                                                t.pitches[0] == p.modCount - 1 - v && (n = Math.min(n, t.start));
                                            n > 0 && i.notes.push(new Tt(p.modCount - 1 - v,0,n,H))
                                        } else if (this.channels[t].patterns.length < p.barCountMax) {
                                            const e = new Pt;
                                            if (this.channels[t].patterns.push(e),
                                            this.channels[t].bars[0] = this.channels[t].patterns.length,
                                            this.channels[t].patterns.length > this.patternsPerChannel) {
                                                for (let t = 0; t < this.channels.length; t++)
                                                    this.channels[t].patterns.length <= this.patternsPerChannel && this.channels[t].patterns.push(new Pt);
                                                this.patternsPerChannel++
                                            }
                                            e.instruments.length = 1,
                                            e.instruments[0] = g,
                                            e.notes.length = 0,
                                            e.notes.push(new Tt(p.modCount - 1 - v,0,6,H))
                                        }
                                    }
                                }
                    }
                    break;
                default:
                    throw new Error("Unrecognized song tag code " + String.fromCharCode($) + " at index " + (i - 1) + " " + t.substring(0, i))
                }
            p.willReloadForCustomSamples && (window.location.hash = this.toBase64String(),
            setTimeout(( () => {
                location.reload()
            }
            ), 50))
        }
        static Tt(t) {
            try {
                return Boolean(new URL(t))
            } catch (t) {
                return !1
            }
        }
        static Et(t, e, i, n, s) {
            const o = p.chipWaves[0].samples
              , a = p.rawRawChipWaves[0].samples
              , r = e.length;
            e.push(t);
            const l = p.chipWaves.length;
            let c = t
              , d = 44100
              , m = !1
              , u = 60
              , f = !1
              , y = null
              , b = null
              , g = null
              , w = null
              , v = !1
              , x = !1
              , k = t.indexOf("!")
              , M = -1;
            if (0 === k && (M = t.indexOf("!", k + 1),
            -1 !== M)) {
                const F = t.slice(k + 1, M).split(",");
                for (const C of F) {
                    const A = C.charAt(0)
                      , E = C.slice(1, C.length);
                    "s" === A ? d = yt(8e3, 96001, gt(E, 44100)) : "r" === A ? u = gt(E, 60) : "p" === A ? m = !0 : "a" === A ? (y = wt(E, null),
                    null != y && (f = !0)) : "b" === A ? (b = wt(E, null),
                    null != b && (f = !0)) : "c" === A ? (g = wt(E, null),
                    null != g && (f = !0)) : "d" === A ? (w = wt(E, null),
                    null != w && (w = yt(0, 4, w),
                    f = !0)) : "e" === A && (v = !0,
                    f = !0)
                }
                c = t.slice(M + 1, t.length),
                x = !0
            }
            let S = null;
            if (!Vt.Tt(c))
                return alert(t + " is not a valid url"),
                !1;
            if (S = new URL(c),
            s && !x && null != S) {
                function T() {
                    c = t.slice(0, t.indexOf(",")),
                    S = new URL(c),
                    d = yt(8e3, 96001, gt(t.slice(t.indexOf(",") + 1), 44100))
                }
                function P() {
                    c = t.slice(0, t.indexOf("!")),
                    S = new URL(c),
                    u = gt(t.slice(t.indexOf("!") + 1), 60)
                }
                -1 != t.indexOf("@") && (c = t.replaceAll("@", ""),
                S = new URL(c),
                m = !0),
                -1 != t.indexOf(",") && -1 != t.indexOf("!") ? t.indexOf(",") < t.indexOf("!") ? (P(),
                T()) : (T(),
                P()) : (-1 != t.indexOf(",") && T(),
                -1 != t.indexOf("!") && P())
            }
            if (null != S) {
                let B = c;
                const I = [];
                let L;
                44100 !== d && I.push("s" + d),
                60 !== u && I.push("r" + u),
                m && I.push("p"),
                f && (null != y && I.push("a" + y),
                null != b && I.push("b" + b),
                null != g && I.push("c" + g),
                null != w && I.push("d" + w),
                v && I.push("e")),
                I.length > 0 && (B = "!" + I.join(",") + "!" + c),
                e[r] = B,
                L = decodeURIComponent(S.pathname.replace(/^([^\/]*\/)+/, ""));
                const D = 1;
                p.chipWaves[l] = {
                    name: L,
                    expression: D,
                    isCustomSampled: !0,
                    isPercussion: m,
                    rootKey: u,
                    sampleRate: d,
                    samples: o,
                    index: l
                },
                p.rawChipWaves[l] = {
                    name: L,
                    expression: D,
                    isCustomSampled: !0,
                    isPercussion: m,
                    rootKey: u,
                    sampleRate: d,
                    samples: a,
                    index: l
                },
                p.rawRawChipWaves[l] = {
                    name: L,
                    expression: D,
                    isCustomSampled: !0,
                    isPercussion: m,
                    rootKey: u,
                    sampleRate: d,
                    samples: a,
                    index: l
                };
                const z = {
                    type: "chip",
                    eqFilter: [],
                    effects: [],
                    transition: "normal",
                    fadeInSeconds: 0,
                    fadeOutTicks: -3,
                    chord: "harmony",
                    wave: L,
                    unison: "none",
                    envelopes: []
                };
                f && (z.isUsingAdvancedLoopControls = !0,
                z.chipWaveLoopStart = null != y ? y : 0,
                z.chipWaveLoopEnd = null != b ? b : 2,
                z.chipWaveLoopMode = null != w ? w : 0,
                z.chipWavePlayBackwards = v,
                z.chipWaveStartOffset = null != g ? g : 0);
                const q = {
                    index: 0,
                    name: L,
                    midiProgram: 80,
                    settings: z
                };
                if (i.push(q),
                !p.willReloadForCustomSamples) {
                    h(c, l, z, {
                        isUsingAdvancedLoopControls: f,
                        chipWaveLoopStart: y,
                        chipWaveLoopEnd: b,
                        chipWaveLoopMode: w,
                        chipWavePlayBackwards: v,
                        chipWaveStartOffset: g
                    }, d)
                }
                n.statusTable[l] = 0,
                n.urlTable[l] = c,
                n.totalSamples++
            }
            return !0
        }
        static At() {
            p.chipWaves = k(p.chipWaves.slice(0, p.firstIndexForSamplesInChipWaveList)),
            p.rawChipWaves = k(p.rawChipWaves.slice(0, p.firstIndexForSamplesInChipWaveList)),
            p.rawRawChipWaves = k(p.rawRawChipWaves.slice(0, p.firstIndexForSamplesInChipWaveList))
        }
        static wt() {
            N.customSamples = null,
            Vt.At(),
            s.statusTable = {},
            s.urlTable = {},
            s.totalSamples = 0,
            s.samplesLoaded = 0,
            r.dispatchEvent(new o(s.totalSamples,s.samplesLoaded))
        }
        toJsonObject(t=!0, e=1, i=!0) {
            const n = [];
            for (let s = 0; s < this.getChannelCount(); s++) {
                const o = this.channels[s]
                  , a = []
                  , r = this.getChannelIsNoise(s)
                  , h = this.getChannelIsMod(s);
                for (const t of o.instruments)
                    a.push(t.toJsonObject());
                const l = [];
                for (const t of o.patterns)
                    l.push(t.toJsonObject(this, o, h));
                const c = [];
                if (t)
                    for (let t = 0; t < this.loopStart; t++)
                        c.push(o.bars[t]);
                for (let t = 0; t < e; t++)
                    for (let t = this.loopStart; t < this.loopStart + this.loopLength; t++)
                        c.push(o.bars[t]);
                if (i)
                    for (let t = this.loopStart + this.loopLength; t < this.barCount; t++)
                        c.push(o.bars[t]);
                const d = {
                    type: h ? "mod" : r ? "drum" : "pitch",
                    name: o.name,
                    instruments: a,
                    patterns: l,
                    sequence: c
                };
                r || (d.octaveScrollBar = o.octave - 1),
                n.push(d)
            }
            const s = {
                name: this.title,
                format: Vt.Pt,
                version: Vt.bt,
                scale: p.scales[this.scale].name,
                customScale: this.scaleCustom,
                key: p.keys[this.key].name,
                keyOctave: this.octave,
                introBars: this.loopStart,
                loopBars: this.loopLength,
                beatsPerBar: this.beatsPerBar,
                ticksPerBeat: p.rhythms[this.rhythm].stepsPerBeat,
                beatsPerMinute: this.tempo,
                reverb: this.reverb,
                masterGain: this.masterGain,
                compressionThreshold: this.compressionThreshold,
                limitThreshold: this.limitThreshold,
                limitDecay: this.limitDecay,
                limitRise: this.limitRise,
                limitRatio: this.limitRatio,
                compressionRatio: this.compressionRatio,
                layeredInstruments: this.layeredInstruments,
                patternInstruments: this.patternInstruments,
                channels: n
            };
            return null != N.customSamples && N.customSamples.length > 0 && (s.customSamples = N.customSamples),
            s
        }
        fromJsonObject(t, e="auto") {
            if (this.initToDefault(!0),
            !t)
                return;
            "auto" == e && "BeepBox" == t.format && (null != t.riff && (e = "modbox"),
            null != t.masterGain && (e = "jummbox"));
            const i = ("auto" == e ? t.format : e).toLowerCase();
            if (null != t.name && (this.title = t.name),
            null != t.customSamples) {
                const e = t.customSamples;
                if (null == N.customSamples || N.customSamples.join(", ") != e.join(", ")) {
                    p.willReloadForCustomSamples = !0,
                    Vt.At();
                    let t = !1
                      , i = !1
                      , n = !1;
                    const o = []
                      , a = [];
                    for (const r of e)
                        if ("legacysamples" === r.toLowerCase())
                            t || (t = !0,
                            o.push(r),
                            d(0));
                        else if ("nintariboxsamples" === r.toLowerCase())
                            i || (i = !0,
                            o.push(r),
                            d(1));
                        else if ("mariopaintboxsamples" === r.toLowerCase())
                            n || (n = !0,
                            o.push(r),
                            d(2));
                        else {
                            const t = !1;
                            Vt.Et(r, o, a, s, t)
                        }
                    if (o.length > 0 && (N.customSamples = o),
                    a.length > 0) {
                        const t = k(a);
                        N.presetCategories[N.presetCategories.length] = {
                            name: "Custom Sample Presets",
                            presets: t,
                            index: N.presetCategories.length
                        }
                    }
                }
            } else {
                let e = !1;
                if (null != t.channels)
                    for (let n = 0; n < t.channels.length; n++) {
                        const s = t.channels[n];
                        if ("pitch" === s.type && Array.isArray(s.instruments)) {
                            const t = s.instruments;
                            for (let n = 0; n < t.length; n++) {
                                const s = t[n];
                                if ("chip" !== s.type)
                                    continue;
                                if (null == s.wave)
                                    continue;
                                const o = s.wave
                                  , a = ["paandorasbox kick", "paandorasbox snare", "paandorasbox piano1", "paandorasbox WOW", "paandorasbox overdrive", "paandorasbox trumpet", "paandorasbox saxophone", "paandorasbox orchestrahit", "paandorasbox detatched violin", "paandorasbox synth", "paandorasbox sonic3snare", "paandorasbox come on", "paandorasbox choir", "paandorasbox overdriveguitar", "paandorasbox flute", "paandorasbox legato violin", "paandorasbox tremolo violin", "paandorasbox amen break", "paandorasbox pizzicato violin", "paandorasbox tim allen grunt", "paandorasbox tuba", "paandorasbox loopingcymbal", "paandorasbox standardkick", "paandorasbox standardsnare", "paandorasbox closedhihat", "paandorasbox foothihat", "paandorasbox openhihat", "paandorasbox crashcymbal", "paandorasbox pianoC4", "paandorasbox liver pad", "paandorasbox marimba", "paandorasbox susdotwav", "paandorasbox wackyboxtts", "paandorasbox peppersteak_1", "paandorasbox peppersteak_2", "paandorasbox vinyl_noise", "paandorasbeta slap bass", "paandorasbeta HD EB overdrive guitar", "paandorasbeta sunsoft bass", "paandorasbeta masculine choir", "paandorasbeta feminine choir", "paandorasbeta tololoche", "paandorasbeta harp", "paandorasbeta pan flute", "paandorasbeta krumhorn", "paandorasbeta timpani", "paandorasbeta crowd hey", "paandorasbeta wario land 4 brass", "paandorasbeta wario land 4 rock organ", "paandorasbeta wario land 4 DAOW", "paandorasbeta wario land 4 hour chime", "paandorasbeta wario land 4 tick", "paandorasbeta kirby kick", "paandorasbeta kirby snare", "paandorasbeta kirby bongo", "paandorasbeta kirby click", "paandorasbeta sonor kick", "paandorasbeta sonor snare", "paandorasbeta sonor snare (left hand)", "paandorasbeta sonor snare (right hand)", "paandorasbeta sonor high tom", "paandorasbeta sonor low tom", "paandorasbeta sonor hihat (closed)", "paandorasbeta sonor hihat (half opened)", "paandorasbeta sonor hihat (open)", "paandorasbeta sonor hihat (open tip)", "paandorasbeta sonor hihat (pedal)", "paandorasbeta sonor crash", "paandorasbeta sonor crash (tip)", "paandorasbeta sonor ride"]
                                  , r = ["pandoraasbox kick", "pandoraasbox snare", "pandoraasbox piano1", "pandoraasbox WOW", "pandoraasbox overdrive", "pandoraasbox trumpet", "pandoraasbox saxophone", "pandoraasbox orchestrahit", "pandoraasbox detatched violin", "pandoraasbox synth", "pandoraasbox sonic3snare", "pandoraasbox come on", "pandoraasbox choir", "pandoraasbox overdriveguitar", "pandoraasbox flute", "pandoraasbox legato violin", "pandoraasbox tremolo violin", "pandoraasbox amen break", "pandoraasbox pizzicato violin", "pandoraasbox tim allen grunt", "pandoraasbox tuba", "pandoraasbox loopingcymbal", "pandoraasbox standardkick", "pandoraasbox standardsnare", "pandoraasbox closedhihat", "pandoraasbox foothihat", "pandoraasbox openhihat", "pandoraasbox crashcymbal", "pandoraasbox pianoC4", "pandoraasbox liver pad", "pandoraasbox marimba", "pandoraasbox susdotwav", "pandoraasbox wackyboxtts", "pandoraasbox peppersteak_1", "pandoraasbox peppersteak_2", "pandoraasbox vinyl_noise", "pandoraasbeta slap bass", "pandoraasbeta HD EB overdrive guitar", "pandoraasbeta sunsoft bass", "pandoraasbeta masculine choir", "pandoraasbeta feminine choir", "pandoraasbeta tololoche", "pandoraasbeta harp", "pandoraasbeta pan flute", "pandoraasbeta krumhorn", "pandoraasbeta timpani", "pandoraasbeta crowd hey", "pandoraasbeta wario land 4 brass", "pandoraasbeta wario land 4 rock organ", "pandoraasbeta wario land 4 DAOW", "pandoraasbeta wario land 4 hour chime", "pandoraasbeta wario land 4 tick", "pandoraasbeta kirby kick", "pandoraasbeta kirby snare", "pandoraasbeta kirby bongo", "pandoraasbeta kirby click", "pandoraasbeta sonor kick", "pandoraasbeta sonor snare", "pandoraasbeta sonor snare (left hand)", "pandoraasbeta sonor snare (right hand)", "pandoraasbeta sonor high tom", "pandoraasbeta sonor low tom", "pandoraasbeta sonor hihat (closed)", "pandoraasbeta sonor hihat (half opened)", "pandoraasbeta sonor hihat (open)", "pandoraasbeta sonor hihat (open tip)", "pandoraasbeta sonor hihat (pedal)", "pandoraasbeta sonor crash", "pandoraasbeta sonor crash (tip)", "pandoraasbeta sonor ride"]
                                  , h = ["kick", "snare", "piano1", "WOW", "overdrive", "trumpet", "saxophone", "orchestrahit", "detatched violin", "synth", "sonic3snare", "come on", "choir", "overdriveguitar", "flute", "legato violin", "tremolo violin", "amen break", "pizzicato violin", "tim allen grunt", "tuba", "loopingcymbal", "standardkick", "standardsnare", "closedhihat", "foothihat", "openhihat", "crashcymbal", "pianoC4", "liver pad", "marimba", "susdotwav", "wackyboxtts"];
                                a.includes(o) ? e = !0 : r.includes(o) ? (e = !0,
                                s.wave = a[r.findIndex((t => t === o))]) : h.includes(o) && ("trumpet" !== o && "flute" !== o || "paandorasbox" == i) && (e = !0,
                                s.wave = a[h.findIndex((t => t === o))])
                            }
                        }
                    }
                e ? (p.willReloadForCustomSamples = !0,
                Vt.At(),
                d(0),
                N.customSamples = ["legacySamples"]) : null != N.customSamples && N.customSamples.length > 0 && (p.willReloadForCustomSamples = !0,
                Vt.wt())
            }
            if (this.scale = 0,
            null != t.scale) {
                const e = {
                    "romani :)": "double harmonic :)",
                    "romani :(": "double harmonic :(",
                    "dbl harmonic :)": "double harmonic :)",
                    "dbl harmonic :(": "double harmonic :(",
                    enigma: "strange"
                }
                  , i = null != e[t.scale] ? e[t.scale] : t.scale
                  , s = p.scales.findIndex((t => t.name == i));
                if (-1 != s && (this.scale = s),
                this.scale == p.scales.dictionary.Custom.index && null != t.customScale)
                    for (var n of t.customScale.keys())
                        this.scaleCustom[n] = t.customScale[n]
            }
            if (null != t.key)
                if ("number" == typeof t.key)
                    this.key = (t.key + 1200 >>> 0) % p.keys.length;
                else if ("string" == typeof t.key) {
                    const e = t.key;
                    if ("C+" === e)
                        this.key = 0,
                        this.octave = 1;
                    else if ("G- (actually F#-)" === e)
                        this.key = 6,
                        this.octave = -1;
                    else if ("C-" === e)
                        this.key = 0,
                        this.octave = -1;
                    else if ("oh no (F-)" === e)
                        this.key = 5,
                        this.octave = -1;
                    else {
                        const t = e.charAt(0).toUpperCase()
                          , i = e.charAt(1).toLowerCase();
                        let n = {
                            C: 0,
                            D: 2,
                            E: 4,
                            F: 5,
                            G: 7,
                            A: 9,
                            B: 11
                        }[t];
                        const s = {
                            "#": 1,
                            "♯": 1,
                            b: -1,
                            "♭": -1
                        }[i];
                        null != n && (null != s && (n += s),
                        n < 0 && (n += 12),
                        n %= 12,
                        this.key = n)
                    }
                }
            null != t.beatsPerMinute && (this.tempo = yt(p.tempoMin, p.tempoMax + 1, 0 | t.beatsPerMinute)),
            null != t.keyOctave && (this.octave = yt(p.octaveMin, p.octaveMax + 1, 0 | t.keyOctave));
            let o = 0;
            null != t.reverb && (o = yt(0, 32, 0 | t.reverb)),
            null != t.beatsPerBar && (this.beatsPerBar = Math.max(p.beatsPerBarMin, Math.min(p.beatsPerBarMax, 0 | t.beatsPerBar)));
            let a = 4;
            null != t.ticksPerBeat && (a = 0 | t.ticksPerBeat || 4,
            this.rhythm = p.rhythms.findIndex((t => t.stepsPerBeat == a)),
            -1 == this.rhythm && (this.rhythm = 1)),
            null != t.masterGain ? this.masterGain = Math.max(0, Math.min(5, t.masterGain || 0)) : this.masterGain = 1,
            null != t.limitThreshold ? this.limitThreshold = Math.max(0, Math.min(2, t.limitThreshold || 0)) : this.limitThreshold = 1,
            null != t.compressionThreshold ? this.compressionThreshold = Math.max(0, Math.min(1.1, t.compressionThreshold || 0)) : this.compressionThreshold = 1,
            null != t.limitRise ? this.limitRise = Math.max(2e3, Math.min(1e4, t.limitRise || 0)) : this.limitRise = 4e3,
            null != t.limitDecay ? this.limitDecay = Math.max(1, Math.min(30, t.limitDecay || 0)) : this.limitDecay = 4,
            null != t.limitRatio ? this.limitRatio = Math.max(0, Math.min(11, t.limitRatio || 0)) : this.limitRatio = 1,
            null != t.compressionRatio ? this.compressionRatio = Math.max(0, Math.min(1.168, t.compressionRatio || 0)) : this.compressionRatio = 1;
            let r = 1
              , h = 1
              , l = 1;
            if (null != t.channels)
                for (const e of t.channels)
                    e.instruments && (r = Math.max(r, 0 | e.instruments.length)),
                    e.patterns && (h = Math.max(h, 0 | e.patterns.length)),
                    e.sequence && (l = Math.max(l, 0 | e.sequence.length));
            null != t.layeredInstruments ? this.layeredInstruments = !!t.layeredInstruments : this.layeredInstruments = !1,
            null != t.patternInstruments ? this.patternInstruments = !!t.patternInstruments : this.patternInstruments = r > 1,
            this.patternsPerChannel = Math.min(h, p.barCountMax),
            this.barCount = Math.min(l, p.barCountMax),
            null != t.introBars && (this.loopStart = yt(0, this.barCount, 0 | t.introBars)),
            null != t.loopBars && (this.loopLength = yt(1, this.barCount - this.loopStart + 1, 0 | t.loopBars));
            const c = []
              , m = []
              , u = [];
            if (null != t.channels)
                for (let e = 0; e < t.channels.length; e++) {
                    let n = t.channels[e];
                    const s = new _t;
                    let r = !1
                      , h = !1;
                    if (null != n.type ? (r = "drum" == n.type,
                    h = "mod" == n.type) : r = e >= 3,
                    r ? m.push(s) : h ? u.push(s) : c.push(s),
                    null != n.octaveScrollBar && (s.octave = yt(0, p.pitchOctaves, 1 + (0 | n.octaveScrollBar)),
                    r && (s.octave = 0)),
                    null != n.name ? s.name = n.name : s.name = "",
                    Array.isArray(n.instruments)) {
                        const t = n.instruments;
                        for (let e = 0; e < t.length && !(e >= this.getMaxInstrumentsPerChannel()); e++) {
                            const n = new Ht(r,h);
                            s.instruments[e] = n,
                            n.fromJsonObject(t[e], r, h, !1, !1, o, i)
                        }
                    }
                    for (let t = 0; t < this.patternsPerChannel; t++) {
                        const e = new Pt;
                        let o;
                        s.patterns[t] = e,
                        n.patterns && (o = n.patterns[t]),
                        null != o && e.fromJsonObject(o, this, s, a, r, h, i)
                    }
                    s.patterns.length = this.patternsPerChannel;
                    for (let t = 0; t < this.barCount; t++)
                        s.bars[t] = null != n.sequence ? Math.min(this.patternsPerChannel, n.sequence[t] >>> 0) : 0;
                    s.bars.length = this.barCount
                }
            c.length > p.pitchChannelCountMax && (c.length = p.pitchChannelCountMax),
            m.length > p.noiseChannelCountMax && (m.length = p.noiseChannelCountMax),
            u.length > p.modChannelCountMax && (u.length = p.modChannelCountMax),
            this.pitchChannelCount = c.length,
            this.noiseChannelCount = m.length,
            this.modChannelCount = u.length,
            this.channels.length = 0,
            Array.prototype.push.apply(this.channels, c),
            Array.prototype.push.apply(this.channels, m),
            Array.prototype.push.apply(this.channels, u),
            p.willReloadForCustomSamples && (window.location.hash = this.toBase64String(),
            setTimeout(( () => {
                location.reload()
            }
            ), 50))
        }
        getPattern(t, e) {
            if (e < 0 || e >= this.barCount)
                return null;
            const i = this.channels[t].bars[e];
            return 0 == i ? null : this.channels[t].patterns[i - 1]
        }
        getBeatsPerMinute() {
            return this.tempo
        }
        static getNeededBits(t) {
            return 32 - Math.clz32(Math.ceil(t + 1) - 1)
        }
        restoreLimiterDefaults() {
            this.compressionRatio = 1,
            this.limitRatio = 1,
            this.limitRise = 4e3,
            this.limitDecay = 4,
            this.limitThreshold = 1,
            this.compressionThreshold = 1,
            this.masterGain = 1
        }
    }
    Vt.Pt = p.jsonFormat,
    Vt.xt = 2,
    Vt.vt = 9,
    Vt.Mt = 1,
    Vt.kt = 6,
    Vt.Ft = 1,
    Vt.St = 4,
    Vt.Ct = 1,
    Vt.bt = 5,
    Vt.yt = 117;
    class Gt {
        constructor() {
            this.delayLine = null,
            this.allPassG = 0,
            this.allPassGDelta = 0,
            this.sustainFilterA1 = 0,
            this.sustainFilterA1Delta = 0,
            this.sustainFilterA2 = 0,
            this.sustainFilterA2Delta = 0,
            this.sustainFilterB0 = 0,
            this.sustainFilterB0Delta = 0,
            this.sustainFilterB1 = 0,
            this.sustainFilterB1Delta = 0,
            this.sustainFilterB2 = 0,
            this.sustainFilterB2Delta = 0,
            this.reset()
        }
        reset() {
            this.delayIndex = -1,
            this.allPassSample = 0,
            this.allPassPrevInput = 0,
            this.sustainFilterSample = 0,
            this.sustainFilterPrevOutput2 = 0,
            this.sustainFilterPrevInput1 = 0,
            this.sustainFilterPrevInput2 = 0,
            this.fractionalDelaySample = 0,
            this.prevDelayLength = -1,
            this.delayResetOffset = 0
        }
        update(t, e, i, n, s, o, a, r) {
            const h = 2 * Math.PI * p.pickedStringDispersionCenterFreq / t.samplesPerSecond
              , l = this.prevDelayLength
              , c = i.phaseDeltas[n]
              , d = i.phaseDeltaScales[n]
              , m = c * Math.pow(d, s)
              , u = 2 * Math.PI * c
              , f = 2 * Math.PI * m
              , y = 2 * u
              , b = 2 * f
              , g = Math.min(Math.PI, u * p.pickedStringDispersionFreqMult * Math.pow(h / u, p.pickedStringDispersionFreqScale))
              , w = Math.min(Math.PI, f * p.pickedStringDispersionFreqMult * Math.pow(h / f, p.pickedStringDispersionFreqScale))
              , v = 2 * Math.PI * p.pickedStringShelfHz / t.samplesPerSecond
              , x = (Math.pow(100, o) - 1) / 99
              , k = (Math.pow(100, a) - 1) / 99
              , M = 1 == r ? .25 : 0
              , S = 15.6
              , F = 3 * t.samplesPerSecond / 48e3
              , C = Math.pow(.5, x * Math.pow(v / (u * S), 1 + 2 * M) * S)
              , A = Math.pow(.5, k * Math.pow(v / (f * S), 1 + 2 * M) * S)
              , E = Math.pow(C, .002)
              , T = Math.pow(A, .002);
            Jt.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(g),
            t.tempFrequencyResponse.analyze(Jt.tempFilterStartCoefficients, y);
            const P = Jt.tempFilterStartCoefficients.b[0]
              , B = -t.tempFrequencyResponse.angle() / y;
            Jt.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(w),
            t.tempFrequencyResponse.analyze(Jt.tempFilterEndCoefficients, b);
            const I = Jt.tempFilterEndCoefficients.b[0]
              , L = -t.tempFrequencyResponse.angle() / b
              , D = 0 == r ? 0 : 1;
            if (0 == D) {
                const t = Math.pow(C, p.stringDecayRate)
                  , e = Math.pow(A, p.stringDecayRate);
                Jt.tempFilterStartCoefficients.highShelf2ndOrder(v, t, .5),
                Jt.tempFilterEndCoefficients.highShelf2ndOrder(v, e, .5)
            } else {
                const e = Math.pow(1 == D ? 0 : 1, .25)
                  , i = Math.pow(F * F * u * 3.3 * 48e3 / t.samplesPerSecond, .5 + M) / F / Math.pow(x, .5)
                  , n = Math.pow(F * F * f * 3.3 * 48e3 / t.samplesPerSecond, .5 + M) / F / Math.pow(k, .5)
                  , s = i * Math.pow(2, .5 - 1.75 * (1 - Math.pow(1 - e, .85)))
                  , o = n * Math.pow(2, .5 - 1.75 * (1 - Math.pow(1 - e, .85)))
                  , a = Math.pow(2, -Math.pow(2, -Math.pow(e, .9)))
                  , r = Math.pow(2, -Math.pow(2, -Math.pow(e, .9)));
                Jt.tempFilterStartCoefficients.lowPass2ndOrderButterworth(ut(s), a),
                Jt.tempFilterEndCoefficients.lowPass2ndOrderButterworth(ut(o), r)
            }
            t.tempFrequencyResponse.analyze(Jt.tempFilterStartCoefficients, y);
            const z = Jt.tempFilterStartCoefficients.a[1]
              , q = Jt.tempFilterStartCoefficients.a[2]
              , N = Jt.tempFilterStartCoefficients.b[0] * E
              , O = Jt.tempFilterStartCoefficients.b[1] * E
              , R = Jt.tempFilterStartCoefficients.b[2] * E
              , $ = -t.tempFrequencyResponse.angle() / y;
            t.tempFrequencyResponse.analyze(Jt.tempFilterEndCoefficients, b);
            const H = Jt.tempFilterEndCoefficients.a[1]
              , _ = Jt.tempFilterEndCoefficients.a[2]
              , V = Jt.tempFilterEndCoefficients.b[0] * T
              , G = Jt.tempFilterEndCoefficients.b[1] * T
              , W = Jt.tempFilterEndCoefficients.b[2] * T
              , j = -t.tempFrequencyResponse.angle() / b
              , U = 1 / c
              , K = 1 / m
              , J = Math.ceil(2 * Math.max(U, K))
              , Y = U - B - $
              , Q = K - L - j;
            this.prevDelayLength = Y,
            this.delayLengthDelta = (Q - Y) / s,
            this.allPassG = P,
            this.sustainFilterA1 = z,
            this.sustainFilterA2 = q,
            this.sustainFilterB0 = N,
            this.sustainFilterB1 = O,
            this.sustainFilterB2 = R,
            this.allPassGDelta = (I - P) / s,
            this.sustainFilterA1Delta = (H - z) / s,
            this.sustainFilterA2Delta = (_ - q) / s,
            this.sustainFilterB0Delta = (V - N) / s,
            this.sustainFilterB1Delta = (G - O) / s,
            this.sustainFilterB2Delta = (W - R) / s;
            const Z = Math.abs(Math.log2(Y / l)) > .01
              , X = -1 == this.delayIndex || Z;
            if (null == this.delayLine || this.delayLine.length <= J) {
                const e = Math.ceil(2 * t.samplesPerSecond / Ht.frequencyFromPitch(12))
                  , i = new Float32Array(Jt.fittingPowerOfTwo(Math.max(e, J)));
                if (!X && null != this.delayLine) {
                    const t = this.delayLine.length - 1 >> 0
                      , e = this.delayIndex + this.delayResetOffset;
                    this.delayIndex = this.delayLine.length - this.delayResetOffset;
                    for (let n = 0; n < this.delayLine.length; n++)
                        i[n] = this.delayLine[e + n & t]
                }
                this.delayLine = i
            }
            const tt = this.delayLine
              , et = tt.length - 1 >> 0;
            if (X) {
                this.delayIndex = 0,
                this.allPassSample = 0,
                this.allPassPrevInput = 0,
                this.sustainFilterSample = 0,
                this.sustainFilterPrevOutput2 = 0,
                this.sustainFilterPrevInput1 = 0,
                this.sustainFilterPrevInput2 = 0,
                this.fractionalDelaySample = 0;
                const i = -Y
                  , n = Math.floor(i - U / 2)
                  , s = Math.ceil(n + 2 * U);
                this.delayResetOffset = s;
                for (let t = n; t <= s; t++)
                    tt[t & et] = 0;
                const o = e.wave
                  , a = o.length - 1
                  , r = a / U
                  , h = Math.min(.2 * U, .003 * t.samplesPerSecond)
                  , l = Math.ceil(i)
                  , c = i + U + h
                  , d = c;
                let p = (l - i) * r
                  , m = 0;
                for (let t = l; t <= d; t++) {
                    const e = 0 | p
                      , n = e % a;
                    let s = o[n];
                    const l = p - e;
                    s += (o[n + 1] - s) * l;
                    const d = (s - m) / r
                      , u = Math.min(1, (t - i) / h) * Math.min(1, (c - t) / h)
                      , f = u * u * (3 - 2 * u);
                    tt[t & et] += d * f,
                    m = s,
                    p += r
                }
            }
        }
    }
    class Wt {
        constructor() {
            this.noteSecondsStart = 0,
            this.noteSecondsStartUnscaled = 0,
            this.noteSecondsEnd = 0,
            this.noteSecondsEndUnscaled = 0,
            this.noteTicksStart = 0,
            this.noteTicksEnd = 0,
            this.noteSizeStart = p.noteSizeMax,
            this.noteSizeEnd = p.noteSizeMax,
            this.prevNoteSize = p.noteSizeMax,
            this.nextNoteSize = p.noteSizeMax,
            this.Bt = p.noteSizeMax,
            this.prevNoteSecondsStart = 0,
            this.prevNoteSecondsStartUnscaled = 0,
            this.prevNoteSecondsEnd = 0,
            this.prevNoteSecondsEndUnscaled = 0,
            this.prevNoteTicksStart = 0,
            this.prevNoteTicksEnd = 0,
            this.It = p.noteSizeMax,
            this.prevSlideStart = !1,
            this.prevSlideEnd = !1,
            this.nextSlideStart = !1,
            this.nextSlideEnd = !1,
            this.prevSlideRatioStart = 0,
            this.prevSlideRatioEnd = 0,
            this.nextSlideRatioStart = 0,
            this.nextSlideRatioEnd = 0,
            this.envelopeStarts = [],
            this.envelopeEnds = [],
            this.Lt = [],
            this.Dt = 0,
            this.lowpassCutoffDecayVolumeCompensation = 1;
            for (let t = 0; t < 41; t++)
                this.envelopeStarts[t] = 1,
                this.envelopeEnds[t] = 1;
            this.reset()
        }
        reset() {
            this.noteSecondsEnd = 0,
            this.noteSecondsEndUnscaled = 0,
            this.noteTicksEnd = 0,
            this.Bt = p.noteSizeMax,
            this.prevNoteSecondsEnd = 0,
            this.prevNoteSecondsEndUnscaled = 0,
            this.prevNoteTicksEnd = 0,
            this.It = p.noteSizeMax,
            this.Dt = 0
        }
        computeEnvelopes(t, e, i, n, s, o, a) {
            const r = s;
            s *= a;
            const h = t.getTransition();
            null == o || !o.atNoteStart || h.continues || o.forceContinueAtStart || (this.prevNoteSecondsEnd = this.noteSecondsEnd,
            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled,
            this.prevNoteTicksEnd = this.noteTicksEnd,
            this.It = this.Bt,
            this.noteSecondsEnd = 0,
            this.noteSecondsEndUnscaled = 0,
            this.noteTicksEnd = 0),
            null != o && (null != o.note ? this.Bt = o.note.pins[o.note.pins.length - 1].size : this.Bt = p.noteSizeMax);
            const l = i + a
              , c = n + 1
              , d = this.noteSecondsEnd
              , m = this.noteSecondsEndUnscaled
              , u = d + s
              , f = m + r
              , y = this.noteTicksEnd
              , b = y + 1
              , g = this.prevNoteSecondsEnd
              , w = this.prevNoteSecondsEndUnscaled
              , v = g + s
              , x = w + r
              , k = this.prevNoteTicksEnd
              , M = k + 1
              , S = 1 / (p.ticksPerPart * p.partsPerBeat)
              , F = S * i
              , C = S * l;
            let A = this.Bt
              , E = this.Bt
              , T = this.It
              , P = 0
              , B = !1
              , I = !1
              , L = !1
              , D = !1
              , z = 0
              , q = 0
              , N = 0
              , O = 0;
            if (null != o && null != o.note && !o.passedEndOfNote) {
                const t = o.note.getEndPinIndex(e)
                  , i = o.note.pins[t - 1]
                  , s = o.note.pins[t]
                  , a = (o.note.start + i.time) * p.ticksPerPart
                  , r = (o.note.start + s.time) * p.ticksPerPart
                  , l = (n - a) / (r - a)
                  , d = (c - a) / (r - a);
                if (A = i.size + (s.size - i.size) * l,
                E = i.size + (s.size - i.size) * d,
                h.slides) {
                    const t = o.noteStartPart * p.ticksPerPart
                      , e = o.noteEndPart * p.ticksPerPart
                      , i = .5 * (e - t)
                      , s = Math.min(i, h.slideTicks);
                    null == o.prevNote || o.forceContinueAtStart || (n - t < s && (B = !0,
                    z = .5 * (1 - (n - t) / s)),
                    c - t < s && (I = !0,
                    q = .5 * (1 - (c - t) / s))),
                    null == o.nextNote || o.forceContinueAtEnd || (P = o.nextNote.pins[0].size,
                    e - n < s && (L = !0,
                    N = .5 * (1 - (e - n) / s)),
                    e - c < s && (D = !0,
                    O = .5 * (1 - (e - c) / s)))
                }
            }
            let R = 1
              , $ = !1;
            for (let e = 0; e <= t.envelopeCount; e++) {
                let i, n, s;
                if (e == t.envelopeCount) {
                    if ($)
                        break;
                    i = p.instrumentAutomationTargets.dictionary.noteVolume,
                    n = 0,
                    s = p.envelopes.dictionary["note size"]
                } else {
                    let o = t.envelopes[e];
                    i = p.instrumentAutomationTargets[o.target],
                    n = o.index,
                    s = p.envelopes[o.envelope],
                    0 == s.type && ($ = !0)
                }
                if (null != i.computeIndex) {
                    const e = i.computeIndex + n;
                    let o = Wt.computeEnvelope(s, d, F, A);
                    if (B) {
                        o += (Wt.computeEnvelope(s, g, F, T) - o) * z
                    }
                    if (L) {
                        o += (Wt.computeEnvelope(s, 0, F, P) - o) * N
                    }
                    let a = o;
                    if (0 == t.discreteEnvelope) {
                        if (a = Wt.computeEnvelope(s, u, C, E),
                        I) {
                            a += (Wt.computeEnvelope(s, v, C, T) - a) * q
                        }
                        if (D) {
                            a += (Wt.computeEnvelope(s, 0, C, P) - a) * O
                        }
                    }
                    if (this.envelopeStarts[e] *= o,
                    this.envelopeEnds[e] *= a,
                    this.Lt[this.Dt++] = e,
                    i.isFilter) {
                        const e = null != t.tmpNoteFilterStart ? t.tmpNoteFilterStart : t.noteFilter;
                        e.controlPointCount > n && 0 == e.controlPoints[n].type && (R = Math.max(R, Wt.getLowpassCutoffDecayVolumeCompensation(s)))
                    }
                }
            }
            this.noteSecondsStart = d,
            this.noteSecondsStartUnscaled = m,
            this.noteSecondsEnd = u,
            this.noteSecondsEndUnscaled = f,
            this.noteTicksStart = y,
            this.noteTicksEnd = b,
            this.prevNoteSecondsStart = g,
            this.prevNoteSecondsStartUnscaled = w,
            this.prevNoteSecondsEnd = v,
            this.prevNoteSecondsEndUnscaled = x,
            this.prevNoteTicksStart = k,
            this.prevNoteTicksEnd = M,
            this.prevNoteSize = T,
            this.nextNoteSize = P,
            this.noteSizeStart = A,
            this.noteSizeEnd = E,
            this.prevSlideStart = B,
            this.prevSlideEnd = I,
            this.nextSlideStart = L,
            this.nextSlideEnd = D,
            this.prevSlideRatioStart = z,
            this.prevSlideRatioEnd = q,
            this.nextSlideRatioStart = N,
            this.nextSlideRatioEnd = O,
            this.lowpassCutoffDecayVolumeCompensation = R
        }
        clearEnvelopes() {
            for (let t = 0; t < this.Dt; t++) {
                const e = this.Lt[t];
                this.envelopeStarts[e] = 1,
                this.envelopeEnds[e] = 1
            }
            this.Dt = 0
        }
        static computeEnvelope(t, e, i, n) {
            switch (t.type) {
            case 0:
                return Jt.noteSizeToVolumeMult(n);
            case 1:
                return 1;
            case 4:
                return 1 / (1 + e * t.speed);
            case 5:
                return 1 - 1 / (1 + e * t.speed);
            case 6:
                return .5 - .5 * Math.cos(2 * i * Math.PI * t.speed);
            case 7:
                return .75 - .25 * Math.cos(2 * i * Math.PI * t.speed);
            case 2:
                return Math.max(1, 2 - 10 * e);
            case 3:
                const s = .25 / Math.sqrt(t.speed);
                return e < s ? e / s : 1 / (1 + (e - s) * t.speed);
            case 8:
                return Math.pow(2, -t.speed * e);
            case 13:
                return 1 * +(e < .25 / Math.sqrt(t.speed));
            case 9:
                let o = .5 - .5 * Math.cos(i * t.speed);
                return o = 1 / (1 + e * (t.speed - o / (1.5 / t.speed))),
                o = o > 0 ? o : 0,
                o;
            case 11:
                {
                    let i = 1 - e / (16 / t.speed);
                    return i = i > 0 ? i : 0,
                    i
                }
            case 12:
                {
                    let i = e / (16 / t.speed);
                    return i = i < 1 ? i : 1,
                    i
                }
            default:
                throw new Error("Unrecognized operator envelope type.")
            }
        }
        static getLowpassCutoffDecayVolumeCompensation(t) {
            return 8 == t.type ? 1.25 + .025 * t.speed : 4 == t.type ? 1 + .02 * t.speed : 1
        }
    }
    class jt {
        constructor() {
            this.pitches = Array(p.maxChordSize + 2).fill(0),
            this.pitchCount = 0,
            this.chordSize = 0,
            this.drumsetPitch = null,
            this.note = null,
            this.prevNote = null,
            this.nextNote = null,
            this.prevNotePitchIndex = 0,
            this.nextNotePitchIndex = 0,
            this.freshlyAllocated = !0,
            this.atNoteStart = !1,
            this.isOnLastTick = !1,
            this.passedEndOfNote = !1,
            this.forceContinueAtStart = !1,
            this.forceContinueAtEnd = !1,
            this.noteStartPart = 0,
            this.noteEndPart = 0,
            this.ticksSinceReleased = 0,
            this.liveInputSamplesHeld = 0,
            this.lastInterval = 0,
            this.noiseSample = 0,
            this.noiseSampleA = 0,
            this.noiseSampleB = 0,
            this.stringSustainStart = 0,
            this.stringSustainEnd = 0,
            this.phases = [],
            this.operatorWaves = [],
            this.phaseDeltas = [],
            this.directions = [],
            this.chipWaveCompletions = [],
            this.chipWavePrevWaves = [],
            this.chipWaveCompletionsLastWave = [],
            this.phaseDeltaScales = [],
            this.expression = 0,
            this.expressionDelta = 0,
            this.operatorExpressions = [],
            this.operatorExpressionDeltas = [],
            this.prevPitchExpressions = Array(p.maxPitchOrOperatorCount).fill(null),
            this.prevVibrato = null,
            this.prevStringDecay = null,
            this.pulseWidth = 0,
            this.pulseWidthDelta = 0,
            this.decimalOffset = 0,
            this.supersawDynamism = 0,
            this.supersawDynamismDelta = 0,
            this.supersawUnisonDetunes = [],
            this.supersawShape = 0,
            this.supersawShapeDelta = 0,
            this.supersawDelayLength = 0,
            this.supersawDelayLengthDelta = 0,
            this.supersawDelayLine = null,
            this.supersawDelayIndex = -1,
            this.supersawPrevPhaseDelta = null,
            this.pickedStrings = [],
            this.noteFilters = [],
            this.noteFilterCount = 0,
            this.initialNoteFilterInput1 = 0,
            this.initialNoteFilterInput2 = 0,
            this.specialIntervalExpressionMult = 1,
            this.feedbackOutputs = [],
            this.feedbackMult = 0,
            this.feedbackDelta = 0,
            this.stereoVolumeLStart = 0,
            this.stereoVolumeRStart = 0,
            this.stereoVolumeLDelta = 0,
            this.stereoVolumeRDelta = 0,
            this.stereoDelayStart = 0,
            this.stereoDelayEnd = 0,
            this.stereoDelayDelta = 0,
            this.customVolumeStart = 0,
            this.customVolumeEnd = 0,
            this.filterResonanceStart = 0,
            this.filterResonanceDelta = 0,
            this.isFirstOrder = !1,
            this.envelopeComputer = new Wt,
            this.reset()
        }
        reset() {
            this.noiseSample = 0,
            this.noiseSampleA = 0,
            this.noiseSampleB = 0;
            for (let t = 0; t < p.maxPitchOrOperatorCount; t++)
                this.phases[t] = 0,
                this.directions[t] = 1,
                this.chipWaveCompletions[t] = 0,
                this.chipWavePrevWaves[t] = 0,
                this.chipWaveCompletionsLastWave[t] = 0,
                this.operatorWaves[t] = p.operatorWaves[0],
                this.feedbackOutputs[t] = 0,
                this.prevPitchExpressions[t] = null;
            for (let t = 0; t < this.noteFilterCount; t++)
                this.noteFilters[t].resetOutput();
            this.noteFilterCount = 0,
            this.initialNoteFilterInput1 = 0,
            this.initialNoteFilterInput2 = 0,
            this.liveInputSamplesHeld = 0,
            this.supersawDelayIndex = -1;
            for (const t of this.pickedStrings)
                t.reset();
            this.envelopeComputer.reset(),
            this.prevVibrato = null,
            this.prevStringDecay = null,
            this.supersawPrevPhaseDelta = null,
            this.drumsetPitch = null
        }
    }
    class Ut {
        constructor() {
            this.awake = !1,
            this.computed = !1,
            this.tonesAddedInThisTick = !1,
            this.flushingDelayLines = !1,
            this.deactivateAfterThisTick = !1,
            this.attentuationProgress = 0,
            this.flushedSamples = 0,
            this.activeTones = new lt,
            this.activeModTones = new lt,
            this.releasedTones = new lt,
            this.liveInputTones = new lt,
            this.type = 0,
            this.synthesizer = null,
            this.wave = null,
            this.isUsingAdvancedLoopControls = !1,
            this.chipWaveLoopStart = 0,
            this.chipWaveLoopEnd = 0,
            this.chipWaveLoopMode = 0,
            this.chipWavePlayBackwards = !1,
            this.chipWaveStartOffset = 0,
            this.noisePitchFilterMult = 1,
            this.unison = null,
            this.unisonVoices = 1,
            this.unisonSpread = 0,
            this.unisonOffset = 0,
            this.unisonExpression = 1.4,
            this.unisonSign = 1,
            this.chord = null,
            this.effects = 0,
            this.volumeScale = 0,
            this.aliases = !1,
            this.arpTime = 0,
            this.vibratoTime = 0,
            this.nextVibratoTime = 0,
            this.envelopeTime = 0,
            this.eqFilterVolume = 1,
            this.eqFilterVolumeDelta = 0,
            this.mixVolume = 1,
            this.mixVolumeDelta = 0,
            this.delayInputMult = 0,
            this.delayInputMultDelta = 0,
            this.distortion = 0,
            this.distortionDelta = 0,
            this.distortionDrive = 0,
            this.distortionDriveDelta = 0,
            this.distortionFractionalInput1 = 0,
            this.distortionFractionalInput2 = 0,
            this.distortionFractionalInput3 = 0,
            this.distortionPrevInput = 0,
            this.distortionNextOutput = 0,
            this.bitcrusherPrevInput = 0,
            this.bitcrusherCurrentOutput = 0,
            this.bitcrusherPhase = 1,
            this.bitcrusherPhaseDelta = 0,
            this.bitcrusherPhaseDeltaScale = 1,
            this.bitcrusherScale = 1,
            this.bitcrusherScaleScale = 1,
            this.bitcrusherFoldLevel = 1,
            this.bitcrusherFoldLevelScale = 1,
            this.eqFilters = [],
            this.eqFilterCount = 0,
            this.initialEqFilterInput1 = 0,
            this.initialEqFilterInput2 = 0,
            this.panningDelayLine = null,
            this.panningDelayPos = 0,
            this.panningVolumeL = 0,
            this.panningVolumeR = 0,
            this.panningVolumeDeltaL = 0,
            this.panningVolumeDeltaR = 0,
            this.panningOffsetL = 0,
            this.panningOffsetR = 0,
            this.panningOffsetDeltaL = 0,
            this.panningOffsetDeltaR = 0,
            this.chorusDelayLineL = null,
            this.chorusDelayLineR = null,
            this.chorusDelayLineDirty = !1,
            this.chorusDelayPos = 0,
            this.chorusPhase = 0,
            this.chorusVoiceMult = 0,
            this.chorusVoiceMultDelta = 0,
            this.chorusCombinedMult = 0,
            this.chorusCombinedMultDelta = 0,
            this.echoDelayLineL = null,
            this.echoDelayLineR = null,
            this.echoDelayLineDirty = !1,
            this.echoDelayPos = 0,
            this.echoDelayOffsetStart = 0,
            this.echoDelayOffsetEnd = null,
            this.echoDelayOffsetRatio = 0,
            this.echoDelayOffsetRatioDelta = 0,
            this.echoMult = 0,
            this.echoMultDelta = 0,
            this.echoShelfA1 = 0,
            this.echoShelfB0 = 0,
            this.echoShelfB1 = 0,
            this.echoShelfSampleL = 0,
            this.echoShelfSampleR = 0,
            this.echoShelfPrevInputL = 0,
            this.echoShelfPrevInputR = 0,
            this.reverbDelayLine = null,
            this.reverbDelayLineDirty = !1,
            this.reverbDelayPos = 0,
            this.reverbMult = 0,
            this.reverbMultDelta = 0,
            this.reverbShelfA1 = 0,
            this.reverbShelfB0 = 0,
            this.reverbShelfB1 = 0,
            this.reverbShelfSample0 = 0,
            this.reverbShelfSample1 = 0,
            this.reverbShelfSample2 = 0,
            this.reverbShelfSample3 = 0,
            this.reverbShelfPrevInput0 = 0,
            this.reverbShelfPrevInput1 = 0,
            this.reverbShelfPrevInput2 = 0,
            this.reverbShelfPrevInput3 = 0,
            this.spectrumWave = new zt,
            this.harmonicsWave = new Nt,
            this.drumsetSpectrumWaves = [];
            for (let t = 0; t < p.drumCount; t++)
                this.drumsetSpectrumWaves[t] = new zt
        }
        allocateNecessaryBuffers(t, e, i) {
            if (B(e.effects) && (null == this.panningDelayLine || this.panningDelayLine.length < t.panningDelayBufferSize) && (this.panningDelayLine = new Float32Array(t.panningDelayBufferSize)),
            I(e.effects) && ((null == this.chorusDelayLineL || this.chorusDelayLineL.length < t.chorusDelayBufferSize) && (this.chorusDelayLineL = new Float32Array(t.chorusDelayBufferSize)),
            (null == this.chorusDelayLineR || this.chorusDelayLineR.length < t.chorusDelayBufferSize) && (this.chorusDelayLineR = new Float32Array(t.chorusDelayBufferSize))),
            L(e.effects)) {
                const t = Math.max(p.echoDelayRange >> 1, e.echoDelay + 1)
                  , n = 2 * Jt.fittingPowerOfTwo(t * p.echoDelayStepTicks * i);
                if (null == this.echoDelayLineL || null == this.echoDelayLineR)
                    this.echoDelayLineL = new Float32Array(n),
                    this.echoDelayLineR = new Float32Array(n);
                else if (this.echoDelayLineL.length < n || this.echoDelayLineR.length < n) {
                    const t = new Float32Array(n)
                      , e = new Float32Array(n)
                      , i = this.echoDelayLineL.length - 1;
                    for (let n = 0; n < this.echoDelayLineL.length; n++)
                        t[n] = this.echoDelayLineL[this.echoDelayPos + n & i],
                        e[n] = this.echoDelayLineL[this.echoDelayPos + n & i];
                    this.echoDelayPos = this.echoDelayLineL.length,
                    this.echoDelayLineL = t,
                    this.echoDelayLineR = e
                }
            }
            D(e.effects) && null == this.reverbDelayLine && (this.reverbDelayLine = new Float32Array(p.reverbDelayBufferSize))
        }
        deactivate() {
            this.bitcrusherPrevInput = 0,
            this.bitcrusherCurrentOutput = 0,
            this.bitcrusherPhase = 1;
            for (let t = 0; t < this.eqFilterCount; t++)
                this.eqFilters[t].resetOutput();
            if (this.eqFilterCount = 0,
            this.initialEqFilterInput1 = 0,
            this.initialEqFilterInput2 = 0,
            this.distortionFractionalInput1 = 0,
            this.distortionFractionalInput2 = 0,
            this.distortionFractionalInput3 = 0,
            this.distortionPrevInput = 0,
            this.distortionNextOutput = 0,
            this.panningDelayPos = 0,
            null != this.panningDelayLine)
                for (let t = 0; t < this.panningDelayLine.length; t++)
                    this.panningDelayLine[t] = 0;
            this.echoDelayOffsetEnd = null,
            this.echoShelfSampleL = 0,
            this.echoShelfSampleR = 0,
            this.echoShelfPrevInputL = 0,
            this.echoShelfPrevInputR = 0,
            this.reverbShelfSample0 = 0,
            this.reverbShelfSample1 = 0,
            this.reverbShelfSample2 = 0,
            this.reverbShelfSample3 = 0,
            this.reverbShelfPrevInput0 = 0,
            this.reverbShelfPrevInput1 = 0,
            this.reverbShelfPrevInput2 = 0,
            this.reverbShelfPrevInput3 = 0,
            this.volumeScale = 1,
            this.aliases = !1,
            this.awake = !1,
            this.flushingDelayLines = !1,
            this.deactivateAfterThisTick = !1,
            this.attentuationProgress = 0,
            this.flushedSamples = 0
        }
        resetAllEffects() {
            if (this.deactivate(),
            this.vibratoTime = 0,
            this.nextVibratoTime = 0,
            this.arpTime = 0,
            this.envelopeTime = 0,
            this.chorusDelayLineDirty) {
                for (let t = 0; t < this.chorusDelayLineL.length; t++)
                    this.chorusDelayLineL[t] = 0;
                for (let t = 0; t < this.chorusDelayLineR.length; t++)
                    this.chorusDelayLineR[t] = 0
            }
            if (this.echoDelayLineDirty) {
                for (let t = 0; t < this.echoDelayLineL.length; t++)
                    this.echoDelayLineL[t] = 0;
                for (let t = 0; t < this.echoDelayLineR.length; t++)
                    this.echoDelayLineR[t] = 0
            }
            if (this.reverbDelayLineDirty)
                for (let t = 0; t < this.reverbDelayLine.length; t++)
                    this.reverbDelayLine[t] = 0;
            this.chorusPhase = 0
        }
        compute(t, e, i, n, s, o, a) {
            this.computed = !0,
            this.type = e.type,
            this.synthesizer = Jt.getInstrumentSynthFunction(e),
            this.unison = p.unisons[e.unison],
            this.chord = e.getChord(),
            this.noisePitchFilterMult = p.chipNoises[e.chipNoise].pitchFilterMult,
            this.effects = e.effects,
            this.aliases = e.aliases,
            this.volumeScale = 1,
            this.allocateNecessaryBuffers(t, e, i);
            const r = t.samplesPerSecond;
            this.updateWaves(e, r);
            const h = T(this.effects)
              , l = P(this.effects)
              , c = B(this.effects)
              , d = I(this.effects)
              , m = L(this.effects)
              , u = D(this.effects);
            if (h) {
                let i = e.distortion
                  , s = e.distortion;
                t.isModActive(p.modulators.dictionary.distortion.index, o, a) && (i = t.getModValue(p.modulators.dictionary.distortion.index, o, a, !1),
                s = t.getModValue(p.modulators.dictionary.distortion.index, o, a, !0));
                const r = Math.min(1, i / (p.distortionRange - 1))
                  , h = Math.min(1, s / (p.distortionRange - 1))
                  , l = Math.pow(1 - .895 * (Math.pow(20, r) - 1) / 19, 2)
                  , c = Math.pow(1 - .895 * (Math.pow(20, h) - 1) / 19, 2)
                  , d = (1 + 2 * r) / p.distortionBaseVolume
                  , m = (1 + 2 * h) / p.distortionBaseVolume;
                this.distortion = l,
                this.distortionDelta = (c - l) / n,
                this.distortionDrive = d,
                this.distortionDriveDelta = (m - d) / n
            }
            if (l) {
                let i = e.bitcrusherFreq
                  , s = e.bitcrusherFreq;
                t.isModActive(p.modulators.dictionary["freq crush"].index, o, a) && (i = t.getModValue(p.modulators.dictionary["freq crush"].index, o, a, !1),
                s = t.getModValue(p.modulators.dictionary["freq crush"].index, o, a, !0));
                let h = e.bitcrusherQuantization
                  , l = e.bitcrusherQuantization;
                t.isModActive(p.modulators.dictionary["bit crush"].index, o, a) && (h = t.getModValue(p.modulators.dictionary["bit crush"].index, o, a, !1),
                l = t.getModValue(p.modulators.dictionary["bit crush"].index, o, a, !0));
                const c = p.keys[t.song.key].basePitch + p.pitchesPerOctave * t.song.octave
                  , d = Ht.frequencyFromPitch(c + 60) * Math.pow(2, (p.bitcrusherFreqRange - 1 - i) * p.bitcrusherOctaveStep)
                  , m = Ht.frequencyFromPitch(c + 60) * Math.pow(2, (p.bitcrusherFreqRange - 1 - s) * p.bitcrusherOctaveStep)
                  , u = Math.min(1, d / r)
                  , f = Math.min(1, m / r);
                this.bitcrusherPhaseDelta = u,
                this.bitcrusherPhaseDeltaScale = Math.pow(f / u, 1 / n);
                const y = 2 * p.bitcrusherBaseVolume * Math.pow(2, 1 - Math.pow(2, .5 * (p.bitcrusherQuantizationRange - 1 - h)))
                  , b = 2 * p.bitcrusherBaseVolume * Math.pow(2, 1 - Math.pow(2, .5 * (p.bitcrusherQuantizationRange - 1 - l)));
                this.bitcrusherScale = y,
                this.bitcrusherScaleScale = Math.pow(b / y, 1 / n);
                const g = 2 * p.bitcrusherBaseVolume * Math.pow(1.5, p.bitcrusherQuantizationRange - 1 - h)
                  , w = 2 * p.bitcrusherBaseVolume * Math.pow(1.5, p.bitcrusherQuantizationRange - 1 - l);
                this.bitcrusherFoldLevel = g,
                this.bitcrusherFoldLevelScale = Math.pow(w / g, 1 / n)
            }
            let f = 1;
            if (e.eqFilterType) {
                const i = e.eqFilter;
                null == e.eqSubFilters[1] && (e.eqSubFilters[1] = new Rt);
                const s = e.eqSubFilters[1];
                let h, l = e.eqFilterSimpleCut, c = e.eqFilterSimplePeak, d = e.eqFilterSimpleCut, m = e.eqFilterSimplePeak, u = !1;
                if (t.isModActive(p.modulators.dictionary["eq filt cut"].index, o, a) && (l = t.getModValue(p.modulators.dictionary["eq filt cut"].index, o, a, !1),
                d = t.getModValue(p.modulators.dictionary["eq filt cut"].index, o, a, !0),
                u = !0),
                t.isModActive(p.modulators.dictionary["eq filt peak"].index, o, a) && (c = t.getModValue(p.modulators.dictionary["eq filt peak"].index, o, a, !1),
                m = t.getModValue(p.modulators.dictionary["eq filt peak"].index, o, a, !0),
                u = !0),
                u) {
                    i.convertLegacySettingsForSynth(l, c),
                    s.convertLegacySettingsForSynth(d, m),
                    h = i.controlPoints[0];
                    let t = s.controlPoints[0];
                    h.toCoefficients(Jt.tempFilterStartCoefficients, r, 1, 1),
                    t.toCoefficients(Jt.tempFilterEndCoefficients, r, 1, 1),
                    this.eqFilters.length < 1 && (this.eqFilters[0] = new mt),
                    this.eqFilters[0].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterEndCoefficients, 1 / n, 0 == h.type)
                } else
                    i.convertLegacySettingsForSynth(l, c, !0),
                    h = i.controlPoints[0],
                    h.toCoefficients(Jt.tempFilterStartCoefficients, r, 1, 1),
                    this.eqFilters.length < 1 && (this.eqFilters[0] = new mt),
                    this.eqFilters[0].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterStartCoefficients, 1 / n, 0 == h.type);
                f *= h.getVolumeCompensationMult(),
                this.eqFilterCount = 1,
                f = Math.min(3, f)
            } else {
                const t = null != e.tmpEqFilterStart ? e.tmpEqFilterStart : e.eqFilter;
                for (let i = 0; i < t.controlPointCount; i++) {
                    let s = t.controlPoints[i]
                      , o = null != e.tmpEqFilterEnd && null != e.tmpEqFilterEnd.controlPoints[i] ? e.tmpEqFilterEnd.controlPoints[i] : t.controlPoints[i];
                    s.type != o.type && (s = o),
                    s.toCoefficients(Jt.tempFilterStartCoefficients, r, 1, 1),
                    o.toCoefficients(Jt.tempFilterEndCoefficients, r, 1, 1),
                    this.eqFilters.length <= i && (this.eqFilters[i] = new mt),
                    this.eqFilters[i].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterEndCoefficients, 1 / n, 0 == s.type),
                    f *= s.getVolumeCompensationMult()
                }
                this.eqFilterCount = t.controlPointCount,
                f = Math.min(3, f)
            }
            const y = Jt.instrumentVolumeToVolumeMult(e.volume);
            this.mixVolume = y;
            let b = y;
            if (t.isModActive(p.modulators.dictionary["mix volume"].index, o, a)) {
                const e = t.getModValue(p.modulators.dictionary["mix volume"].index, o, a, !1)
                  , i = t.getModValue(p.modulators.dictionary["mix volume"].index, o, a, !0);
                this.mixVolume *= e <= 0 ? (e + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(e),
                b *= i <= 0 ? (i + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(i)
            }
            t.isModActive(p.modulators.dictionary["song volume"].index) && (this.mixVolume *= t.getModValue(p.modulators.dictionary["song volume"].index, void 0, void 0, !1) / 100,
            b *= t.getModValue(p.modulators.dictionary["song volume"].index, void 0, void 0, !0) / 100),
            this.mixVolumeDelta = (b - this.mixVolume) / n;
            let g = f
              , w = f
              , v = 1
              , x = 1;
            if (c) {
                let i = e.pan
                  , s = e.pan;
                t.isModActive(p.modulators.dictionary.pan.index, o, a) && (i = t.getModValue(p.modulators.dictionary.pan.index, o, a, !1),
                s = t.getModValue(p.modulators.dictionary.pan.index, o, a, !0));
                let h = Math.max(-1, Math.min(1, (i - p.panCenter) / p.panCenter))
                  , l = Math.max(-1, Math.min(1, (s - p.panCenter) / p.panCenter));
                const c = 1.414 * Math.cos((1 + h) * Math.PI * .25)
                  , d = 1.414 * Math.cos((1 - h) * Math.PI * .25)
                  , m = 1.414 * Math.cos((1 + l) * Math.PI * .25)
                  , u = 1.414 * Math.cos((1 - l) * Math.PI * .25)
                  , f = r * p.panDelaySecondsMax;
                let y = e.panDelay
                  , b = e.panDelay;
                t.isModActive(p.modulators.dictionary["pan delay"].index, o, a) && (y = t.getModValue(p.modulators.dictionary["pan delay"].index, o, a, !1),
                b = t.getModValue(p.modulators.dictionary["pan delay"].index, o, a, !0));
                const g = h * y * f / 10
                  , w = l * b * f / 10
                  , v = Math.max(0, g)
                  , x = Math.max(0, -g)
                  , k = Math.max(0, w)
                  , M = Math.max(0, -w);
                this.panningVolumeL = c,
                this.panningVolumeR = d,
                this.panningVolumeDeltaL = (m - c) / n,
                this.panningVolumeDeltaR = (u - d) / n,
                this.panningOffsetL = this.panningDelayPos - v + t.panningDelayBufferSize,
                this.panningOffsetR = this.panningDelayPos - x + t.panningDelayBufferSize,
                this.panningOffsetDeltaL = (k - v) / n,
                this.panningOffsetDeltaR = (M - x) / n
            }
            if (d) {
                let i = e.chorus
                  , s = e.chorus;
                t.isModActive(p.modulators.dictionary.chorus.index, o, a) && (i = t.getModValue(p.modulators.dictionary.chorus.index, o, a, !1),
                s = t.getModValue(p.modulators.dictionary.chorus.index, o, a, !0));
                let r = Math.min(1, i / (p.chorusRange - 1))
                  , h = Math.min(1, s / (p.chorusRange - 1));
                r = .6 * r + .4 * Math.pow(r, 6),
                h = .6 * h + .4 * Math.pow(h, 6);
                const l = 1 / Math.sqrt(3 * r * r + 1)
                  , c = 1 / Math.sqrt(3 * h * h + 1);
                this.chorusVoiceMult = r,
                this.chorusVoiceMultDelta = (h - r) / n,
                this.chorusCombinedMult = l,
                this.chorusCombinedMultDelta = (c - l) / n
            }
            let k = 0
              , M = 0;
            if (m) {
                let s = e.echoSustain
                  , h = e.echoSustain;
                t.isModActive(p.modulators.dictionary.echo.index, o, a) && (s = Math.max(0, t.getModValue(p.modulators.dictionary.echo.index, o, a, !1)),
                h = Math.max(0, t.getModValue(p.modulators.dictionary.echo.index, o, a, !0)));
                const l = .9 * Math.min(1, Math.pow(s / p.echoSustainRange, 1.1))
                  , c = .9 * Math.min(1, Math.pow(h / p.echoSustainRange, 1.1));
                this.echoMult = l,
                this.echoMultDelta = Math.max(0, (c - l) / n),
                k = Math.max(l, c);
                let d = e.echoDelay
                  , m = e.echoDelay
                  , u = !1;
                t.isModActive(p.modulators.dictionary["echo delay"].index, o, a) && (d = t.getModValue(p.modulators.dictionary["echo delay"].index, o, a, !1),
                m = t.getModValue(p.modulators.dictionary["echo delay"].index, o, a, !0),
                u = !0);
                const f = Math.round((d + 1) * p.echoDelayStepTicks * i)
                  , y = Math.round((m + 1) * p.echoDelayStepTicks * i);
                null == this.echoDelayOffsetEnd || u ? this.echoDelayOffsetStart = f : this.echoDelayOffsetStart = this.echoDelayOffsetEnd,
                this.echoDelayOffsetEnd = y,
                M = .5 * (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) / r,
                this.echoDelayOffsetRatio = 0,
                this.echoDelayOffsetRatioDelta = 1 / n;
                const b = 2 * Math.PI * p.echoShelfHz / t.samplesPerSecond;
                Jt.tempFilterStartCoefficients.highShelf1stOrder(b, p.echoShelfGain),
                this.echoShelfA1 = Jt.tempFilterStartCoefficients.a[1],
                this.echoShelfB0 = Jt.tempFilterStartCoefficients.b[0],
                this.echoShelfB1 = Jt.tempFilterStartCoefficients.b[1]
            }
            let S = 0;
            if (u) {
                let i = e.reverb
                  , s = e.reverb;
                t.isModActive(p.modulators.dictionary.reverb.index, o, a) && (i = t.getModValue(p.modulators.dictionary.reverb.index, o, a, !1),
                s = t.getModValue(p.modulators.dictionary.reverb.index, o, a, !0)),
                t.isModActive(p.modulators.dictionary["song reverb"].index, o, a) && (i *= (t.getModValue(p.modulators.dictionary["song reverb"].index, void 0, void 0, !1) - p.modulators.dictionary["song reverb"].convertRealFactor) / p.reverbRange,
                s *= (t.getModValue(p.modulators.dictionary["song reverb"].index, void 0, void 0, !0) - p.modulators.dictionary["song reverb"].convertRealFactor) / p.reverbRange);
                const r = .425 * Math.min(1, Math.pow(i / p.reverbRange, .667))
                  , h = .425 * Math.min(1, Math.pow(s / p.reverbRange, .667));
                this.reverbMult = r,
                this.reverbMultDelta = (h - r) / n,
                S = Math.max(r, h);
                const l = 2 * Math.PI * p.reverbShelfHz / t.samplesPerSecond;
                Jt.tempFilterStartCoefficients.highShelf1stOrder(l, p.reverbShelfGain),
                this.reverbShelfA1 = Jt.tempFilterStartCoefficients.a[1],
                this.reverbShelfB0 = Jt.tempFilterStartCoefficients.b[0],
                this.reverbShelfB1 = Jt.tempFilterStartCoefficients.b[1]
            }
            if (this.tonesAddedInThisTick)
                this.attentuationProgress = 0,
                this.flushedSamples = 0,
                this.flushingDelayLines = !1;
            else if (this.flushingDelayLines) {
                g = 0,
                w = 0,
                v = 0,
                x = 0;
                let e = 0;
                d && (e += t.chorusDelayBufferSize),
                m && (e += this.echoDelayLineL.length),
                u && (e += p.reverbDelayBufferSize),
                this.flushedSamples += n,
                this.flushedSamples >= e && (this.deactivateAfterThisTick = !0)
            } else {
                0 == this.attentuationProgress || (g = 0),
                w = 0;
                const t = 1 / 256
                  , e = -Math.log2(t);
                let n = 0;
                if (d && (n += p.chorusMaxDelay),
                m) {
                    const t = Math.pow(k, 1 / M);
                    n += -1 / Math.log2(t) * e
                }
                if (u) {
                    const t = 2 * S
                      , i = p.reverbDelayBufferSize / 4 / r
                      , s = Math.pow(t, 1 / i);
                    n += -1 / Math.log2(s) * e
                }
                const s = i / r / n
                  , o = this.attentuationProgress + s;
                o >= 1 && (x = 0),
                this.attentuationProgress = o,
                this.attentuationProgress >= 1 && (this.flushingDelayLines = !0)
            }
            this.eqFilterVolume = g,
            this.eqFilterVolumeDelta = (w - g) / n,
            this.delayInputMult = v,
            this.delayInputMultDelta = (x - v) / n
        }
        updateWaves(t, e) {
            if (this.volumeScale = 1,
            0 == t.type)
                this.wave = this.aliases ? p.rawChipWaves[t.chipWave].samples : p.chipWaves[t.chipWave].samples,
                this.isUsingAdvancedLoopControls = t.isUsingAdvancedLoopControls,
                this.chipWaveLoopStart = t.chipWaveLoopStart,
                this.chipWaveLoopEnd = t.chipWaveLoopEnd,
                this.chipWaveLoopMode = t.chipWaveLoopMode,
                this.chipWavePlayBackwards = t.chipWavePlayBackwards,
                this.chipWaveStartOffset = t.chipWaveStartOffset,
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (6 == t.type)
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (9 == t.type)
                this.wave = this.aliases ? t.customChipWave : t.customChipWaveIntegral,
                this.volumeScale = .05,
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (2 == t.type)
                this.wave = b(t.chipNoise, ht, at),
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (5 == t.type)
                this.wave = this.harmonicsWave.getCustomWave(t.harmonicsWave, t.type),
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (7 == t.type)
                this.wave = this.harmonicsWave.getCustomWave(t.harmonicsWave, t.type),
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (3 == t.type)
                this.wave = this.spectrumWave.getCustomWave(t.spectrumWave, 8),
                this.unisonVoices = t.unisonVoices,
                this.unisonSpread = t.unisonSpread,
                this.unisonOffset = t.unisonOffset,
                this.unisonExpression = t.unisonExpression,
                this.unisonSign = t.unisonSign;
            else if (4 == t.type) {
                for (let e = 0; e < p.drumCount; e++)
                    this.drumsetSpectrumWaves[e].getCustomWave(t.drumsetSpectrumWaves[e], Ut.zt(e));
                this.wave = null
            } else
                this.wave = null
        }
        getDrumsetWave(t) {
            if (4 == this.type)
                return this.drumsetSpectrumWaves[t].wave;
            throw new Error("Unhandled instrument type in getDrumsetWave")
        }
        static drumsetIndexReferenceDelta(t) {
            return Ht.frequencyFromPitch(p.spectrumBasePitch + 6 * t) / 44100
        }
        static zt(t) {
            return 15 + Math.log2(Ut.drumsetIndexReferenceDelta(t))
        }
    }
    class Kt {
        constructor() {
            this.instruments = [],
            this.muted = !1,
            this.singleSeamlessInstrument = null
        }
    }
    class Jt {
        syncSongState() {
            const t = this.song.getChannelCount();
            for (let e = this.channels.length; e < t; e++)
                this.channels[e] = new Kt;
            this.channels.length = t;
            for (let e = 0; e < t; e++) {
                const t = this.song.channels[e]
                  , i = this.channels[e];
                for (let e = i.instruments.length; e < t.instruments.length; e++)
                    i.instruments[e] = new Ut;
                if (i.instruments.length = t.instruments.length,
                i.muted != t.muted && (i.muted = t.muted,
                i.muted))
                    for (const t of i.instruments)
                        t.resetAllEffects()
            }
        }
        initModFilters(t) {
            if (null != t)
                for (let e = 0; e < t.getChannelCount(); e++)
                    for (let i = 0; i < t.channels[e].instruments.length; i++) {
                        const n = t.channels[e].instruments[i];
                        n.tmpEqFilterStart = n.eqFilter,
                        n.tmpEqFilterEnd = null,
                        n.tmpNoteFilterStart = n.noteFilter,
                        n.tmpNoteFilterEnd = null
                    }
        }
        warmUpSynthesizer(t) {
            if (null != t) {
                this.syncSongState();
                const e = this.getSamplesPerTick();
                for (let i = 0; i < t.getChannelCount(); i++)
                    for (let n = 0; n < t.channels[i].instruments.length; n++) {
                        const s = t.channels[i].instruments[n]
                          , o = this.channels[i].instruments[n];
                        Jt.getInstrumentSynthFunction(s),
                        o.vibratoTime = 0,
                        o.nextVibratoTime = 0,
                        o.envelopeTime = 0,
                        o.arpTime = 0,
                        o.updateWaves(s, this.samplesPerSecond),
                        o.allocateNecessaryBuffers(this, s, e)
                    }
            }
            var e = new Float32Array(1);
            this.isPlayingSong = !0,
            this.synthesize(e, e, 1, !0),
            this.isPlayingSong = !1
        }
        computeLatestModValues() {
            if (null != this.song && this.song.modChannelCount > 0) {
                let t = []
                  , e = [];
                this.modValues = [],
                this.nextModValues = [],
                this.modInsValues = [],
                this.nextModInsValues = [],
                this.heldMods = [];
                for (let t = 0; t < this.song.pitchChannelCount + this.song.noiseChannelCount; t++) {
                    e[t] = [],
                    this.modInsValues[t] = [],
                    this.nextModInsValues[t] = [];
                    for (let i = 0; i < this.song.channels[t].instruments.length; i++)
                        this.modInsValues[t][i] = [],
                        this.nextModInsValues[t][i] = [],
                        e[t][i] = []
                }
                let i = this.beat * p.partsPerBeat + this.part;
                for (let n = this.song.pitchChannelCount + this.song.noiseChannelCount; n < this.song.getChannelCount(); n++)
                    if (!this.song.channels[n].muted) {
                        let s;
                        for (let o = this.bar; o >= 0; o--)
                            if (s = this.song.getPattern(n, o),
                            null != s) {
                                let a = s.instruments[0]
                                  , r = this.song.channels[n].instruments[a]
                                  , h = []
                                  , l = []
                                  , c = o == this.bar ? i : this.findPartsInBar(o);
                                for (const t of s.notes)
                                    if (t.start <= c && (null == h[p.modCount - 1 - t.pitches[0]] || t.end > h[p.modCount - 1 - t.pitches[0]]))
                                        if (t.start == c && (h[p.modCount - 1 - t.pitches[0]] = t.start,
                                        l[p.modCount - 1 - t.pitches[0]] = t.pins[0].size),
                                        t.end <= c)
                                            h[p.modCount - 1 - t.pitches[0]] = t.end,
                                            l[p.modCount - 1 - t.pitches[0]] = t.pins[t.pins.length - 1].size;
                                        else {
                                            h[p.modCount - 1 - t.pitches[0]] = c;
                                            for (let e = 0; e < t.pins.length; e++)
                                                if (t.pins[e].time + t.start > c) {
                                                    const i = t.pins[e].time - t.pins[e - 1].time
                                                      , n = c - t.start - t.pins[e - 1].time
                                                      , s = t.pins[e].size - t.pins[e - 1].size;
                                                    l[p.modCount - 1 - t.pitches[0]] = Math.round(t.pins[e - 1].size + s * n / i),
                                                    e = t.pins.length
                                                }
                                        }
                                for (let i = 0; i < p.modCount; i++)
                                    if (null != h[i])
                                        if (p.modulators[r.modulators[i]].forSong)
                                            (null == t[r.modulators[i]] || o * p.partsPerBeat * this.song.beatsPerBar + h[i] > t[r.modulators[i]]) && (this.setModValue(l[i], l[i], r.modChannels[i], r.modInstruments[i], r.modulators[i]),
                                            t[r.modulators[i]] = o * p.partsPerBeat * this.song.beatsPerBar + h[i]);
                                        else {
                                            let t = [];
                                            if (r.modInstruments[i] == this.song.channels[r.modChannels[i]].instruments.length)
                                                for (let e = 0; e < this.song.channels[r.modChannels[i]].instruments.length; e++)
                                                    t.push(e);
                                            else if (r.modInstruments[i] > this.song.channels[r.modChannels[i]].instruments.length) {
                                                const e = this.song.getPattern(r.modChannels[i], o);
                                                null != e && (t = e.instruments)
                                            } else
                                                t.push(r.modInstruments[i]);
                                            for (let n = 0; n < t.length; n++) {
                                                const s = r.modulators[i] == p.modulators.dictionary["eq filter"].index
                                                  , a = r.modulators[i] == p.modulators.dictionary["note filter"].index;
                                                let c = r.modulators[i];
                                                if (s ? c = p.modulators.length + (0 | r.modFilterTypes[i]) : a && (c = p.modulators.length + 1 + 2 * p.filterMaxPoints + (0 | r.modFilterTypes[i])),
                                                null == e[r.modChannels[i]][t[n]][c] || o * p.partsPerBeat * this.song.beatsPerBar + h[i] > e[r.modChannels[i]][t[n]][c]) {
                                                    if (s) {
                                                        let e = this.song.channels[r.modChannels[i]].instruments[t[n]];
                                                        if (0 == r.modFilterTypes[i])
                                                            e.tmpEqFilterStart = e.eqSubFilters[l[i]];
                                                        else {
                                                            for (let t = 0; t < p.filterMorphCount; t++)
                                                                null != e.tmpEqFilterStart && e.tmpEqFilterStart == e.eqSubFilters[t] && (e.tmpEqFilterStart = new Rt,
                                                                e.tmpEqFilterStart.fromJsonObject(e.eqSubFilters[t].toJsonObject()),
                                                                t = p.filterMorphCount);
                                                            null != e.tmpEqFilterStart && Math.floor((r.modFilterTypes[i] - 1) / 2) < e.tmpEqFilterStart.controlPointCount && (r.modFilterTypes[i] % 2 ? e.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[i] - 1) / 2)].freq = l[i] : e.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[i] - 1) / 2)].gain = l[i])
                                                        }
                                                        e.tmpEqFilterEnd = e.tmpEqFilterStart
                                                    } else if (a) {
                                                        let e = this.song.channels[r.modChannels[i]].instruments[t[n]];
                                                        if (0 == r.modFilterTypes[i])
                                                            e.tmpNoteFilterStart = e.noteSubFilters[l[i]];
                                                        else {
                                                            for (let t = 0; t < p.filterMorphCount; t++)
                                                                null != e.tmpNoteFilterStart && e.tmpNoteFilterStart == e.noteSubFilters[t] && (e.tmpNoteFilterStart = new Rt,
                                                                e.tmpNoteFilterStart.fromJsonObject(e.noteSubFilters[t].toJsonObject()),
                                                                t = p.filterMorphCount);
                                                            null != e.tmpNoteFilterStart && Math.floor((r.modFilterTypes[i] - 1) / 2) < e.tmpNoteFilterStart.controlPointCount && (r.modFilterTypes[i] % 2 ? e.tmpNoteFilterStart.controlPoints[Math.floor((r.modFilterTypes[i] - 1) / 2)].freq = l[i] : e.tmpNoteFilterStart.controlPoints[Math.floor((r.modFilterTypes[i] - 1) / 2)].gain = l[i])
                                                        }
                                                        e.tmpNoteFilterEnd = e.tmpNoteFilterStart
                                                    } else
                                                        this.setModValue(l[i], l[i], r.modChannels[i], t[n], c);
                                                    e[r.modChannels[i]][t[n]][c] = o * p.partsPerBeat * this.song.beatsPerBar + h[i]
                                                }
                                            }
                                        }
                            }
                    }
            }
        }
        determineInvalidModulators(t) {
            if (null != this.song)
                for (let e = 0; e < p.modCount; e++) {
                    if (t.invalidModulators[e] = !0,
                    -1 == t.modChannels[e]) {
                        0 != t.modulators[e] && (t.invalidModulators[e] = !1);
                        continue
                    }
                    const i = this.song.channels[t.modChannels[e]];
                    if (null == i)
                        continue;
                    let n = [];
                    n = t.modInstruments[e] >= i.instruments.length ? i.instruments : [i.instruments[t.modInstruments[e]]];
                    for (let i = 0; i < n.length; i++) {
                        const s = n[i];
                        if (null == s)
                            continue;
                        const o = p.modulators[t.modulators[e]].name;
                        12 != p.modulators[t.modulators[e]].associatedEffect && !(s.effects & 1 << p.modulators[t.modulators[e]].associatedEffect) || 1 != s.type && 11 != s.type && ("fm slider 1" == o || "fm slider 2" == o || "fm slider 3" == o || "fm slider 4" == o || "fm feedback" == o) || 11 != s.type && ("fm slider 5" == o || "fm slider 6" == o) || 6 != s.type && 8 != s.type && ("pulse width" == o || "decimal offset" == o) || 8 != s.type && ("dynamism" == o || "spread" == o || "saw shape" == o) || !s.getChord().arpeggiates && ("arp speed" == o || "reset arp" == o) || s.eqFilterType && "eq filter" == o || !s.eqFilterType && ("eq filt cut" == o || "eq filt peak" == o) || "eq filter" == o && Math.floor((t.modFilterTypes[e] + 1) / 2) > s.getLargestControlPointCount(!1) || s.noteFilterType && "note filter" == o || !s.noteFilterType && ("note filt cut" == o || "note filt peak" == o) || "note filter" == o && Math.floor((t.modFilterTypes[e] + 1) / 2) > s.getLargestControlPointCount(!0) || (t.invalidModulators[e] = !1,
                        i = n.length)
                    }
                }
        }
        static operatorAmplitudeCurve(t) {
            return (Math.pow(16, t / 15) - 1) / 15
        }
        get playing() {
            return this.isPlayingSong
        }
        get recording() {
            return this.isRecording
        }
        get playhead() {
            return this.playheadInternal
        }
        set playhead(t) {
            if (null != this.song) {
                this.playheadInternal = Math.max(0, Math.min(this.song.barCount, t));
                let e = this.playheadInternal;
                this.bar = Math.floor(e),
                e = this.song.beatsPerBar * (e - this.bar),
                this.beat = Math.floor(e),
                e = p.partsPerBeat * (e - this.beat),
                this.part = Math.floor(e),
                e = p.ticksPerPart * (e - this.part),
                this.tick = Math.floor(e),
                this.tickSampleCountdown = 0,
                this.isAtStartOfTick = !0,
                this.prevBar = null
            }
        }
        getSamplesPerBar() {
            if (null == this.song)
                throw new Error;
            return this.getSamplesPerTick() * p.ticksPerPart * p.partsPerBeat * this.song.beatsPerBar
        }
        getTicksIntoBar() {
            return (this.beat * p.partsPerBeat + this.part) * p.ticksPerPart + this.tick
        }
        getCurrentPart() {
            return this.beat * p.partsPerBeat + this.part
        }
        findPartsInBar(t) {
            if (null == this.song)
                return 0;
            let e = p.partsPerBeat * this.song.beatsPerBar;
            for (let i = this.song.pitchChannelCount + this.song.noiseChannelCount; i < this.song.getChannelCount(); i++) {
                let n = this.song.getPattern(i, t);
                if (null != n) {
                    let t = this.song.channels[i].instruments[n.instruments[0]];
                    for (let i = 0; i < p.modCount; i++)
                        if (t.modulators[i] == p.modulators.dictionary["next bar"].index)
                            for (const t of n.notes)
                                t.pitches[0] == p.modCount - 1 - i && e > t.start && (e = t.start)
                }
            }
            return e
        }
        getTotalSamples(t, e, i) {
            if (null == this.song)
                return -1;
            let n = t ? 0 : this.song.loopStart
              , s = e ? this.song.barCount : this.song.loopStart + this.song.loopLength
              , o = !1
              , a = !1
              , r = this.song.tempo;
            for (let t = this.song.getChannelCount() - 1; t >= this.song.pitchChannelCount + this.song.noiseChannelCount; t--)
                for (let e = n; e < s; e++) {
                    let i = this.song.getPattern(t, e);
                    if (null != i) {
                        let e = this.song.channels[t].instruments[i.instruments[0]];
                        for (let t = 0; t < p.modCount; t++)
                            e.modulators[t] == p.modulators.dictionary.tempo.index && (o = !0),
                            e.modulators[t] == p.modulators.dictionary["next bar"].index && (a = !0)
                    }
                }
            if (n > 0) {
                let t = null
                  , e = 0;
                for (let i = n - 1; i >= 0; i--) {
                    for (let n = this.song.getChannelCount() - 1; n >= this.song.pitchChannelCount + this.song.noiseChannelCount; n--) {
                        let s = this.song.getPattern(n, i);
                        if (null != s) {
                            let o = s.instruments[0]
                              , a = this.song.channels[n].instruments[o]
                              , r = this.findPartsInBar(i);
                            for (const i of s.notes)
                                if (a.modulators[p.modCount - 1 - i.pitches[0]] == p.modulators.dictionary.tempo.index && i.start < r && (null == t || i.end > t))
                                    if (i.end <= r)
                                        t = i.end,
                                        e = i.pins[i.pins.length - 1].size;
                                    else {
                                        t = r;
                                        for (let t = 0; t < i.pins.length; t++)
                                            if (i.pins[t].time + i.start > r) {
                                                const n = i.pins[t].time - i.pins[t - 1].time
                                                  , s = r - i.start - i.pins[t - 1].time
                                                  , o = i.pins[t].size - i.pins[t - 1].size;
                                                e = Math.round(i.pins[t - 1].size + o * s / n),
                                                t = i.pins.length
                                            }
                                    }
                        }
                    }
                    null != t && (r = e + p.modulators.dictionary.tempo.convertRealFactor,
                    i = -1)
                }
            }
            if (o || a) {
                let t = n
                  , e = !1
                  , h = 0;
                for (; !e; ) {
                    let n = p.partsPerBeat * this.song.beatsPerBar
                      , l = 0;
                    if (a && (n = this.findPartsInBar(t)),
                    o) {
                        let e = !1;
                        for (let i = this.song.getChannelCount() - 1; i >= this.song.pitchChannelCount + this.song.noiseChannelCount; i--)
                            if (0 == e) {
                                let s = this.song.getPattern(i, t);
                                if (null != s) {
                                    let t = this.song.channels[i].instruments[s.instruments[0]];
                                    for (let i = 0; i < p.modCount; i++)
                                        if (0 == e && t.modulators[i] == p.modulators.dictionary.tempo.index && s.notes.find((t => t.pitches[0] == p.modCount - 1 - i))) {
                                            e = !0,
                                            s.notes.sort((function(t, e) {
                                                return t.start == e.start ? t.pitches[0] - e.pitches[0] : t.start - e.start
                                            }
                                            ));
                                            for (const t of s.notes)
                                                if (t.pitches[0] == p.modCount - 1 - i && (h += Math.min(n - l, t.start - l) * p.ticksPerPart * this.getSamplesPerTickSpecificBPM(r),
                                                t.start < n))
                                                    for (let e = 1; e < t.pins.length; e++) {
                                                        if (t.pins[e - 1].time + t.start <= n) {
                                                            const i = p.ticksPerPart * Math.min(n - (t.start + t.pins[e - 1].time), t.pins[e].time - t.pins[e - 1].time)
                                                              , s = t.pins[e - 1].size + p.modulators.dictionary.tempo.convertRealFactor;
                                                            let o = t.pins[e].size + p.modulators.dictionary.tempo.convertRealFactor;
                                                            t.pins[e].time + t.start > n && (o = t.pins[e - 1].size + (t.pins[e].size - t.pins[e - 1].size) * (n - (t.start + t.pins[e - 1].time)) / (t.pins[e].time - t.pins[e - 1].time) + p.modulators.dictionary.tempo.convertRealFactor);
                                                            let a = p.partsPerBeat * p.ticksPerPart / 60;
                                                            h += o != s ? -this.samplesPerSecond * i * (Math.log(a * o * i) - Math.log(a * s * i)) / (a * (s - o)) : i * this.getSamplesPerTickSpecificBPM(o),
                                                            r = o
                                                        }
                                                        l = Math.min(t.start + t.pins[e].time, n)
                                                    }
                                        }
                                }
                            }
                    }
                    h += (n - l) * p.ticksPerPart * this.getSamplesPerTickSpecificBPM(r),
                    t++,
                    0 != i && t == this.song.loopStart + this.song.loopLength && (t = this.song.loopStart,
                    i > 0 && i--),
                    t >= s && (e = !0)
                }
                return Math.ceil(h)
            }
            return this.getSamplesPerBar() * this.getTotalBars(t, e, i)
        }
        getTotalBars(t, e, i=this.loopRepeatCount) {
            if (null == this.song)
                throw new Error;
            let n = this.song.loopLength * (i + 1);
            return t && (n += this.song.loopStart),
            e && (n += this.song.barCount - (this.song.loopStart + this.song.loopLength)),
            n
        }
        constructor(t=null) {
            this.samplesPerSecond = 44100,
            this.song = null,
            this.preferLowerLatency = !1,
            this.anticipatePoorPerformance = !1,
            this.liveInputDuration = 0,
            this.liveBassInputDuration = 0,
            this.liveInputStarted = !1,
            this.liveBassInputStarted = !1,
            this.liveInputPitches = [],
            this.liveBassInputPitches = [],
            this.liveInputChannel = 0,
            this.liveBassInputChannel = 0,
            this.liveInputInstruments = [],
            this.liveBassInputInstruments = [],
            this.loopRepeatCount = -1,
            this.volume = 1,
            this.oscRefreshEventTimer = 0,
            this.oscEnabled = !0,
            this.enableMetronome = !1,
            this.countInMetronome = !1,
            this.renderingSong = !1,
            this.heldMods = [],
            this.wantToSkip = !1,
            this.playheadInternal = 0,
            this.bar = 0,
            this.prevBar = null,
            this.nextBar = null,
            this.beat = 0,
            this.part = 0,
            this.tick = 0,
            this.isAtStartOfTick = !0,
            this.isAtEndOfTick = !0,
            this.tickSampleCountdown = 0,
            this.modValues = [],
            this.modInsValues = [],
            this.nextModValues = [],
            this.nextModInsValues = [],
            this.isPlayingSong = !1,
            this.isRecording = !1,
            this.liveInputEndTime = 0,
            this.browserAutomaticallyClearsAudioBuffer = !0,
            this.tempDrumSetControlPoint = new Ot,
            this.tempFrequencyResponse = new pt,
            this.loopBarStart = -1,
            this.loopBarEnd = -1,
            this.channels = [],
            this.tonePool = new lt,
            this.tempMatchedPitchTones = Array(p.maxChordSize).fill(null),
            this.startedMetronome = !1,
            this.metronomeSamplesRemaining = -1,
            this.metronomeAmplitude = 0,
            this.metronomePrevAmplitude = 0,
            this.metronomeFilter = 0,
            this.limit = 0,
            this.tempMonoInstrumentSampleBuffer = null,
            this.audioCtx = null,
            this.scriptNode = null,
            this.audioProcessCallback = t => {
                const e = t.outputBuffer
                  , i = e.getChannelData(0)
                  , n = e.getChannelData(1);
                if (!this.browserAutomaticallyClearsAudioBuffer || 0 == i[0] && 0 == n[0] && 0 == i[e.length - 1] && 0 == n[e.length - 1] || (this.browserAutomaticallyClearsAudioBuffer = !1),
                !this.browserAutomaticallyClearsAudioBuffer) {
                    const t = e.length;
                    for (let e = 0; e < t; e++)
                        i[e] = 0,
                        n[e] = 0
                }
                !this.isPlayingSong && performance.now() >= this.liveInputEndTime ? this.deactivateAudio() : (this.synthesize(i, n, e.length, this.isPlayingSong),
                this.oscEnabled && (this.oscRefreshEventTimer <= 0 ? (ct.raise("oscilloscopeUpdate", i, n),
                this.oscRefreshEventTimer = 2) : this.oscRefreshEventTimer--))
            }
            ,
            this.computeDelayBufferSizes(),
            null != t && this.setSong(t)
        }
        setSong(t) {
            "string" == typeof t ? this.song = new Vt(t) : t instanceof Vt && (this.song = t),
            this.prevBar = null
        }
        computeDelayBufferSizes() {
            this.panningDelayBufferSize = Jt.fittingPowerOfTwo(this.samplesPerSecond * p.panDelaySecondsMax),
            this.panningDelayBufferMask = this.panningDelayBufferSize - 1,
            this.chorusDelayBufferSize = Jt.fittingPowerOfTwo(this.samplesPerSecond * p.chorusMaxDelay),
            this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1
        }
        activateAudio() {
            const t = this.anticipatePoorPerformance ? this.preferLowerLatency ? 2048 : 4096 : this.preferLowerLatency ? 512 : 2048;
            if (null == this.audioCtx || null == this.scriptNode || this.scriptNode.bufferSize != t) {
                null != this.scriptNode && this.deactivateAudio();
                const e = this.anticipatePoorPerformance ? this.preferLowerLatency ? "balanced" : "playback" : this.preferLowerLatency ? "interactive" : "balanced";
                this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({
                    latencyHint: e
                }),
                this.samplesPerSecond = this.audioCtx.sampleRate,
                this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(t, 0, 2) : this.audioCtx.createJavaScriptNode(t, 0, 2),
                this.scriptNode.onaudioprocess = this.audioProcessCallback,
                this.scriptNode.channelCountMode = "explicit",
                this.scriptNode.channelInterpretation = "speakers",
                this.scriptNode.connect(this.audioCtx.destination),
                this.computeDelayBufferSizes()
            }
            this.audioCtx.resume()
        }
        deactivateAudio() {
            null != this.audioCtx && null != this.scriptNode && (this.scriptNode.disconnect(this.audioCtx.destination),
            this.scriptNode = null,
            this.audioCtx.close && this.audioCtx.close(),
            this.audioCtx = null)
        }
        maintainLiveInput() {
            this.activateAudio(),
            this.liveInputEndTime = performance.now() + 1e4
        }
        play() {
            this.isPlayingSong || (this.initModFilters(this.song),
            this.computeLatestModValues(),
            this.activateAudio(),
            this.warmUpSynthesizer(this.song),
            this.isPlayingSong = !0)
        }
        pause() {
            if (this.isPlayingSong && (this.isPlayingSong = !1,
            this.isRecording = !1,
            this.modValues = [],
            this.nextModValues = [],
            this.heldMods = [],
            null != this.song)) {
                this.song.inVolumeCap = 0,
                this.song.outVolumeCap = 0;
                for (let t = 0; t < this.song.pitchChannelCount + this.song.noiseChannelCount; t++)
                    this.modInsValues[t] = [],
                    this.nextModInsValues[t] = []
            }
        }
        startRecording() {
            this.preferLowerLatency = !0,
            this.isRecording = !0,
            this.play()
        }
        resetEffects() {
            if (this.limit = 0,
            this.freeAllTones(),
            null != this.song)
                for (const t of this.channels)
                    for (const e of t.instruments)
                        e.resetAllEffects()
        }
        setModValue(t, e, i, n, s) {
            let o = t + p.modulators[s].convertRealFactor
              , a = e + p.modulators[s].convertRealFactor;
            return p.modulators[s].forSong ? null != this.modValues[s] && this.modValues[s] == o && this.nextModValues[s] == a || (this.modValues[s] = o,
            this.nextModValues[s] = a) : null != this.modInsValues[i][n][s] && this.modInsValues[i][n][s] == o && this.nextModInsValues[i][n][s] == a || (this.modInsValues[i][n][s] = o,
            this.nextModInsValues[i][n][s] = a),
            o
        }
        getModValue(t, e, i, n) {
            if (p.modulators[t].forSong) {
                if (null != this.modValues[t] && null != this.nextModValues[t])
                    return n ? this.nextModValues[t] : this.modValues[t]
            } else if (null != e && null != i && null != this.modInsValues[e][i][t] && null != this.nextModInsValues[e][i][t])
                return n ? this.nextModInsValues[e][i][t] : this.modInsValues[e][i][t];
            return -1
        }
        isAnyModActive(t, e) {
            for (let i = 0; i < p.modulators.length; i++)
                if (null != this.modValues && null != this.modValues[i] || null != this.modInsValues && null != this.modInsValues[t] && null != this.modInsValues[t][e] && null != this.modInsValues[t][e][i])
                    return !0;
            return !1
        }
        unsetMod(t, e, i) {
            if (this.isModActive(t) || null != e && null != i && this.isModActive(t, e, i)) {
                this.modValues[t] = null,
                this.nextModValues[t] = null;
                for (let n = 0; n < this.heldMods.length; n++)
                    null != e && null != i ? this.heldMods[n].channelIndex == e && this.heldMods[n].instrumentIndex == i && this.heldMods[n].setting == t && this.heldMods.splice(n, 1) : this.heldMods[n].setting == t && this.heldMods.splice(n, 1);
                null != e && null != i && (this.modInsValues[e][i][t] = null,
                this.nextModInsValues[e][i][t] = null)
            }
        }
        isFilterModActive(t, e, i) {
            const n = this.song.channels[e].instruments[i];
            if (t) {
                if (n.noteFilterType)
                    return !1;
                if (null != n.tmpNoteFilterEnd)
                    return !0
            } else {
                if (n.eqFilterType)
                    return !1;
                if (null != n.tmpEqFilterEnd)
                    return !0
            }
            return !1
        }
        isModActive(t, e, i) {
            return p.modulators[t].forSong ? null != this.modValues && null != this.modValues[t] : null != e && null != i && null != this.modInsValues && null != this.modInsValues[e] && null != this.modInsValues[e][i] && null != this.modInsValues[e][i][t]
        }
        forceHoldMods(t, e, i, n) {
            let s = !1;
            for (let o = 0; o < this.heldMods.length; o++)
                this.heldMods[o].channelIndex == e && this.heldMods[o].instrumentIndex == i && this.heldMods[o].setting == n && (this.heldMods[o].volume = t,
                this.heldMods[o].holdFor = 24,
                s = !0);
            s || this.heldMods.push({
                volume: t,
                channelIndex: e,
                instrumentIndex: i,
                setting: n,
                holdFor: 24
            })
        }
        snapToStart() {
            this.bar = 0,
            this.resetEffects(),
            this.snapToBar()
        }
        goToBar(t) {
            this.bar = t,
            this.resetEffects(),
            this.playheadInternal = this.bar
        }
        snapToBar() {
            this.playheadInternal = this.bar,
            this.beat = 0,
            this.part = 0,
            this.tick = 0,
            this.tickSampleCountdown = 0
        }
        jumpIntoLoop() {
            if (this.song && (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength)) {
                const t = this.bar;
                this.bar = this.song.loopStart,
                this.playheadInternal += this.bar - t,
                this.playing && this.computeLatestModValues()
            }
        }
        goToNextBar() {
            if (!this.song)
                return;
            this.prevBar = this.bar;
            const t = this.bar;
            this.bar++,
            this.bar >= this.song.barCount && (this.bar = 0),
            this.playheadInternal += this.bar - t,
            this.playing && this.computeLatestModValues()
        }
        goToPrevBar() {
            if (!this.song)
                return;
            this.prevBar = null;
            const t = this.bar;
            this.bar--,
            (this.bar < 0 || this.bar >= this.song.barCount) && (this.bar = this.song.barCount - 1),
            this.playheadInternal += this.bar - t,
            this.playing && this.computeLatestModValues()
        }
        getNextBar() {
            let t = this.bar + 1;
            return this.isRecording ? t >= this.song.barCount && (t = this.song.barCount - 1) : this.bar != this.loopBarEnd || this.renderingSong ? 0 != this.loopRepeatCount && t == Math.max(this.loopBarEnd + 1, this.song.loopStart + this.song.loopLength) && (t = this.song.loopStart) : t = this.loopBarStart,
            t
        }
        skipBar() {
            if (!this.song)
                return;
            const t = this.getSamplesPerTick();
            this.prevBar = this.bar,
            this.loopBarEnd != this.bar ? this.bar++ : this.bar = this.loopBarStart,
            this.beat = 0,
            this.part = 0,
            this.tick = 0,
            this.tickSampleCountdown = t,
            this.isAtStartOfTick = !0,
            0 != this.loopRepeatCount && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd) && (this.bar = this.song.loopStart,
            -1 != this.loopBarStart && (this.bar = this.loopBarStart),
            this.loopRepeatCount > 0 && this.loopRepeatCount--)
        }
        synthesize(t, e, i, n=!0) {
            if (null == this.song) {
                for (let n = 0; n < i; n++)
                    t[n] = 0,
                    e[n] = 0;
                return void this.deactivateAudio()
            }
            const s = this.song;
            this.song.inVolumeCap = 0,
            this.song.outVolumeCap = 0;
            let o = this.getSamplesPerTick()
              , a = !1;
            (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > o) && (this.tickSampleCountdown = o,
            this.isAtStartOfTick = !0),
            n && (this.beat >= s.beatsPerBar && (this.beat = 0,
            this.part = 0,
            this.tick = 0,
            this.tickSampleCountdown = o,
            this.isAtStartOfTick = !0,
            this.prevBar = this.bar,
            this.bar = this.getNextBar(),
            this.bar <= this.prevBar && this.loopRepeatCount > 0 && this.loopRepeatCount--),
            this.bar >= s.barCount && (this.bar = 0,
            -1 != this.loopRepeatCount && (a = !0,
            this.pause()))),
            this.syncSongState(),
            (null == this.tempMonoInstrumentSampleBuffer || this.tempMonoInstrumentSampleBuffer.length < i) && (this.tempMonoInstrumentSampleBuffer = new Float32Array(i));
            const r = +this.volume
              , h = 1 - Math.pow(.5, this.song.limitDecay / this.samplesPerSecond)
              , l = 1 - Math.pow(.5, this.song.limitRise / this.samplesPerSecond);
            let c = +this.limit
              , d = []
              , m = -1
              , u = 0;
            for (; u < i && !a; ) {
                this.nextBar = this.getNextBar(),
                this.nextBar >= s.barCount && (this.nextBar = null);
                const f = i - u
                  , y = Math.ceil(this.tickSampleCountdown)
                  , b = Math.min(y, f)
                  , g = u + b;
                if (this.isPlayingSong || this.renderingSong) {
                    for (let t = s.pitchChannelCount + s.noiseChannelCount; t < s.getChannelCount(); t++) {
                        const e = s.channels[t]
                          , i = this.channels[t];
                        this.determineCurrentActiveTones(s, t, o, n);
                        for (let n = 0; n < e.instruments.length; n++) {
                            const e = i.instruments[n];
                            for (let i = 0; i < e.activeModTones.count(); i++) {
                                const n = e.activeModTones.get(i)
                                  , a = s.channels[t].instruments[n.instrumentIndex];
                                let r = p.modCount - 1 - n.pitches[0];
                                (a.modulators[r] == p.modulators.dictionary["note filter"].index || a.modulators[r] == p.modulators.dictionary["eq filter"].index) && null != a.modFilterTypes[r] && a.modFilterTypes[r] > 0 || this.playModTone(s, t, o, u, b, n, !1, !1)
                            }
                        }
                    }
                    for (let t = s.pitchChannelCount + s.noiseChannelCount; t < s.getChannelCount(); t++) {
                        const e = s.channels[t]
                          , i = this.channels[t];
                        for (let n = 0; n < e.instruments.length; n++) {
                            const e = i.instruments[n];
                            for (let i = 0; i < e.activeModTones.count(); i++) {
                                const n = e.activeModTones.get(i)
                                  , a = s.channels[t].instruments[n.instrumentIndex];
                                let r = p.modCount - 1 - n.pitches[0];
                                (a.modulators[r] == p.modulators.dictionary["note filter"].index || a.modulators[r] == p.modulators.dictionary["eq filter"].index) && null != a.modFilterTypes[r] && a.modFilterTypes[r] > 0 && this.playModTone(s, t, o, u, b, n, !1, !1)
                            }
                        }
                    }
                }
                if (this.wantToSkip) {
                    let t = d.includes(this.bar);
                    if (t && u == m)
                        return void this.pause();
                    -1 == m && (m = u),
                    t || d.push(this.bar),
                    this.wantToSkip = !1,
                    this.skipBar()
                } else {
                    for (let i = 0; i < s.pitchChannelCount + s.noiseChannelCount; i++) {
                        const a = s.channels[i]
                          , r = this.channels[i];
                        this.isAtStartOfTick && (this.determineCurrentActiveTones(s, i, o, n && !this.countInMetronome),
                        this.determineLiveInputTones(s, i, o));
                        for (let n = 0; n < a.instruments.length; n++) {
                            const h = a.instruments[n]
                              , l = r.instruments[n];
                            if (this.isAtStartOfTick) {
                                let t = l.activeTones.count() + l.liveInputTones.count();
                                for (let e = 0; e < l.releasedTones.count(); e++) {
                                    const n = l.releasedTones.get(e);
                                    if (n.ticksSinceReleased >= Math.abs(h.getFadeOutTicks())) {
                                        this.freeReleasedTone(l, e),
                                        e--;
                                        continue
                                    }
                                    const a = t >= p.maximumTonesPerChannel;
                                    this.computeTone(s, i, o, n, !0, a),
                                    t++
                                }
                                l.awake && (l.computed || l.compute(this, h, o, Math.ceil(o), null, i, n),
                                l.computed = !1)
                            }
                            for (let t = 0; t < l.activeTones.count(); t++) {
                                const e = l.activeTones.get(t);
                                this.playTone(i, u, b, e)
                            }
                            for (let t = 0; t < l.liveInputTones.count(); t++) {
                                const e = l.liveInputTones.get(t);
                                this.playTone(i, u, b, e)
                            }
                            for (let t = 0; t < l.releasedTones.count(); t++) {
                                const e = l.releasedTones.get(t);
                                this.playTone(i, u, b, e)
                            }
                            l.awake && Jt.effectsSynth(this, t, e, u, b, l);
                            const c = this.tickSampleCountdown
                              , d = 1 - c / o
                              , m = 1 - (c - b) / o
                              , f = (this.beat * p.partsPerBeat + this.part) * p.ticksPerPart + this.tick
                              , y = f / p.ticksPerPart
                              , g = (f + 1) / p.ticksPerPart
                              , w = y + (g - y) * d
                              , v = y + (g - y) * m;
                            let x = h.vibratoSpeed;
                            l.vibratoTime = l.nextVibratoTime,
                            this.isModActive(p.modulators.dictionary["vibrato speed"].index, i, n) && (x = this.getModValue(p.modulators.dictionary["vibrato speed"].index, i, n)),
                            0 == x ? (l.vibratoTime = 0,
                            l.nextVibratoTime = 0) : l.nextVibratoTime += .1 * x * (v - w)
                        }
                    }
                    if (this.enableMetronome || this.countInMetronome)
                        if (0 == this.part) {
                            if (!this.startedMetronome) {
                                const t = s.beatsPerBar > 4 && s.beatsPerBar % 2 == 0 && this.beat == s.beatsPerBar / 2
                                  , e = 0 == this.beat ? 8 : t ? 6 : 4
                                  , i = 0 == this.beat ? 1600 : t ? 1200 : 800
                                  , n = 0 == this.beat ? .06 : t ? .05 : .04
                                  , o = this.samplesPerSecond / i
                                  , a = 2 * Math.PI / o;
                                this.metronomeSamplesRemaining = Math.floor(o * e),
                                this.metronomeFilter = 2 * Math.cos(a),
                                this.metronomeAmplitude = n * Math.sin(a),
                                this.metronomePrevAmplitude = 0,
                                this.startedMetronome = !0
                            }
                            if (this.metronomeSamplesRemaining > 0) {
                                const i = Math.min(g, u + this.metronomeSamplesRemaining);
                                this.metronomeSamplesRemaining -= i - u;
                                for (let n = u; n < i; n++) {
                                    t[n] += this.metronomeAmplitude,
                                    e[n] += this.metronomeAmplitude;
                                    const i = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;
                                    this.metronomePrevAmplitude = this.metronomeAmplitude,
                                    this.metronomeAmplitude = i
                                }
                            }
                        } else
                            this.startedMetronome = !1;
                    for (let i = u; i < g; i++) {
                        const n = t[i] * s.masterGain * s.masterGain
                          , o = e[i] * s.masterGain * s.masterGain
                          , a = n < 0 ? -n : n
                          , d = o < 0 ? -o : o
                          , p = a > d ? a : d;
                        this.song.inVolumeCap = this.song.inVolumeCap > p ? this.song.inVolumeCap : p;
                        const m = +(p > s.compressionThreshold) + +(p > s.limitThreshold)
                          , u = +(0 == m) * ((.8 * (p + 1 - s.compressionThreshold) + .25) * s.compressionRatio + 1.05 * (1 - s.compressionRatio)) + 1.05 * +(1 == m) + +(2 == m) * (1.05 * ((p + 1 - s.limitThreshold) * s.limitRatio + (1 - s.limitThreshold)));
                        c += (u - c) * (c < u ? l : h);
                        const f = r / (c >= 1 ? 1.05 * c : .8 * c + .25);
                        t[i] = n * f,
                        e[i] = o * f,
                        this.song.outVolumeCap = this.song.outVolumeCap > p * f ? this.song.outVolumeCap : p * f
                    }
                    if (u += b,
                    this.isAtStartOfTick = !1,
                    this.tickSampleCountdown -= b,
                    this.tickSampleCountdown <= 0) {
                        this.isAtStartOfTick = !0;
                        for (const t of this.channels)
                            for (const e of t.instruments) {
                                for (let t = 0; t < e.releasedTones.count(); t++) {
                                    const i = e.releasedTones.get(t);
                                    i.isOnLastTick ? (this.freeReleasedTone(e, t),
                                    t--) : i.ticksSinceReleased++
                                }
                                e.deactivateAfterThisTick && e.deactivate(),
                                e.tonesAddedInThisTick = !1
                            }
                        for (let t = 0; t < this.song.pitchChannelCount + this.song.noiseChannelCount; t++)
                            for (let e = 0; e < this.song.channels[t].instruments.length; e++) {
                                let i = this.song.channels[t].instruments[e]
                                  , n = this.channels[t].instruments[e]
                                  , s = i.arpeggioSpeed;
                                this.isModActive(p.modulators.dictionary["arp speed"].index, t, e) ? (s = Math.max(0, Math.min(p.arpSpeedScale.length - 1, this.getModValue(p.modulators.dictionary["arp speed"].index, t, e, !1))),
                                Number.isInteger(s) ? n.arpTime += p.arpSpeedScale[s] : n.arpTime += (1 - s % 1) * p.arpSpeedScale[Math.floor(s)] + s % 1 * p.arpSpeedScale[Math.ceil(s)]) : n.arpTime += p.arpSpeedScale[s];
                                let o = i.envelopeSpeed;
                                this.isModActive(p.modulators.dictionary["envelope speed"].index, t, e) ? (o = Math.max(0, Math.min(p.arpSpeedScale.length - 1, this.getModValue(p.modulators.dictionary["envelope speed"].index, t, e, !1))),
                                Number.isInteger(o) ? n.envelopeTime += p.arpSpeedScale[o] : n.envelopeTime += (1 - o % 1) * p.arpSpeedScale[Math.floor(o)] + o % 1 * p.arpSpeedScale[Math.ceil(o)]) : n.envelopeTime += p.arpSpeedScale[o]
                            }
                        for (let t = 0; t < this.song.pitchChannelCount + this.song.noiseChannelCount; t++)
                            for (let e = 0; e < this.song.channels[t].instruments.length; e++) {
                                let i = this.song.channels[t].instruments[e];
                                null != i.tmpEqFilterEnd ? i.tmpEqFilterStart = i.tmpEqFilterEnd : i.tmpEqFilterStart = i.eqFilter,
                                null != i.tmpNoteFilterEnd ? i.tmpNoteFilterStart = i.tmpNoteFilterEnd : i.tmpNoteFilterStart = i.noteFilter
                            }
                        if (this.tick++,
                        this.tickSampleCountdown += o,
                        this.tick == p.ticksPerPart) {
                            this.tick = 0,
                            this.part++,
                            this.liveInputDuration--,
                            this.liveBassInputDuration--;
                            for (let t = 0; t < this.heldMods.length; t++)
                                this.heldMods[t].holdFor--,
                                this.heldMods[t].holdFor <= 0 && this.heldMods.splice(t, 1);
                            this.part == p.partsPerBeat && (this.part = 0,
                            n && (this.beat++,
                            this.beat == s.beatsPerBar && (this.beat = 0,
                            this.countInMetronome ? this.countInMetronome = !1 : (this.prevBar = this.bar,
                            this.bar = this.getNextBar(),
                            this.bar <= this.prevBar && this.loopRepeatCount > 0 && this.loopRepeatCount--,
                            this.bar >= s.barCount && (this.bar = 0,
                            -1 != this.loopRepeatCount && (a = !0,
                            this.resetEffects(),
                            this.pause()))))))
                        }
                    }
                    for (let t = 0; t < p.modulators.length; t++)
                        null != this.nextModValues && null != this.nextModValues[t] && (this.modValues[t] = this.nextModValues[t]);
                    this.isModActive(p.modulators.dictionary.tempo.index) && (o = this.getSamplesPerTick(),
                    this.tickSampleCountdown = Math.min(this.tickSampleCountdown, o));
                    for (let t = 0; t < this.song.pitchChannelCount + this.song.noiseChannelCount; t++)
                        for (let e = 0; e < this.channels[t].instruments.length; e++) {
                            const i = this.channels[t].instruments[e]
                              , n = this.song.channels[t].instruments[e];
                            i.nextVibratoTime = i.nextVibratoTime % (p.vibratoTypes[n.vibratoType].period / (p.ticksPerPart * o / this.samplesPerSecond)),
                            i.arpTime = i.arpTime % (2520 * p.ticksPerArpeggio),
                            i.envelopeTime = i.envelopeTime % (p.partsPerBeat * p.ticksPerPart * this.song.beatsPerBar)
                        }
                    for (let t = 0; t < p.modulators.length; t++)
                        for (let e = 0; e < this.song.pitchChannelCount + this.song.noiseChannelCount; e++)
                            for (let i = 0; i < this.song.getMaxInstrumentsPerChannel(); i++)
                                null != this.nextModInsValues && null != this.nextModInsValues[e] && null != this.nextModInsValues[e][i] && null != this.nextModInsValues[e][i][t] && (this.modInsValues[e][i][t] = this.nextModInsValues[e][i][t])
                }
            }
            (!Number.isFinite(c) || Math.abs(c) < ft) && (c = 0),
            this.limit = c,
            n && !this.countInMetronome && (this.playheadInternal = (((this.tick + 1 - this.tickSampleCountdown / o) / 2 + this.part) / p.partsPerBeat + this.beat) / s.beatsPerBar + this.bar)
        }
        freeTone(t) {
            this.tonePool.pushBack(t)
        }
        newTone() {
            if (this.tonePool.count() > 0) {
                const t = this.tonePool.popBack();
                return t.freshlyAllocated = !0,
                t
            }
            return new jt
        }
        releaseTone(t, e) {
            t.releasedTones.pushFront(e),
            e.atNoteStart = !1,
            e.passedEndOfNote = !0
        }
        freeReleasedTone(t, e) {
            this.freeTone(t.releasedTones.get(e)),
            t.releasedTones.remove(e)
        }
        freeAllTones() {
            for (const t of this.channels)
                for (const e of t.instruments) {
                    for (; e.activeTones.count() > 0; )
                        this.freeTone(e.activeTones.popBack());
                    for (; e.activeModTones.count() > 0; )
                        this.freeTone(e.activeModTones.popBack());
                    for (; e.releasedTones.count() > 0; )
                        this.freeTone(e.releasedTones.popBack());
                    for (; e.liveInputTones.count() > 0; )
                        this.freeTone(e.liveInputTones.popBack())
                }
        }
        determineLiveInputTones(t, e, i) {
            const n = t.channels[e]
              , s = this.channels[e]
              , o = this.liveInputPitches
              , a = this.liveBassInputPitches;
            for (let r = 0; r < n.instruments.length; r++) {
                const h = s.instruments[r]
                  , l = h.liveInputTones;
                let c = 0;
                if (this.liveInputDuration > 0 && e == this.liveInputChannel && o.length > 0 && -1 != this.liveInputInstruments.indexOf(r)) {
                    const s = n.instruments[r];
                    if (s.getChord().singleTone) {
                        let n;
                        l.count() <= c ? (n = this.newTone(),
                        l.pushBack(n)) : !s.getTransition().isSeamless && this.liveInputStarted ? (this.releaseTone(h, l.get(c)),
                        n = this.newTone(),
                        l.set(c, n)) : n = l.get(c),
                        c++;
                        for (let t = 0; t < o.length; t++)
                            n.pitches[t] = o[t];
                        n.pitchCount = o.length,
                        n.chordSize = 1,
                        n.instrumentIndex = r,
                        n.note = n.prevNote = n.nextNote = null,
                        n.atNoteStart = this.liveInputStarted,
                        n.forceContinueAtStart = !1,
                        n.forceContinueAtEnd = !1,
                        this.computeTone(t, e, i, n, !1, !1)
                    } else {
                        this.moveTonesIntoOrderedTempMatchedList(l, o);
                        for (let n = 0; n < o.length; n++) {
                            let s;
                            null != this.tempMatchedPitchTones[c] ? (s = this.tempMatchedPitchTones[c],
                            this.tempMatchedPitchTones[c] = null,
                            1 == s.pitchCount && s.pitches[0] == o[n] || (this.releaseTone(h, s),
                            s = this.newTone()),
                            l.pushBack(s)) : (s = this.newTone(),
                            l.pushBack(s)),
                            c++,
                            s.pitches[0] = o[n],
                            s.pitchCount = 1,
                            s.chordSize = o.length,
                            s.instrumentIndex = r,
                            s.note = s.prevNote = s.nextNote = null,
                            s.atNoteStart = this.liveInputStarted,
                            s.forceContinueAtStart = !1,
                            s.forceContinueAtEnd = !1,
                            this.computeTone(t, e, i, s, !1, !1)
                        }
                    }
                }
                if (this.liveBassInputDuration > 0 && e == this.liveBassInputChannel && a.length > 0 && -1 != this.liveBassInputInstruments.indexOf(r)) {
                    const s = n.instruments[r];
                    if (s.getChord().singleTone) {
                        let n;
                        l.count() <= c ? (n = this.newTone(),
                        l.pushBack(n)) : !s.getTransition().isSeamless && this.liveInputStarted ? (this.releaseTone(h, l.get(c)),
                        n = this.newTone(),
                        l.set(c, n)) : n = l.get(c),
                        c++;
                        for (let t = 0; t < a.length; t++)
                            n.pitches[t] = a[t];
                        n.pitchCount = a.length,
                        n.chordSize = 1,
                        n.instrumentIndex = r,
                        n.note = n.prevNote = n.nextNote = null,
                        n.atNoteStart = this.liveBassInputStarted,
                        n.forceContinueAtStart = !1,
                        n.forceContinueAtEnd = !1,
                        this.computeTone(t, e, i, n, !1, !1)
                    } else {
                        this.moveTonesIntoOrderedTempMatchedList(l, a);
                        for (let n = 0; n < a.length; n++) {
                            let s;
                            null != this.tempMatchedPitchTones[c] ? (s = this.tempMatchedPitchTones[c],
                            this.tempMatchedPitchTones[c] = null,
                            1 == s.pitchCount && s.pitches[0] == a[n] || (this.releaseTone(h, s),
                            s = this.newTone()),
                            l.pushBack(s)) : (s = this.newTone(),
                            l.pushBack(s)),
                            c++,
                            s.pitches[0] = a[n],
                            s.pitchCount = 1,
                            s.chordSize = a.length,
                            s.instrumentIndex = r,
                            s.note = s.prevNote = s.nextNote = null,
                            s.atNoteStart = this.liveBassInputStarted,
                            s.forceContinueAtStart = !1,
                            s.forceContinueAtEnd = !1,
                            this.computeTone(t, e, i, s, !1, !1)
                        }
                    }
                }
                for (; l.count() > c; )
                    this.releaseTone(h, l.popBack());
                this.clearTempMatchedPitchTones(c, h)
            }
            this.liveInputStarted = !1,
            this.liveBassInputStarted = !1
        }
        adjacentPatternHasCompatibleInstrumentTransition(t, e, i, n, s, o, a, r, h, l) {
            if (t.patternInstruments && -1 == n.instruments.indexOf(s)) {
                if (i.instruments.length > 1 || n.instruments.length > 1)
                    return null;
                const t = e.instruments[n.instruments[0]];
                if (l)
                    return t.getChord();
                const s = t.getTransition();
                return o.includeAdjacentPatterns && s.includeAdjacentPatterns && s.slides == o.slides ? t.getChord() : null
            }
            return l || o.includeAdjacentPatterns ? a : null
        }
        static adjacentNotesHaveMatchingPitches(t, e) {
            if (t.pitches.length != e.pitches.length)
                return !1;
            const i = t.pins[t.pins.length - 1].interval;
            for (const n of t.pitches)
                if (-1 == e.pitches.indexOf(n + i))
                    return !1;
            return !0
        }
        moveTonesIntoOrderedTempMatchedList(t, e) {
            for (let i = 0; i < t.count(); i++) {
                const n = t.get(i)
                  , s = n.pitches[0] + n.lastInterval;
                for (let o = 0; o < e.length; o++)
                    if (e[o] == s) {
                        this.tempMatchedPitchTones[o] = n,
                        t.remove(i),
                        i--;
                        break
                    }
            }
            for (; t.count() > 0; ) {
                const e = t.popFront();
                for (let t = 0; t < this.tempMatchedPitchTones.length; t++)
                    if (null == this.tempMatchedPitchTones[t]) {
                        this.tempMatchedPitchTones[t] = e;
                        break
                    }
            }
        }
        determineCurrentActiveTones(t, e, i, n) {
            const s = t.channels[e]
              , o = this.channels[e]
              , a = t.getPattern(e, this.bar)
              , r = this.getCurrentPart()
              , h = this.tick + p.ticksPerPart * r;
            if (n && t.getChannelIsMod(e)) {
                let i = []
                  , n = []
                  , l = []
                  , c = p.modCount;
                for (; c--; )
                    i.push(null),
                    n.push(null),
                    l.push(null);
                if (null != a && !s.muted)
                    for (let t = 0; t < a.notes.length; t++)
                        a.notes[t].end <= r ? (null == n[a.notes[t].pitches[0]] || a.notes[t].end > n[a.notes[t].pitches[0]].start) && (n[a.notes[t].pitches[0]] = a.notes[t]) : a.notes[t].start <= r && a.notes[t].end > r ? i[a.notes[t].pitches[0]] = a.notes[t] : a.notes[t].start > r && (null == l[a.notes[t].pitches[0]] || a.notes[t].start < l[a.notes[t].pitches[0]].start) && (l[a.notes[t].pitches[0]] = a.notes[t]);
                let d = 0;
                const m = t.patternInstruments && null != a ? a.instruments[0] : 0
                  , u = o.instruments[m]
                  , f = u.activeModTones;
                for (let t = 0; t < p.modCount; t++) {
                    if (null != i[t] && (null != n[t] && n[t].end != i[t].start && (n[t] = null),
                    null != l[t] && l[t].start != i[t].end && (l[t] = null)),
                    null != o.singleSeamlessInstrument && o.singleSeamlessInstrument != m && o.singleSeamlessInstrument < o.instruments.length) {
                        const t = o.instruments[o.singleSeamlessInstrument]
                          , e = o.instruments[m];
                        for (; t.activeModTones.count() > 0; )
                            e.activeModTones.pushFront(t.activeModTones.popBack())
                    }
                    if (o.singleSeamlessInstrument = m,
                    null != i[t]) {
                        let e = n[t]
                          , s = l[t]
                          , o = !1
                          , a = !1;
                        const r = p.ticksPerPart * i[t].start == h && this.isAtStartOfTick;
                        let c;
                        if (f.count() <= d)
                            c = this.newTone(),
                            f.pushBack(c);
                        else if (r && null == e) {
                            const t = f.get(d);
                            t.isOnLastTick ? this.freeTone(t) : this.releaseTone(u, t),
                            c = this.newTone(),
                            f.set(d, c)
                        } else
                            c = f.get(d);
                        d++;
                        for (let e = 0; e < i[t].pitches.length; e++)
                            c.pitches[e] = i[t].pitches[e];
                        c.pitchCount = i[t].pitches.length,
                        c.chordSize = 1,
                        c.instrumentIndex = m,
                        c.note = i[t],
                        c.noteStartPart = i[t].start,
                        c.noteEndPart = i[t].end,
                        c.prevNote = e,
                        c.nextNote = s,
                        c.prevNotePitchIndex = 0,
                        c.nextNotePitchIndex = 0,
                        c.atNoteStart = r,
                        c.passedEndOfNote = !1,
                        c.forceContinueAtStart = o,
                        c.forceContinueAtEnd = a
                    }
                }
                for (; f.count() > d; ) {
                    const i = f.popBack()
                      , n = t.channels[e];
                    if (i.instrumentIndex < n.instruments.length && !i.isOnLastTick) {
                        const t = this.channels[e].instruments[i.instrumentIndex];
                        this.releaseTone(t, i)
                    } else
                        this.freeTone(i)
                }
            } else if (!t.getChannelIsMod(e)) {
                let l = null
                  , c = null
                  , d = null;
                if (n && null != a && !s.muted && (!this.isRecording || this.liveInputChannel != e)) {
                    for (let t = 0; t < a.notes.length; t++)
                        if (a.notes[t].end <= r)
                            c = a.notes[t];
                        else if (a.notes[t].start <= r && a.notes[t].end > r)
                            l = a.notes[t];
                        else if (a.notes[t].start > r) {
                            d = a.notes[t];
                            break
                        }
                    null != l && (null != c && c.end != l.start && (c = null),
                    null != d && d.start != l.end && (d = null))
                }
                if (null != a && (!t.layeredInstruments || 1 == s.instruments.length || t.patternInstruments && 1 == a.instruments.length)) {
                    const e = t.patternInstruments ? a.instruments[0] : 0;
                    if (null != o.singleSeamlessInstrument && o.singleSeamlessInstrument != e && o.singleSeamlessInstrument < o.instruments.length) {
                        const t = o.instruments[o.singleSeamlessInstrument]
                          , i = o.instruments[e];
                        for (; t.activeTones.count() > 0; )
                            i.activeTones.pushFront(t.activeTones.popBack())
                    }
                    o.singleSeamlessInstrument = e
                } else
                    o.singleSeamlessInstrument = null;
                for (let n = 0; n < s.instruments.length; n++) {
                    const m = o.instruments[n]
                      , u = m.activeTones;
                    let f = 0;
                    if (null != l && (!t.patternInstruments || -1 != a.instruments.indexOf(n))) {
                        const o = s.instruments[n];
                        let y = c
                          , b = d;
                        const g = p.partsPerBeat * t.beatsPerBar
                          , w = o.getTransition()
                          , v = o.getChord();
                        let x = !1
                          , k = !1
                          , M = 0
                          , S = 0;
                        if (0 == l.start) {
                            let i = null == this.prevBar ? null : t.getPattern(e, this.prevBar);
                            if (null != i) {
                                const e = i.notes.length <= 0 ? null : i.notes[i.notes.length - 1];
                                if (null != e && e.end == g) {
                                    const o = l.continuesLastPattern && Jt.adjacentNotesHaveMatchingPitches(e, l)
                                      , r = this.adjacentPatternHasCompatibleInstrumentTransition(t, s, a, i, n, w, v, l, e, o);
                                    null != r && (y = e,
                                    M = r.singleTone ? 1 : y.pitches.length,
                                    x = o)
                                }
                            }
                        } else
                            null != y && (M = v.singleTone ? 1 : y.pitches.length);
                        if (l.end == g) {
                            let i = null == this.nextBar ? null : t.getPattern(e, this.nextBar);
                            if (null != i) {
                                const e = i.notes.length <= 0 ? null : i.notes[0];
                                if (null != e && 0 == e.start) {
                                    const o = e.continuesLastPattern && Jt.adjacentNotesHaveMatchingPitches(l, e)
                                      , r = this.adjacentPatternHasCompatibleInstrumentTransition(t, s, a, i, n, w, v, l, e, o);
                                    null != r && (b = e,
                                    S = r.singleTone ? 1 : b.pitches.length,
                                    k = o)
                                }
                            }
                        } else
                            null != b && (S = v.singleTone ? 1 : b.pitches.length);
                        if (v.singleTone) {
                            const s = p.ticksPerPart * l.start == h;
                            let a;
                            if (u.count() <= f)
                                a = this.newTone(),
                                u.pushBack(a);
                            else if (!s || (w.isSeamless || o.clicklessTransition || x) && null != y)
                                a = u.get(f);
                            else {
                                const t = u.get(f);
                                t.isOnLastTick ? this.freeTone(t) : this.releaseTone(m, t),
                                a = this.newTone(),
                                u.set(f, a)
                            }
                            f++;
                            for (let t = 0; t < l.pitches.length; t++)
                                a.pitches[t] = l.pitches[t];
                            a.pitchCount = l.pitches.length,
                            a.chordSize = 1,
                            a.instrumentIndex = n,
                            a.note = l,
                            a.noteStartPart = l.start,
                            a.noteEndPart = l.end,
                            a.prevNote = y,
                            a.nextNote = b,
                            a.prevNotePitchIndex = 0,
                            a.nextNotePitchIndex = 0,
                            a.atNoteStart = s,
                            a.passedEndOfNote = !1,
                            a.forceContinueAtStart = x,
                            a.forceContinueAtEnd = k,
                            this.computeTone(t, e, i, a, !1, !1)
                        } else {
                            const s = o.getTransition();
                            (s.isSeamless && !s.slides && 0 == v.strumParts || x) && p.ticksPerPart * l.start == h && null != y && this.moveTonesIntoOrderedTempMatchedList(u, l.pitches);
                            let a = 0;
                            for (let o = 0; o < l.pitches.length; o++) {
                                let c = M > o ? y : null
                                  , d = l
                                  , g = S > o ? b : null
                                  , w = d.start + a
                                  , F = !1;
                                if (w > r) {
                                    if (!(u.count() > o && (s.isSeamless || x) && null != c))
                                        break;
                                    g = d,
                                    d = c,
                                    c = null,
                                    w = d.start + a,
                                    F = !0
                                }
                                let C = d.end;
                                (s.isSeamless || x) && null != g && (C = Math.min(p.partsPerBeat * this.song.beatsPerBar, C + a)),
                                (s.continues || x) && null != c || (a += v.strumParts);
                                const A = p.ticksPerPart * w == h;
                                let E;
                                if (null != this.tempMatchedPitchTones[f])
                                    E = this.tempMatchedPitchTones[f],
                                    this.tempMatchedPitchTones[f] = null,
                                    u.pushBack(E);
                                else if (u.count() <= f)
                                    E = this.newTone(),
                                    u.pushBack(E);
                                else if (!A || (s.isSeamless || x) && null != c)
                                    E = u.get(f);
                                else {
                                    const t = u.get(f);
                                    t.isOnLastTick ? this.freeTone(t) : this.releaseTone(m, t),
                                    E = this.newTone(),
                                    u.set(f, E)
                                }
                                f++,
                                E.pitches[0] = d.pitches[o],
                                E.pitchCount = 1,
                                E.chordSize = d.pitches.length,
                                E.instrumentIndex = n,
                                E.note = d,
                                E.noteStartPart = w,
                                E.noteEndPart = C,
                                E.prevNote = c,
                                E.nextNote = g,
                                E.prevNotePitchIndex = o,
                                E.nextNotePitchIndex = o,
                                E.atNoteStart = A,
                                E.passedEndOfNote = F,
                                E.forceContinueAtStart = x && null != c,
                                E.forceContinueAtEnd = k && null != g,
                                this.computeTone(t, e, i, E, !1, !1)
                            }
                        }
                    }
                    for (; u.count() > f; ) {
                        const i = u.popBack()
                          , n = t.channels[e];
                        if (i.instrumentIndex < n.instruments.length && !i.isOnLastTick) {
                            const t = o.instruments[i.instrumentIndex];
                            this.releaseTone(t, i)
                        } else
                            this.freeTone(i)
                    }
                    this.clearTempMatchedPitchTones(f, m)
                }
            }
        }
        clearTempMatchedPitchTones(t, e) {
            for (let i = t; i < this.tempMatchedPitchTones.length; i++) {
                const t = this.tempMatchedPitchTones[i];
                null != t && (t.isOnLastTick ? this.freeTone(t) : this.releaseTone(e, t),
                this.tempMatchedPitchTones[i] = null)
            }
        }
        playTone(t, e, i, n) {
            const s = this.channels[t].instruments[n.instrumentIndex];
            null != s.synthesizer && s.synthesizer(this, e, i, n, s),
            n.envelopeComputer.clearEnvelopes()
        }
        playModTone(t, e, i, n, s, o, a, r) {
            const h = t.channels[e].instruments[o.instrumentIndex];
            if (null != o.note) {
                const t = this.getTicksIntoBar()
                  , e = t / p.ticksPerPart
                  , a = (t + 1) / p.ticksPerPart
                  , r = this.tickSampleCountdown
                  , l = e + (a - e) * (1 - r / i)
                  , c = e + (a - e) * (1 - (r - s) / i)
                  , d = p.ticksPerPart * l
                  , m = p.ticksPerPart * c
                  , u = o.note.getEndPinIndex(this.getCurrentPart())
                  , f = o.note.pins[u - 1]
                  , y = o.note.pins[u]
                  , b = (o.note.start + f.time) * p.ticksPerPart
                  , g = (o.note.start + y.time) * p.ticksPerPart
                  , w = (d - b) / (g - b)
                  , v = (m - b) / (g - b);
                o.expression = f.size + (y.size - f.size) * w,
                o.expressionDelta = f.size + (y.size - f.size) * v - o.expression,
                Jt.modSynth(this, n, s, o, h)
            }
        }
        static computeChordExpression(t) {
            return 1 / (.25 * (t - 1) + 1)
        }
        computeTone(t, e, i, n, s, o) {
            const a = Math.ceil(i)
              , r = t.channels[e]
              , h = this.channels[e]
              , l = r.instruments[n.instrumentIndex]
              , c = h.instruments[n.instrumentIndex];
            c.awake = !0,
            c.tonesAddedInThisTick = !0,
            c.computed || c.compute(this, l, i, a, n, e, n.instrumentIndex);
            const d = l.getTransition()
              , m = l.getChord()
              , u = m.singleTone ? 1 : Jt.computeChordExpression(n.chordSize)
              , f = t.getChannelIsNoise(e)
              , b = f ? p.noiseInterval : 1
              , g = p.ticksPerPart * i / this.samplesPerSecond
              , w = 1 / this.samplesPerSecond
              , v = 1 / p.partsPerBeat
              , k = this.getTicksIntoBar()
              , M = k / p.ticksPerPart
              , S = (k + 1) / p.ticksPerPart
              , T = this.getCurrentPart();
            let P = 1;
            n.specialIntervalExpressionMult = 1;
            let B = o
              , I = 0
              , L = 0
              , D = 1
              , z = 1
              , q = u
              , N = u
              , O = 16
              , R = p.keys[t.key].basePitch + p.pitchesPerOctave * t.octave
              , $ = 1
              , H = 48;
            if (3 == l.type)
                $ = p.spectrumBaseExpression,
                f && (R = p.spectrumBasePitch,
                $ *= 2),
                O = p.spectrumBasePitch,
                H = 28;
            else if (4 == l.type)
                R = p.spectrumBasePitch,
                $ = p.drumsetBaseExpression,
                O = R;
            else if (2 == l.type)
                R = f ? p.chipNoises[l.chipNoise].basePitch : R + p.chipNoises[l.chipNoise].basePitch - 12,
                $ = p.noiseBaseExpression,
                O = R,
                H = p.chipNoises[l.chipNoise].isSoft ? 24 : 60;
            else if (1 == l.type || 11 == l.type)
                $ = p.fmBaseExpression;
            else if (0 == l.type)
                $ = p.chipBaseExpression,
                p.chipWaves[l.chipWave].isCustomSampled ? p.chipWaves[l.chipWave].isPercussion ? R = -12 * Math.log2(p.chipWaves[l.chipWave].samples.length / p.chipWaves[l.chipWave].sampleRate) - 84.37 - (-60 + p.chipWaves[l.chipWave].rootKey) : R += -12 * Math.log2(p.chipWaves[l.chipWave].samples.length / p.chipWaves[l.chipWave].sampleRate) - 96.37 - (-60 + p.chipWaves[l.chipWave].rootKey) : p.chipWaves[l.chipWave].isSampled && !p.chipWaves[l.chipWave].isPercussion ? R = R - 63 + p.chipWaves[l.chipWave].extraSampleDetune : p.chipWaves[l.chipWave].isSampled && p.chipWaves[l.chipWave].isPercussion && (R = -51 + p.chipWaves[l.chipWave].extraSampleDetune);
            else if (9 == l.type)
                $ = p.chipBaseExpression;
            else if (5 == l.type)
                $ = p.harmonicsBaseExpression;
            else if (6 == l.type)
                $ = p.pwmBaseExpression;
            else if (8 == l.type)
                $ = p.supersawBaseExpression;
            else if (7 == l.type)
                $ = p.pickedStringBaseExpression;
            else {
                if (10 != l.type)
                    throw new Error("Unknown instrument type in computeTone.");
                $ = 1,
                O = 0,
                H = 1,
                R = 0
            }
            if ((n.atNoteStart && !d.isSeamless && !n.forceContinueAtStart || n.freshlyAllocated) && (n.reset(),
            0 == l.type && l.isUsingAdvancedLoopControls)) {
                const t = p.rawRawChipWaves[l.chipWave].samples.length - 1
                  , e = l.chipWaveStartOffset / t
                  , i = .999999999999999;
                for (let t = 0; t < p.maxPitchOrOperatorCount; t++)
                    n.phases[t] = l.chipWavePlayBackwards ? Math.max(0, Math.min(i, e)) : Math.max(0, e),
                    n.directions[t] = l.chipWavePlayBackwards ? -1 : 1,
                    n.chipWaveCompletions[t] = 0,
                    n.chipWavePrevWaves[t] = 0,
                    n.chipWaveCompletionsLastWave[t] = 0
            }
            n.freshlyAllocated = !1;
            for (let t = 0; t < p.maxPitchOrOperatorCount; t++)
                n.phaseDeltas[t] = 0,
                n.phaseDeltaScales[t] = 0,
                n.operatorExpressions[t] = 0,
                n.operatorExpressionDeltas[t] = 0;
            n.expression = 0,
            n.expressionDelta = 0;
            for (let t = 0; t < (11 == l.type ? 6 : p.operatorCount); t++)
                n.operatorWaves[t] = Jt.getOperatorWave(l.operators[t].waveform, l.operators[t].pulseWidth);
            if (s) {
                const t = n.ticksSinceReleased
                  , e = n.ticksSinceReleased + 1;
                I = L = n.lastInterval;
                const i = Math.abs(l.getFadeOutTicks());
                D = Jt.noteSizeToVolumeMult((1 - t / i) * p.noteSizeMax),
                z = Jt.noteSizeToVolumeMult((1 - e / i) * p.noteSizeMax),
                o && (z = 0),
                n.ticksSinceReleased + 1 >= i && (B = !0)
            } else if (null == n.note)
                D = z = 1,
                n.lastInterval = 0,
                n.ticksSinceReleased = 0,
                n.liveInputSamplesHeld += a;
            else {
                const t = n.note
                  , e = n.nextNote
                  , i = n.noteStartPart
                  , s = n.noteEndPart
                  , o = t.getEndPinIndex(T)
                  , a = t.pins[o - 1]
                  , r = t.pins[o]
                  , h = i * p.ticksPerPart
                  , c = s * p.ticksPerPart
                  , m = (t.start + a.time) * p.ticksPerPart
                  , u = (t.start + r.time) * p.ticksPerPart;
                n.ticksSinceReleased = 0;
                const f = T * p.ticksPerPart + this.tick
                  , y = f + 1
                  , b = f - h
                  , g = y - h
                  , w = Math.min(1, (f - m) / (u - m))
                  , v = Math.min(1, (y - m) / (u - m));
                if (D = 1,
                z = 1,
                I = a.interval + (r.interval - a.interval) * w,
                L = a.interval + (r.interval - a.interval) * v,
                n.lastInterval = L,
                !d.isSeamless && !n.forceContinueAtEnd || null == e) {
                    const t = -l.getFadeOutTicks();
                    if (t > 0) {
                        const e = c - h;
                        D *= Math.min(1, (e - b) / t),
                        z *= Math.min(1, (e - g) / t),
                        y >= h + e && (B = !0)
                    }
                }
            }
            n.isOnLastTick = B;
            let _, V, G = l.noteFilter;
            if (l.noteFilterType) {
                const t = l.noteFilter;
                null == l.noteSubFilters[1] && (l.noteSubFilters[1] = new Rt);
                const i = l.noteSubFilters[1];
                let s = l.noteFilterSimpleCut
                  , o = l.noteFilterSimplePeak
                  , a = l.noteFilterSimpleCut
                  , r = l.noteFilterSimplePeak
                  , h = !1;
                this.isModActive(p.modulators.dictionary["note filt cut"].index, e, n.instrumentIndex) && (s = this.getModValue(p.modulators.dictionary["note filt cut"].index, e, n.instrumentIndex, !1),
                a = this.getModValue(p.modulators.dictionary["note filt cut"].index, e, n.instrumentIndex, !0),
                h = !0),
                this.isModActive(p.modulators.dictionary["note filt peak"].index, e, n.instrumentIndex) && (o = this.getModValue(p.modulators.dictionary["note filt peak"].index, e, n.instrumentIndex, !1),
                r = this.getModValue(p.modulators.dictionary["note filt peak"].index, e, n.instrumentIndex, !0),
                h = !0),
                t.convertLegacySettingsForSynth(s, o, !h),
                i.convertLegacySettingsForSynth(a, r, !h),
                _ = t.controlPoints[0],
                V = i.controlPoints[0],
                l.noteFilter = t,
                l.tmpNoteFilterStart = t
            }
            const W = n.envelopeComputer;
            let j = p.arpSpeedScale[l.envelopeSpeed];
            this.isModActive(p.modulators.dictionary["envelope speed"].index, e, n.instrumentIndex) && (j = Math.max(0, Math.min(p.arpSpeedScale.length - 1, this.getModValue(p.modulators.dictionary["envelope speed"].index, e, n.instrumentIndex, !1))),
            j = Number.isInteger(j) ? p.arpSpeedScale[j] : (1 - j % 1) * p.arpSpeedScale[Math.floor(j)] + j % 1 * p.arpSpeedScale[Math.ceil(j)]),
            W.computeEnvelopes(l, T, c.envelopeTime, p.ticksPerPart * M, i / this.samplesPerSecond, n, j);
            const U = n.envelopeComputer.envelopeStarts
              , K = n.envelopeComputer.envelopeEnds;
            if (l.noteFilter = G,
            null != n.note && d.slides) {
                const t = n.prevNote
                  , e = n.nextNote;
                if (null != t) {
                    const e = t.pitches[n.prevNotePitchIndex] + t.pins[t.pins.length - 1].interval - n.pitches[0];
                    if (W.prevSlideStart && (I += e * W.prevSlideRatioStart),
                    W.prevSlideEnd && (L += e * W.prevSlideRatioEnd),
                    !m.singleTone) {
                        const e = t.pitches.length - n.chordSize;
                        W.prevSlideStart && (q = Jt.computeChordExpression(n.chordSize + e * W.prevSlideRatioStart)),
                        W.prevSlideEnd && (N = Jt.computeChordExpression(n.chordSize + e * W.prevSlideRatioEnd))
                    }
                }
                if (null != e) {
                    const t = e.pitches[n.nextNotePitchIndex] - (n.pitches[0] + n.note.pins[n.note.pins.length - 1].interval);
                    if (W.nextSlideStart && (I += t * W.nextSlideRatioStart),
                    W.nextSlideEnd && (L += t * W.nextSlideRatioEnd),
                    !m.singleTone) {
                        const t = e.pitches.length - n.chordSize;
                        W.nextSlideStart && (q = Jt.computeChordExpression(n.chordSize + t * W.nextSlideRatioStart)),
                        W.nextSlideEnd && (N = Jt.computeChordExpression(n.chordSize + t * W.nextSlideRatioEnd))
                    }
                }
            }
            if (F(l.effects)) {
                let t = p.justIntonationSemitones[l.pitchShift] / b
                  , i = 1
                  , s = 1;
                this.isModActive(p.modulators.dictionary["pitch shift"].index, e, n.instrumentIndex) && (t = p.justIntonationSemitones[p.justIntonationSemitones.length - 1],
                i = this.getModValue(p.modulators.dictionary["pitch shift"].index, e, n.instrumentIndex, !1) / p.pitchShiftCenter,
                s = this.getModValue(p.modulators.dictionary["pitch shift"].index, e, n.instrumentIndex, !0) / p.pitchShiftCenter);
                I += t * U[18] * i,
                L += t * K[18] * s
            }
            if (C(l.effects) || this.isModActive(p.modulators.dictionary["song detune"].index, e, n.instrumentIndex)) {
                const t = U[19]
                  , i = K[19];
                let s = l.detune
                  , o = l.detune;
                this.isModActive(p.modulators.dictionary.detune.index, e, n.instrumentIndex) && (s = this.getModValue(p.modulators.dictionary.detune.index, e, n.instrumentIndex, !1) + p.detuneCenter,
                o = this.getModValue(p.modulators.dictionary.detune.index, e, n.instrumentIndex, !0) + p.detuneCenter),
                this.isModActive(p.modulators.dictionary["song detune"].index, e, n.instrumentIndex) && (s += 4 * this.getModValue(p.modulators.dictionary["song detune"].index, e, n.instrumentIndex, !1),
                o += 4 * this.getModValue(p.modulators.dictionary["song detune"].index, e, n.instrumentIndex, !0)),
                I += Jt.detuneToCents(s) * t * p.pitchesPerOctave / 1200,
                L += Jt.detuneToCents(o) * i * p.pitchesPerOctave / 1200
            }
            if (A(l.effects)) {
                let t, i, s, o;
                if (l.vibrato == p.vibratos.length ? (t = 2 * l.vibratoDelay,
                l.vibratoDelay == p.modulators.dictionary["vibrato delay"].maxRawVol && (t = Number.POSITIVE_INFINITY),
                i = l.vibratoDepth,
                s = i) : (t = p.vibratos[l.vibrato].delayTicks,
                i = p.vibratos[l.vibrato].amplitude,
                s = i),
                this.isModActive(p.modulators.dictionary["vibrato delay"].index, e, n.instrumentIndex) && (t = 2 * this.getModValue(p.modulators.dictionary["vibrato delay"].index, e, n.instrumentIndex, !1),
                t == 2 * p.modulators.dictionary["vibrato delay"].maxRawVol && (t = Number.POSITIVE_INFINITY)),
                this.isModActive(p.modulators.dictionary["vibrato depth"].index, e, n.instrumentIndex) && (i = this.getModValue(p.modulators.dictionary["vibrato depth"].index, e, n.instrumentIndex, !1) / 25,
                s = this.getModValue(p.modulators.dictionary["vibrato depth"].index, e, n.instrumentIndex, !0) / 25),
                null != n.prevVibrato)
                    o = n.prevVibrato;
                else {
                    if (o = i * Jt.getLFOAmplitude(l, g * c.vibratoTime) * U[20],
                    t > 0) {
                        const e = t - W.noteTicksStart;
                        o *= Math.max(0, Math.min(1, 1 - e / 2))
                    }
                }
                let a = Jt.getLFOAmplitude(l, g * c.nextVibratoTime);
                const r = K[20];
                if (10 != l.type) {
                    let e = s * a * r;
                    if (t > 0) {
                        const i = t - W.noteTicksEnd;
                        e *= Math.max(0, Math.min(1, 1 - i / 2))
                    }
                    n.prevVibrato = e,
                    I += o,
                    L += e
                }
            }
            if (!d.isSeamless && !n.forceContinueAtStart || null == n.prevNote) {
                const t = l.getFadeInSeconds();
                t > 0 && (D *= Math.min(1, W.noteSecondsStartUnscaled / t),
                z *= Math.min(1, W.noteSecondsEndUnscaled / t))
            }
            4 == l.type && null == n.drumsetPitch && (n.drumsetPitch = n.pitches[0],
            null != n.note && (n.drumsetPitch += n.note.pickMainInterval()),
            n.drumsetPitch = Math.max(0, Math.min(p.drumCount - 1, n.drumsetPitch)));
            let J = W.lowpassCutoffDecayVolumeCompensation;
            if (E(l.effects)) {
                const t = U[1]
                  , e = K[1];
                if (l.noteFilterType) {
                    const i = U[21]
                      , s = K[21]
                      , o = U[29]
                      , r = K[29];
                    _.toCoefficients(Jt.tempFilterStartCoefficients, this.samplesPerSecond, t * i, o),
                    V.toCoefficients(Jt.tempFilterEndCoefficients, this.samplesPerSecond, e * s, r),
                    n.noteFilters.length < 1 && (n.noteFilters[0] = new mt),
                    n.noteFilters[0].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterEndCoefficients, 1 / a, 0 == _.type),
                    J *= _.getVolumeCompensationMult(),
                    n.noteFilterCount = 1
                } else {
                    const i = null != l.tmpNoteFilterStart ? l.tmpNoteFilterStart : l.noteFilter;
                    for (let s = 0; s < i.controlPointCount; s++) {
                        const o = U[21 + s]
                          , r = K[21 + s]
                          , h = U[29 + s]
                          , c = K[29 + s];
                        let d = i.controlPoints[s];
                        const p = null != l.tmpNoteFilterEnd && null != l.tmpNoteFilterEnd.controlPoints[s] ? l.tmpNoteFilterEnd.controlPoints[s] : i.controlPoints[s];
                        d.type != p.type && (d = p),
                        d.toCoefficients(Jt.tempFilterStartCoefficients, this.samplesPerSecond, t * o, h),
                        p.toCoefficients(Jt.tempFilterEndCoefficients, this.samplesPerSecond, e * r, c),
                        n.noteFilters.length <= s && (n.noteFilters[s] = new mt),
                        n.noteFilters[s].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterEndCoefficients, 1 / a, 0 == d.type),
                        J *= d.getVolumeCompensationMult()
                    }
                    n.noteFilterCount = i.controlPointCount
                }
            } else
                n.noteFilterCount = 0;
            if (4 == l.type) {
                const t = l.getDrumsetEnvelope(n.drumsetPitch);
                J *= Wt.getLowpassCutoffDecayVolumeCompensation(t);
                let e = Wt.computeEnvelope(t, W.noteSecondsStart, v * M, W.noteSizeStart);
                if (W.prevSlideStart) {
                    e += (Wt.computeEnvelope(t, W.prevNoteSecondsStart, v * M, W.prevNoteSize) - e) * W.prevSlideRatioStart
                }
                if (W.nextSlideStart) {
                    e += (Wt.computeEnvelope(t, 0, v * M, W.nextNoteSize) - e) * W.nextSlideRatioStart
                }
                let i = e;
                if (0 == l.discreteEnvelope) {
                    if (i = Wt.computeEnvelope(t, W.noteSecondsEnd, v * S, W.noteSizeEnd),
                    W.prevSlideEnd) {
                        i += (Wt.computeEnvelope(t, W.prevNoteSecondsEnd, v * S, W.prevNoteSize) - i) * W.prevSlideRatioEnd
                    }
                    if (W.nextSlideEnd) {
                        i += (Wt.computeEnvelope(t, 0, v * S, W.nextNoteSize) - i) * W.nextSlideRatioEnd
                    }
                }
                const s = this.tempDrumSetControlPoint;
                s.type = 0,
                s.gain = Ot.getRoundedSettingValueFromLinearGain(.5),
                s.freq = Ot.getRoundedSettingValueFromHz(8e3),
                s.toCoefficients(Jt.tempFilterStartCoefficients, this.samplesPerSecond, e * (1 + e), 1),
                s.toCoefficients(Jt.tempFilterEndCoefficients, this.samplesPerSecond, i * (1 + i), 1),
                n.noteFilters.length == n.noteFilterCount && (n.noteFilters[n.noteFilterCount] = new mt),
                n.noteFilters[n.noteFilterCount].loadCoefficientsWithGradient(Jt.tempFilterStartCoefficients, Jt.tempFilterEndCoefficients, 1 / a, !0),
                n.noteFilterCount++
            }
            if (J = Math.min(3, J),
            1 == l.type || 11 == l.type) {
                let t = 1
                  , i = 0
                  , s = 0;
                const o = m.arpeggiates;
                if (n.pitchCount > 1 && o) {
                    const t = Math.floor(c.arpTime / p.ticksPerArpeggio);
                    s = n.pitches[x(n.pitchCount, l.fastTwoNoteArp, t)] - n.pitches[0]
                }
                const r = 11 == l.type ? l.customAlgorithm.carrierCount : p.algorithms[l.algorithm].carrierCount;
                for (let h = 0; h < (11 == l.type ? 6 : p.operatorCount); h++) {
                    const c = 11 == l.type ? l.customAlgorithm.associatedCarrier[h] - 1 : p.algorithms[l.algorithm].associatedCarrier[h] - 1
                      , d = n.pitches[o ? 0 : h < n.pitchCount ? h : c < n.pitchCount ? c : 0]
                      , m = p.operatorFrequencies[l.operators[h].frequency].mult
                      , u = p.operatorCarrierInterval[c] + s
                      , f = R + (d + I) * b + u
                      , y = R + (d + L) * b + u
                      , g = Ht.frequencyFromPitch(f)
                      , v = Ht.frequencyFromPitch(y)
                      , x = p.operatorFrequencies[l.operators[h].frequency].hzOffset
                      , k = m * g + x
                      , M = m * v + x
                      , S = U[5 + h]
                      , F = K[5 + h];
                    let C, A;
                    1 != S || 1 != F ? (C = Math.pow(2, Math.log2(k / g) * S) * g,
                    A = Math.pow(2, Math.log2(M / v) * F) * v) : (C = k,
                    A = M),
                    n.phaseDeltas[h] = C * w,
                    n.phaseDeltaScales[h] = Math.pow(A / C, 1 / a);
                    let E = l.operators[h].amplitude
                      , T = l.operators[h].amplitude;
                    h < 4 ? this.isModActive(p.modulators.dictionary["fm slider 1"].index + h, e, n.instrumentIndex) && (E *= this.getModValue(p.modulators.dictionary["fm slider 1"].index + h, e, n.instrumentIndex, !1) / 15,
                    T *= this.getModValue(p.modulators.dictionary["fm slider 1"].index + h, e, n.instrumentIndex, !0) / 15) : this.isModActive(p.modulators.dictionary["fm slider 5"].index + h - 4, e, n.instrumentIndex) && (E *= this.getModValue(p.modulators.dictionary["fm slider 5"].index + h - 4, e, n.instrumentIndex, !1) / 15,
                    T *= this.getModValue(p.modulators.dictionary["fm slider 5"].index + h - 4, e, n.instrumentIndex, !0) / 15);
                    const P = Jt.operatorAmplitudeCurve(E)
                      , B = Jt.operatorAmplitudeCurve(T);
                    let D = P * p.operatorFrequencies[l.operators[h].frequency].amplitudeSign
                      , z = B * p.operatorFrequencies[l.operators[h].frequency].amplitudeSign;
                    if (h < r) {
                        let t;
                        t = null != n.prevPitchExpressions[h] ? n.prevPitchExpressions[h] : Math.pow(2, -(f - O) / H);
                        const e = Math.pow(2, -(y - O) / H);
                        n.prevPitchExpressions[h] = e,
                        D *= t,
                        z *= e,
                        i += B
                    } else
                        D *= 1.5 * p.sineWaveLength,
                        z *= 1.5 * p.sineWaveLength,
                        t *= 1 - Math.min(1, l.operators[h].amplitude / 15);
                    if (D *= U[11 + h],
                    z *= K[11 + h],
                    this.isModActive(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex)) {
                        const t = this.getModValue(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex, !1)
                          , i = this.getModValue(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex, !0);
                        D *= t <= 0 ? (t + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(t),
                        z *= i <= 0 ? (i + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(i)
                    }
                    n.operatorExpressions[h] = D,
                    n.operatorExpressionDeltas[h] = (z - D) / a
                }
                t *= (Math.pow(2, 2 - 1.4 * l.feedbackAmplitude / 15) - 1) / 3,
                t *= 1 - Math.min(1, Math.max(0, i - 1) / 2),
                t = 1 + 3 * t;
                const h = $ * t * J * D * q * U[0]
                  , d = $ * t * J * z * N * K[0];
                n.expression = h,
                n.expressionDelta = (d - h) / a;
                let u = l.feedbackAmplitude
                  , f = l.feedbackAmplitude;
                this.isModActive(p.modulators.dictionary["fm feedback"].index, e, n.instrumentIndex) && (u *= this.getModValue(p.modulators.dictionary["fm feedback"].index, e, n.instrumentIndex, !1) / 15,
                f *= this.getModValue(p.modulators.dictionary["fm feedback"].index, e, n.instrumentIndex, !0) / 15);
                let y = .3 * p.sineWaveLength * u / 15;
                const g = .3 * p.sineWaveLength * f / 15;
                let v = y * U[17]
                  , k = g * K[17];
                n.feedbackMult = v,
                n.feedbackDelta = (k - v) / a
            } else {
                const t = Math.pow(2, (L - I) * b / 12)
                  , i = Math.pow(t, 1 / a);
                let s = n.pitches[0];
                if (n.pitchCount > 1 && (m.arpeggiates || m.customInterval)) {
                    const t = Math.floor(c.arpTime / p.ticksPerArpeggio);
                    if (m.customInterval) {
                        const e = n.pitches[1 + x(n.pitchCount - 1, l.fastTwoNoteArp, t)] - n.pitches[0];
                        P = Math.pow(2, e / 12),
                        n.specialIntervalExpressionMult = Math.pow(2, -e / H)
                    } else
                        s = n.pitches[x(n.pitchCount, l.fastTwoNoteArp, t)]
                }
                const o = R + (s + I) * b
                  , r = R + (s + L) * b;
                let h;
                h = null != n.prevPitchExpressions[0] ? n.prevPitchExpressions[0] : Math.pow(2, -(o - O) / H);
                const u = Math.pow(2, -(r - O) / H);
                n.prevPitchExpressions[0] = u;
                let f = $ * J;
                if (2 == l.type && (f *= p.chipNoises[l.chipNoise].expression),
                0 == l.type && (f *= p.chipWaves[l.chipWave].expression),
                6 == l.type) {
                    const t = y(l.pulseWidth);
                    let i = t
                      , s = t;
                    this.isModActive(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex) && (i = this.getModValue(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex, !1) / (2 * p.pulseWidthRange),
                    s = this.getModValue(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex, !0) / (2 * p.pulseWidthRange));
                    const o = i * U[2]
                      , r = s * K[2];
                    n.pulseWidth = o,
                    n.pulseWidthDelta = (r - o) / a;
                    let h = l.decimalOffset;
                    this.isModActive(p.modulators.dictionary["decimal offset"].index, e, n.instrumentIndex) && (h = this.getModValue(p.modulators.dictionary["decimal offset"].index, e, n.instrumentIndex, !1));
                    const c = h * U[37];
                    n.decimalOffset = c,
                    n.pulseWidth -= n.decimalOffset / 1e4
                }
                if (7 == l.type) {
                    let t = l.stringSustain
                      , i = l.stringSustain;
                    this.isModActive(p.modulators.dictionary.sustain.index, e, n.instrumentIndex) && (t = this.getModValue(p.modulators.dictionary.sustain.index, e, n.instrumentIndex, !1),
                    i = this.getModValue(p.modulators.dictionary.sustain.index, e, n.instrumentIndex, !0)),
                    n.stringSustainStart = t,
                    n.stringSustainEnd = i,
                    f *= Math.pow(2, .7 * (1 - t / (p.stringSustainRange - 1)))
                }
                const g = Ht.frequencyFromPitch(o);
                if (0 == l.type || 9 == l.type || 5 == l.type || 7 == l.type || 3 == l.type || 6 == l.type || 2 == l.type) {
                    const t = l.unisonVoices
                      , e = l.unisonSpread
                      , s = l.unisonOffset;
                    f *= l.unisonExpression * (7 == l.type ? 1 : t / 2);
                    const o = U[4]
                      , r = K[4]
                      , h = Math.pow(2, (s + e) * o / 12)
                      , c = Math.pow(2, (s + e) * r / 12)
                      , d = Math.pow(2, (s - e) * o / 12) * P
                      , p = Math.pow(2, (s - e) * r / 12) * P;
                    n.phaseDeltas[0] = g * w * h,
                    n.phaseDeltas[1] = g * w * d,
                    n.phaseDeltaScales[0] = i * Math.pow(c / h, 1 / a),
                    n.phaseDeltaScales[1] = i * Math.pow(p / d, 1 / a)
                } else
                    n.phaseDeltas[0] = g * w,
                    n.phaseDeltaScales[0] = i;
                let v = 1
                  , k = 1;
                if (8 == l.type) {
                    const i = 1 / Math.sqrt(p.supersawVoiceCount);
                    let s = l.supersawDynamism / p.supersawDynamismMax
                      , o = l.supersawDynamism / p.supersawDynamismMax;
                    this.isModActive(p.modulators.dictionary.dynamism.index, e, n.instrumentIndex) && (s = this.getModValue(p.modulators.dictionary.dynamism.index, e, n.instrumentIndex, !1) / p.supersawDynamismMax,
                    o = this.getModValue(p.modulators.dictionary.dynamism.index, e, n.instrumentIndex, !0) / p.supersawDynamismMax);
                    const r = 1 - Math.pow(Math.max(0, 1 - s * U[38]), .2)
                      , h = 1 - Math.pow(Math.max(0, 1 - o * K[38]), .2)
                      , c = Math.pow(2, Math.log2(i) * r)
                      , d = Math.pow(2, Math.log2(i) * h)
                      , m = Math.sqrt((1 / Math.pow(c, 2) - 1) / (p.supersawVoiceCount - 1))
                      , u = Math.sqrt((1 / Math.pow(d, 2) - 1) / (p.supersawVoiceCount - 1));
                    n.supersawDynamism = m,
                    n.supersawDynamismDelta = (u - m) / a;
                    const f = -1 == n.supersawDelayIndex;
                    if (f) {
                        let t = 0;
                        for (let e = 0; e < p.supersawVoiceCount; e++)
                            n.phases[e] = t,
                            t += -Math.log(Math.random());
                        const e = 1 + (p.supersawVoiceCount - 1) * m;
                        let i = 0;
                        for (let e = 0; e < p.supersawVoiceCount; e++) {
                            const s = 0 == e ? 1 : m
                              , o = n.phases[e] / t;
                            n.phases[e] = o,
                            i += (o - .5) * s
                        }
                        let s = 1
                          , o = 0;
                        for (let t = p.supersawVoiceCount - 1; t >= 0; t--) {
                            const a = 1 - n.phases[t]
                              , r = a - o;
                            if (i < 0) {
                                const t = -i / e;
                                if (t < r) {
                                    s = o + t;
                                    break
                                }
                            }
                            i += r * e - (0 == t ? 1 : m),
                            o = a
                        }
                        for (let t = 0; t < p.supersawVoiceCount; t++)
                            n.phases[t] += s;
                        for (let t = 1; t < p.supersawVoiceCount - 1; t++) {
                            const e = t + Math.floor(Math.random() * (p.supersawVoiceCount - t))
                              , i = n.phases[t];
                            n.phases[t] = n.phases[e],
                            n.phases[e] = i
                        }
                    }
                    const b = l.supersawSpread / p.supersawSpreadMax;
                    let x = b
                      , M = b;
                    this.isModActive(p.modulators.dictionary.spread.index, e, n.instrumentIndex) && (x = this.getModValue(p.modulators.dictionary.spread.index, e, n.instrumentIndex, !1) / p.supersawSpreadMax,
                    M = this.getModValue(p.modulators.dictionary.spread.index, e, n.instrumentIndex, !0) / p.supersawSpreadMax);
                    const S = .5 * (x * U[39] + M * K[39])
                      , F = Math.pow(1 - Math.sqrt(Math.max(0, 1 - S)), 1.75);
                    for (let t = 0; t < p.supersawVoiceCount; t++) {
                        const e = 0 == t ? 0 : Math.pow(((t + 1 >> 1) - .5 + .025 * ((2 & t) - 1)) / (p.supersawVoiceCount >> 1), 1.1) * (2 * (1 & t) - 1);
                        n.supersawUnisonDetunes[t] = Math.pow(2, F * e / 12)
                    }
                    const C = l.supersawShape / p.supersawShapeMax;
                    let A = C * U[40]
                      , E = C * K[40];
                    this.isModActive(p.modulators.dictionary["saw shape"].index, e, n.instrumentIndex) && (A = this.getModValue(p.modulators.dictionary["saw shape"].index, e, n.instrumentIndex, !1) / p.supersawShapeMax,
                    E = this.getModValue(p.modulators.dictionary["saw shape"].index, e, n.instrumentIndex, !0) / p.supersawShapeMax);
                    const T = A * U[40]
                      , P = E * K[40];
                    n.supersawShape = T,
                    n.supersawShapeDelta = (P - T) / a;
                    let B = l.decimalOffset;
                    this.isModActive(p.modulators.dictionary["decimal offset"].index, e, n.instrumentIndex) && (B = this.getModValue(p.modulators.dictionary["decimal offset"].index, e, n.instrumentIndex, !1));
                    const I = B * U[37];
                    n.decimalOffset = I;
                    const L = y(l.pulseWidth);
                    let D = L
                      , z = L;
                    this.isModActive(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex) && (D = this.getModValue(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex, !1) / (2 * p.pulseWidthRange),
                    z = this.getModValue(p.modulators.dictionary["pulse width"].index, e, n.instrumentIndex, !0) / (2 * p.pulseWidthRange));
                    let q = D * U[2]
                      , N = z * K[2];
                    q -= I / 1e4,
                    N -= I / 1e4;
                    const O = null != n.supersawPrevPhaseDelta ? n.supersawPrevPhaseDelta : g * w
                      , R = g * w * t;
                    n.supersawPrevPhaseDelta = R;
                    const $ = q / O
                      , H = N / R;
                    n.supersawDelayLength = $,
                    n.supersawDelayLengthDelta = (H - $) / a;
                    const _ = Math.ceil(Math.max($, H)) + 2;
                    if (null == n.supersawDelayLine || n.supersawDelayLine.length <= _) {
                        const t = Math.ceil(.5 * this.samplesPerSecond / Ht.frequencyFromPitch(24))
                          , e = new Float32Array(Jt.fittingPowerOfTwo(Math.max(t, _)));
                        if (!f && null != n.supersawDelayLine) {
                            const t = n.supersawDelayLine.length - 1 >> 0
                              , i = n.supersawDelayIndex;
                            for (let s = 0; s < n.supersawDelayLine.length; s++)
                                e[s] = n.supersawDelayLine[i + s & t]
                        }
                        n.supersawDelayLine = e,
                        n.supersawDelayIndex = n.supersawDelayLine.length
                    } else
                        f && (n.supersawDelayLine.fill(0),
                        n.supersawDelayIndex = n.supersawDelayLine.length);
                    const V = p.pwmBaseExpression / p.supersawBaseExpression;
                    v *= (1 + (V - 1) * T) / Math.sqrt(1 + (p.supersawVoiceCount - 1) * m * m),
                    k *= (1 + (V - 1) * P) / Math.sqrt(1 + (p.supersawVoiceCount - 1) * u * u)
                }
                let M = f * D * q * h * U[0] * v
                  , S = f * z * N * u * K[0] * k;
                if (this.isModActive(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex)) {
                    const t = this.getModValue(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex, !1)
                      , i = this.getModValue(p.modulators.dictionary["note volume"].index, e, n.instrumentIndex, !0);
                    M *= t <= 0 ? (t + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(t),
                    S *= i <= 0 ? (i + p.volumeRange / 2) / (p.volumeRange / 2) : Jt.instrumentVolumeToVolumeMult(i)
                }
                if (n.expression = M,
                n.expressionDelta = (S - M) / a,
                7 == l.type) {
                    let t;
                    if (null != n.prevStringDecay)
                        t = n.prevStringDecay;
                    else {
                        const e = n.envelopeComputer.envelopeStarts[3];
                        t = 1 - Math.min(1, e * n.stringSustainStart / (p.stringSustainRange - 1))
                    }
                    const e = n.envelopeComputer.envelopeEnds[3];
                    let i = 1 - Math.min(1, e * n.stringSustainEnd / (p.stringSustainRange - 1));
                    n.prevStringDecay = i;
                    const s = l.unisonVoices;
                    for (let t = n.pickedStrings.length; t < s; t++)
                        n.pickedStrings[t] = new Gt;
                    if (n.atNoteStart && !d.continues && !n.forceContinueAtStart)
                        for (const t of n.pickedStrings)
                            t.delayIndex = -1;
                    for (let e = 0; e < s; e++)
                        n.pickedStrings[e].update(this, c, n, e, a, t, i, l.stringSustainType)
                }
            }
        }
        static getLFOAmplitude(t, e) {
            let i = 0;
            for (const n of p.vibratoTypes[t.vibratoType].periodsSeconds)
                i += Math.sin(2 * Math.PI * e / n);
            return i
        }
        static getInstrumentSynthFunction(t) {
            if (1 == t.type) {
                const e = t.algorithm + "_" + t.feedbackType;
                if (null == Jt.fmSynthFunctionCache[e]) {
                    const i = [];
                    for (const e of Jt.fmSourceTemplate)
                        if (-1 != e.indexOf("// CARRIER OUTPUTS")) {
                            const n = [];
                            for (let e = 0; e < p.algorithms[t.algorithm].carrierCount; e++)
                                n.push("operator" + e + "Scaled");
                            i.push(e.replace("/*operator#Scaled*/", n.join(" + ")))
                        } else if (-1 != e.indexOf("// INSERT OPERATOR COMPUTATION HERE"))
                            for (let e = p.operatorCount - 1; e >= 0; e--)
                                for (const n of Jt.operatorSourceTemplate)
                                    if (-1 != n.indexOf("/* + operator@Scaled*/")) {
                                        let s = "";
                                        for (const i of p.algorithms[t.algorithm].modulatedBy[e])
                                            s += " + operator" + (i - 1) + "Scaled";
                                        const o = p.feedbacks[t.feedbackType].indices[e];
                                        if (o.length > 0) {
                                            s += " + feedbackMult * (";
                                            const t = [];
                                            for (const e of o)
                                                t.push("operator" + (e - 1) + "Output");
                                            s += t.join(" + ") + ")"
                                        }
                                        i.push(n.replace(/\#/g, e + "").replace("/* + operator@Scaled*/", s))
                                    } else
                                        i.push(n.replace(/\#/g, e + ""));
                        else if (-1 != e.indexOf("#"))
                            for (let t = 0; t < p.operatorCount; t++)
                                i.push(e.replace(/\#/g, t + ""));
                        else
                            i.push(e);
                    const n = "return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {" + i.join("\n") + "}";
                    Jt.fmSynthFunctionCache[e] = new Function("Config","Synth",n)(p, Jt)
                }
                return Jt.fmSynthFunctionCache[e]
            }
            if (0 == t.type)
                return t.isUsingAdvancedLoopControls ? Jt.loopableChipSynth : Jt.chipSynth;
            if (9 == t.type)
                return Jt.chipSynth;
            if (5 == t.type)
                return Jt.harmonicsSynth;
            if (6 == t.type)
                return Jt.pulseWidthSynth;
            if (8 == t.type)
                return Jt.supersawSynth;
            if (7 == t.type)
                return Jt.pickedStringSynth;
            if (2 == t.type)
                return Jt.noiseSynth;
            if (3 == t.type)
                return Jt.spectrumSynth;
            if (4 == t.type)
                return Jt.drumsetSynth;
            if (10 == t.type)
                return Jt.modSynth;
            if (11 == t.type) {
                const e = t.customAlgorithm.name + "_" + t.customFeedbackType.name;
                if (null == Jt.fm6SynthFunctionCache[e]) {
                    const i = [];
                    for (const e of Jt.fmSourceTemplate)
                        if (-1 != e.indexOf("// CARRIER OUTPUTS")) {
                            const n = [];
                            for (let e = 0; e < t.customAlgorithm.carrierCount; e++)
                                n.push("operator" + e + "Scaled");
                            i.push(e.replace("/*operator#Scaled*/", n.join(" + ")))
                        } else if (-1 != e.indexOf("// INSERT OPERATOR COMPUTATION HERE"))
                            for (let e = p.operatorCount + 2 - 1; e >= 0; e--)
                                for (const n of Jt.operatorSourceTemplate)
                                    if (-1 != n.indexOf("/* + operator@Scaled*/")) {
                                        let s = "";
                                        for (const i of t.customAlgorithm.modulatedBy[e])
                                            s += " + operator" + (i - 1) + "Scaled";
                                        const o = t.customFeedbackType.indices[e];
                                        if (o.length > 0) {
                                            s += " + feedbackMult * (";
                                            const t = [];
                                            for (const e of o)
                                                t.push("operator" + (e - 1) + "Output");
                                            s += t.join(" + ") + ")"
                                        }
                                        i.push(n.replace(/\#/g, e + "").replace("/* + operator@Scaled*/", s))
                                    } else
                                        i.push(n.replace(/\#/g, e + ""));
                        else if (-1 != e.indexOf("#"))
                            for (let t = 0; t < p.operatorCount + 2; t++)
                                i.push(e.replace(/\#/g, t + ""));
                        else
                            i.push(e);
                    const n = "return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {" + i.join("\n") + "}";
                    Jt.fm6SynthFunctionCache[e] = new Function("Config","Synth",n)(p, Jt)
                }
                return Jt.fm6SynthFunctionCache[e]
            }
            throw new Error("Unrecognized instrument type: " + t.type)
        }
        static wrap(t, e) {
            return (t % e + e) % e
        }
        static loopableChipSynth(t, e, i, n, s) {
            const o = T(s.effects) && s.aliases
              , a = t.tempMonoInstrumentSampleBuffer
              , r = s.wave
              , h = s.volumeScale
              , l = o && 8 == s.type ? r.length : r.length - 1;
            let c = Math.max(0, Math.min(l, s.chipWaveLoopEnd))
              , d = Math.max(0, Math.min(c - 1, s.chipWaveLoopStart))
              , p = c - d;
            p < 2 && (d = 0,
            c = l,
            p = l);
            const m = s.chipWaveLoopMode
              , u = s.chipWavePlayBackwards
              , f = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let y = n.phaseDeltas[0] * l
              , b = n.phaseDeltas[1] * l
              , g = n.directions[0]
              , w = n.directions[1]
              , v = n.chipWaveCompletions[0]
              , x = n.chipWaveCompletions[1];
            3 !== m && 2 !== m && 0 !== m || (u ? (g = -1,
            w = -1) : (g = 1,
            w = 1)),
            0 !== m && 1 !== m || (v = 0,
            x = 0);
            let k = n.chipWaveCompletionsLastWave[0]
              , M = n.chipWaveCompletionsLastWave[1];
            const S = 1e3
              , F = +n.phaseDeltaScales[0]
              , C = +n.phaseDeltaScales[1];
            let A = +n.expression;
            const E = +n.expressionDelta;
            let P = Jt.wrap(n.phases[0], 1) * l
              , B = Jt.wrap(n.phases[1], 1) * l
              , I = 0
              , L = 0;
            if (!o) {
                const t = Math.floor(P)
                  , e = Math.floor(B)
                  , i = Jt.wrap(t, l)
                  , n = Jt.wrap(e, l)
                  , s = P - t
                  , o = B - e;
                I = +r[i],
                L = +r[n],
                I += (r[Jt.wrap(i + 1, l)] - I) * s,
                L += (r[Jt.wrap(n + 1, l)] - L) * o
            }
            const D = n.noteFilters
              , z = 0 | n.noteFilterCount;
            let q = +n.initialNoteFilterInput1
              , N = +n.initialNoteFilterInput2;
            const O = Jt.applyFilters
              , R = e + i;
            let $ = n.chipWavePrevWaves[0]
              , H = n.chipWavePrevWaves[1];
            for (let t = e; t < R; t++) {
                v > 0 && v < S && v++,
                x > 0 && x < S && x++;
                let e = 0;
                P += y * g,
                B += b * w,
                2 === m ? (1 === g ? P > l && (v <= 0 && (k = $,
                v++),
                e = 1) : -1 === g && P < 0 && (v <= 0 && (k = $,
                v++),
                e = 1),
                1 === w ? B > l && (x <= 0 && (M = H,
                x++),
                e = 1) : -1 === g && B < 0 && (x <= 0 && (M = H,
                x++),
                e = 1)) : 3 === m ? (1 === g ? P > c && (v <= 0 && (k = $,
                v++),
                e = 1) : -1 === g && P < d && (v <= 0 && (k = $,
                v++),
                e = 1),
                1 === w ? B > c && (x <= 0 && (M = H,
                x++),
                e = 1) : -1 === g && B < d && (x <= 0 && (M = H,
                x++),
                e = 1)) : 0 === m ? (1 === g ? P > c && (P = d + Jt.wrap(P - c, p),
                e = 1) : -1 === g && P < d && (P = c - Jt.wrap(d - P, p),
                e = 1),
                1 === w ? B > c && (B = d + Jt.wrap(B - c, p),
                e = 1) : -1 === w && B < d && (B = c - Jt.wrap(d - B, p),
                e = 1)) : 1 === m && (1 === g ? P > c && (P = c - Jt.wrap(P - c, p),
                g = -1,
                e = 1) : -1 === g && P < d && (P = d + Jt.wrap(d - P, p),
                g = 1,
                e = 1),
                1 === w ? B > c && (B = c - Jt.wrap(B - c, p),
                w = -1,
                e = 1) : -1 === w && B < d && (B = d + Jt.wrap(d - B, p),
                w = 1,
                e = 1));
                let i = 0
                  , n = 0
                  , s = 0;
                if (o) {
                    i = r[Jt.wrap(Math.floor(P), l)],
                    n = r[Jt.wrap(Math.floor(B), l)],
                    $ = i,
                    H = n;
                    const t = v > 0 ? (S - Math.min(v, S)) / S : 1
                      , e = x > 0 ? (S - Math.min(x, S)) / S : 1;
                    s = 0,
                    s += v > 0 ? k * t : i,
                    s += x > 0 ? M * e : n
                } else {
                    const t = Math.floor(P)
                      , o = Math.floor(B)
                      , a = Jt.wrap(t, l)
                      , h = Jt.wrap(o, l);
                    let p = r[a]
                      , u = r[h];
                    const F = P - t
                      , C = B - o;
                    if (p += (r[Jt.wrap(a + 1, l)] - p) * F,
                    u += (r[Jt.wrap(h + 1, l)] - u) * C,
                    (0 !== m || 0 !== d || c !== l) && 0 !== e) {
                        let t = 0
                          , e = 0;
                        const i = Math.max(0, P - y * g)
                          , n = Math.max(0, B - b * w)
                          , s = Math.floor(i)
                          , o = Math.floor(n)
                          , a = Jt.wrap(s, l)
                          , h = Jt.wrap(o, l);
                        t = r[a],
                        e = r[h],
                        t += (r[Jt.wrap(a + 1, l)] - t) * (i - s) * g,
                        e += (r[Jt.wrap(h + 1, l)] - e) * (n - o) * w,
                        I = t,
                        L = e
                    }
                    1 === m && 0 !== e ? (i = $,
                    n = H) : (i = (p - I) / (y * g),
                    n = (u - L) / (b * w)),
                    $ = i,
                    H = n,
                    I = p,
                    L = u;
                    const A = v > 0 ? (S - Math.min(v, S)) / S : 1
                      , E = x > 0 ? (S - Math.min(x, S)) / S : 1;
                    s += v > 0 ? k * A : i,
                    s += x > 0 ? M * E : n * f
                }
                const u = O(s * h, q, N, z, D);
                N = q,
                q = s * h,
                y *= F,
                b *= C;
                const T = u * A;
                A += E,
                a[t] += T
            }
            n.phases[0] = P / l,
            n.phases[1] = B / l,
            n.phaseDeltas[0] = y / l,
            n.phaseDeltas[1] = b / l,
            n.directions[0] = g,
            n.directions[1] = w,
            n.chipWaveCompletions[0] = v,
            n.chipWaveCompletions[1] = x,
            n.chipWavePrevWaves[0] = $,
            n.chipWavePrevWaves[1] = H,
            n.chipWaveCompletionsLastWave[0] = k,
            n.chipWaveCompletionsLastWave[1] = M,
            n.expression = A,
            t.sanitizeFilters(D),
            n.initialNoteFilterInput1 = q,
            n.initialNoteFilterInput2 = N
        }
        static chipSynth(t, e, i, n, s) {
            const o = T(s.effects) && s.aliases
              , a = t.tempMonoInstrumentSampleBuffer
              , r = s.wave
              , h = s.volumeScale
              , l = o && 8 == s.type ? r.length : r.length - 1
              , c = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let d = n.phaseDeltas[0] * l
              , p = n.phaseDeltas[1] * l;
            const m = +n.phaseDeltaScales[0]
              , u = +n.phaseDeltaScales[1];
            let f = +n.expression;
            const y = +n.expressionDelta;
            let b = n.phases[0] % 1 * l
              , g = n.phases[1] % 1 * l;
            const w = n.noteFilters
              , v = 0 | n.noteFilterCount;
            let x = +n.initialNoteFilterInput1
              , k = +n.initialNoteFilterInput2;
            const M = Jt.applyFilters;
            let S = 0
              , F = 0;
            if (!o) {
                const t = 0 | b
                  , e = 0 | g
                  , i = t % l
                  , n = e % l
                  , s = b - t
                  , o = g - e;
                S = +r[i],
                F = +r[n],
                S += (r[i + 1] - S) * s,
                F += (r[n + 1] - F) * o
            }
            const C = e + i;
            for (let t = e; t < C; t++) {
                let e, i, n;
                if (b += d,
                g += p,
                o)
                    e = r[(0 | b) % l],
                    i = r[(0 | g) % l],
                    n = e + i;
                else {
                    const t = 0 | b
                      , s = 0 | g
                      , o = t % l
                      , a = s % l;
                    let h = r[o]
                      , m = r[a];
                    const u = b - t
                      , f = g - s;
                    h += (r[o + 1] - h) * u,
                    m += (r[a + 1] - m) * f,
                    e = (h - S) / d,
                    i = (m - F) / p,
                    S = h,
                    F = m,
                    n = e + i * c
                }
                const s = M(n * h, x, k, v, w);
                k = x,
                x = n * h,
                d *= m,
                p *= u;
                const C = s * f;
                f += y,
                a[t] += C
            }
            n.phases[0] = b / l,
            n.phases[1] = g / l,
            n.phaseDeltas[0] = d / l,
            n.phaseDeltas[1] = p / l,
            n.expression = f,
            t.sanitizeFilters(w),
            n.initialNoteFilterInput1 = x,
            n.initialNoteFilterInput2 = k
        }
        static harmonicsSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer
              , a = s.wave
              , r = a.length - 1
              , h = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let l = n.phaseDeltas[0] * r
              , c = n.phaseDeltas[1] * r;
            const d = +n.phaseDeltaScales[0]
              , p = +n.phaseDeltaScales[1];
            let m = +n.expression;
            const u = +n.expressionDelta;
            let f = n.phases[0] % 1 * r
              , y = n.phases[1] % 1 * r;
            const b = n.noteFilters
              , g = 0 | n.noteFilterCount;
            let w = +n.initialNoteFilterInput1
              , v = +n.initialNoteFilterInput2;
            const x = Jt.applyFilters
              , k = 0 | f
              , M = 0 | y
              , S = k % r
              , F = M % r
              , C = f - k
              , A = y - M;
            let E = +a[S]
              , T = +a[F];
            E += (a[S + 1] - E) * C,
            T += (a[F + 1] - T) * A;
            const P = e + i;
            for (let t = e; t < P; t++) {
                f += l,
                y += c;
                const e = 0 | f
                  , i = 0 | y
                  , n = e % r
                  , s = i % r;
                let k = a[n]
                  , M = a[s];
                const S = f - e
                  , F = y - i;
                k += (a[n + 1] - k) * S,
                M += (a[s + 1] - M) * F;
                const C = (k - E) / l
                  , A = (M - T) / c;
                E = k,
                T = M;
                const P = C + A * h
                  , B = x(P, w, v, g, b);
                v = w,
                w = P,
                l *= d,
                c *= p;
                const I = B * m;
                m += u,
                o[t] += I
            }
            n.phases[0] = f / r,
            n.phases[1] = y / r,
            n.phaseDeltas[0] = l / r,
            n.phaseDeltas[1] = c / r,
            n.expression = m,
            t.sanitizeFilters(b),
            n.initialNoteFilterInput1 = w,
            n.initialNoteFilterInput2 = v
        }
        static pickedStringSynth(t, e, i, n, s) {
            const o = s.unisonVoices;
            let a = Jt.pickedStringFunctionCache[o];
            if (null == a) {
                let t = "return (synth, bufferIndex, runLength, tone, instrumentState) => {";
                t += "\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";
                const e = [];
                for (let t = 0; t < o; t++)
                    e.push("fractionalDelaySample" + t + (1 == t ? " * unisonSign" : ""));
                t += e.join(" + "),
                t += ") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}",
                t = t.replace(/^.*\#.*$/gm, (t => {
                    const e = [];
                    for (let i = 0; i < o; i++)
                        e.push(t.replace(/\#/g, String(i)));
                    return e.join("\n")
                }
                )),
                a = new Function("Config","Synth",t)(p, Jt),
                Jt.pickedStringFunctionCache[o] = a
            }
            a(t, e, i, n, s)
        }
        static effectsSynth(t, e, i, n, s, o) {
            const a = T(o.effects)
              , r = P(o.effects)
              , h = o.eqFilterCount > 0
              , l = B(o.effects)
              , c = I(o.effects)
              , d = L(o.effects)
              , m = D(o.effects);
            let u = 0;
            a && (u |= 1),
            u <<= 1,
            r && (u |= 1),
            u <<= 1,
            h && (u |= 1),
            u <<= 1,
            l && (u |= 1),
            u <<= 1,
            c && (u |= 1),
            u <<= 1,
            d && (u |= 1),
            u <<= 1,
            m && (u |= 1);
            let f = Jt.effectsFunctionCache[u];
            if (null == f) {
                let t = "return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {";
                const e = c || m || d;
                t += "\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",
                e && (t += "\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),
                a && (t += "\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),
                r && (t += "\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),
                h && (t += "\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;"),
                t += "\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",
                l && (t += "\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),
                c && (t += "\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),
                d && (t += "\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),
                m && (t += "\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),
                t += "\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",
                a && (t += "\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),
                r && (t += "\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),
                h && (t += "\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),
                t += "\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",
                t += l ? "\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;" : "\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",
                c && (t += "\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),
                d && (t += "\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    "),
                m && (t += "\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),
                t += "\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",
                e && (t += "\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),
                t += "\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",
                e && (t += "\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;"),
                a && (t += "\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),
                r && (t += "\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;"),
                h && (t += "\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),
                l && (t += "\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;"),
                c && (t += "\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;"),
                d && (t += "\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),
                m && (t += "\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),
                t += "}",
                f = new Function("Config","Synth",t)(p, Jt),
                Jt.effectsFunctionCache[u] = f
            }
            f(t, e, i, n, s, o)
        }
        static pulseWidthSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer
              , a = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let r = n.phaseDeltas[0]
              , h = n.phaseDeltas[1];
            const l = +n.phaseDeltaScales[0]
              , c = +n.phaseDeltaScales[1];
            let d = +n.expression;
            const p = +n.expressionDelta;
            let m = n.phases[0] % 1
              , u = n.phases[1] % 1
              , f = n.pulseWidth;
            const y = n.pulseWidthDelta
              , b = n.noteFilters
              , g = 0 | n.noteFilterCount;
            let w = +n.initialNoteFilterInput1
              , v = +n.initialNoteFilterInput2;
            const x = Jt.applyFilters
              , k = e + i;
            for (let t = e; t < k; t++) {
                const e = m % 1
                  , i = (m + f) % 1
                  , n = u % 1
                  , k = (u + f) % 1;
                let S = i - e
                  , F = k - n;
                if (!s.aliases) {
                    if (e < r)
                        S += .5 * ((M = e / r) + M - M * M - 1);
                    else if (e > 1 - r) {
                        S += .5 * ((M = (e - 1) / r) + M + M * M + 1)
                    }
                    if (i < r)
                        S -= .5 * ((M = i / r) + M - M * M - 1);
                    else if (i > 1 - r) {
                        S -= .5 * ((M = (i - 1) / r) + M + M * M + 1)
                    }
                    if (n < h)
                        F += .5 * ((M = n / h) + M - M * M - 1);
                    else if (n > 1 - h) {
                        F += .5 * ((M = (n - 1) / h) + M + M * M + 1)
                    }
                    if (k < h)
                        F -= .5 * ((M = k / h) + M - M * M - 1);
                    else if (k > 1 - h) {
                        var M;
                        F -= .5 * ((M = (k - 1) / h) + M + M * M + 1)
                    }
                }
                const C = S + F * a
                  , A = x(C, w, v, g, b);
                v = w,
                w = C,
                m += r,
                u += h,
                r *= l,
                h *= c,
                f += y;
                const E = A * d;
                d += p,
                o[t] += E
            }
            n.phases[0] = m,
            n.phases[1] = u,
            n.phaseDeltas[0] = r,
            n.phaseDeltas[1] = h,
            n.expression = d,
            n.pulseWidth = f,
            t.sanitizeFilters(b),
            n.initialNoteFilterInput1 = w,
            n.initialNoteFilterInput2 = v
        }
        static supersawSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer
              , a = 0 | p.supersawVoiceCount;
            let r = n.phaseDeltas[0];
            const h = +n.phaseDeltaScales[0];
            let l = +n.expression;
            const c = +n.expressionDelta;
            let d = n.phases
              , m = +n.supersawDynamism;
            const u = +n.supersawDynamismDelta
              , f = n.supersawUnisonDetunes;
            let y = +n.supersawShape;
            const b = +n.supersawShapeDelta;
            let g = +n.supersawDelayLength;
            const w = +n.supersawDelayLengthDelta
              , v = n.supersawDelayLine
              , x = v.length - 1 >> 0;
            let k = 0 | n.supersawDelayIndex;
            k = (k & x) + v.length;
            const M = n.noteFilters
              , S = 0 | n.noteFilterCount;
            let F = +n.initialNoteFilterInput1
              , C = +n.initialNoteFilterInput2;
            const A = Jt.applyFilters
              , E = e + i;
            for (let t = e; t < E; t++) {
                let e = (d[0] + r) % 1
                  , i = e - .5 * (1 + (a - 1) * m);
                if (!s.aliases)
                    if (e < r)
                        i -= .5 * ((T = e / r) + T - T * T - 1);
                    else if (e > 1 - r) {
                        var T;
                        i -= .5 * ((T = (e - 1) / r) + T + T * T + 1)
                    }
                d[0] = e;
                for (let t = 1; t < a; t++) {
                    const e = r * f[t];
                    let n = (d[t] + e) % 1;
                    if (i += n * m,
                    !s.aliases)
                        if (n < e) {
                            const t = n / e;
                            i -= .5 * (t + t - t * t - 1) * m
                        } else if (n > 1 - e) {
                            const t = (n - 1) / e;
                            i -= .5 * (t + t + t * t + 1) * m
                        }
                    d[t] = n
                }
                v[k & x] = i;
                const n = k - g
                  , p = 0 | n
                  , E = p + 1
                  , P = n - p
                  , B = v[p & x];
                k++;
                const I = i - (B + (v[E & x] - B) * P) * y
                  , L = A(I, F, C, S, M);
                C = F,
                F = I,
                r *= h,
                m += u,
                y += b,
                g += w;
                const D = L * l;
                l += c,
                o[t] += D
            }
            n.phaseDeltas[0] = r,
            n.expression = l,
            n.supersawDynamism = m,
            n.supersawShape = y,
            n.supersawDelayLength = g,
            n.supersawDelayIndex = k,
            t.sanitizeFilters(M),
            n.initialNoteFilterInput1 = F,
            n.initialNoteFilterInput2 = C
        }
        static noiseSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer
              , a = s.wave
              , r = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let h = n.phaseDeltas[0]
              , l = n.phaseDeltas[1];
            const c = +n.phaseDeltaScales[0]
              , d = +n.phaseDeltaScales[1];
            let m = +n.expression;
            const u = +n.expressionDelta;
            let f = n.phases[0] % 1 * p.chipNoiseLength
              , y = n.phases[1] % 1 * p.chipNoiseLength;
            0 == n.phases[0] && (f = Math.random() * p.chipNoiseLength,
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (y = f)),
            0 != n.phases[1] || 1 == s.unisonVoices && 0 == s.unisonSpread && !s.chord.customInterval || (y = Math.random() * p.chipNoiseLength);
            const b = p.chipNoiseLength - 1;
            let g = +n.noiseSampleA
              , w = +n.noiseSampleB;
            const v = n.noteFilters
              , x = 0 | n.noteFilterCount;
            let k = +n.initialNoteFilterInput1
              , M = +n.initialNoteFilterInput2;
            const S = Jt.applyFilters
              , F = Math.min(1, h * s.noisePitchFilterMult)
              , C = Math.min(1, l * s.noisePitchFilterMult)
              , A = e + i;
            for (let t = e; t < A; t++) {
                g += (a[f & b] - g) * F,
                w += (a[y & b] - w) * C;
                const e = g + w * r
                  , i = S(e, k, M, x, v);
                M = k,
                k = e,
                f += h,
                y += l,
                h *= c,
                l *= d;
                const n = i * m;
                m += u,
                o[t] += n
            }
            n.phases[0] = f / p.chipNoiseLength,
            n.phases[1] = y / p.chipNoiseLength,
            n.phaseDeltas[0] = h,
            n.phaseDeltas[1] = l,
            n.expression = m,
            n.noiseSampleA = g,
            n.noiseSampleB = w,
            t.sanitizeFilters(v),
            n.initialNoteFilterInput1 = k,
            n.initialNoteFilterInput2 = M
        }
        static spectrumSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer
              , a = s.wave
              , r = 128
              , h = n.specialIntervalExpressionMult * s.unisonSign;
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (n.phases[1] = n.phases[0]);
            let l = n.phaseDeltas[0] * r
              , c = n.phaseDeltas[1] * r;
            const d = +n.phaseDeltaScales[0]
              , m = +n.phaseDeltaScales[1];
            let u = +n.expression;
            const f = +n.expressionDelta;
            let y = +n.noiseSampleA
              , b = +n.noiseSampleB;
            const g = n.noteFilters
              , w = 0 | n.noteFilterCount;
            let v = +n.initialNoteFilterInput1
              , x = +n.initialNoteFilterInput2;
            const k = Jt.applyFilters;
            let M = n.phases[0] % 1 * p.spectrumNoiseLength
              , S = n.phases[1] % 1 * p.spectrumNoiseLength;
            0 == n.phases[0] && (M = Jt.findRandomZeroCrossing(a, p.spectrumNoiseLength) + l,
            1 != s.unisonVoices || 0 != s.unisonSpread || s.chord.customInterval || (S = M)),
            0 != n.phases[1] || 1 == s.unisonVoices && 0 == s.unisonSpread && !s.chord.customInterval || (S = Jt.findRandomZeroCrossing(a, p.spectrumNoiseLength) + c);
            const F = p.spectrumNoiseLength - 1
              , C = Math.min(1, l)
              , A = Math.min(1, c)
              , E = e + i;
            for (let t = e; t < E; t++) {
                const e = 0 | M
                  , i = 0 | S
                  , n = e & F
                  , s = i & F;
                let r = a[n]
                  , p = a[s];
                const E = M - e
                  , T = S - i;
                r += (a[n + 1] - r) * E,
                p += (a[s + 1] - p) * T,
                y += (r - y) * C,
                b += (p - b) * A;
                const P = y + b * h
                  , B = k(P, v, x, w, g);
                x = v,
                v = P,
                M += l,
                S += c,
                l *= d,
                c *= m;
                const I = B * u;
                u += f,
                o[t] += I
            }
            n.phases[0] = M / p.spectrumNoiseLength,
            n.phases[1] = S / p.spectrumNoiseLength,
            n.phaseDeltas[0] = l / r,
            n.phaseDeltas[1] = c / r,
            n.expression = u,
            n.noiseSampleA = y,
            n.noiseSampleB = b,
            t.sanitizeFilters(g),
            n.initialNoteFilterInput1 = v,
            n.initialNoteFilterInput2 = x
        }
        static drumsetSynth(t, e, i, n, s) {
            const o = t.tempMonoInstrumentSampleBuffer;
            let a = s.getDrumsetWave(n.drumsetPitch);
            const r = Ut.drumsetIndexReferenceDelta(n.drumsetPitch);
            let h = n.phaseDeltas[0] / r;
            const l = +n.phaseDeltaScales[0];
            let c = +n.expression;
            const d = +n.expressionDelta
              , m = n.noteFilters
              , u = 0 | n.noteFilterCount;
            let f = +n.initialNoteFilterInput1
              , y = +n.initialNoteFilterInput2;
            const b = Jt.applyFilters;
            let g = n.phases[0] % 1 * p.spectrumNoiseLength;
            0 == n.phases[0] && (g = Jt.findRandomZeroCrossing(a, p.spectrumNoiseLength) + h);
            const w = p.spectrumNoiseLength - 1
              , v = e + i;
            for (let t = e; t < v; t++) {
                const e = 0 | g
                  , i = e & w;
                let n = a[i];
                const s = g - e;
                n += (a[i + 1] - n) * s;
                const r = n
                  , p = b(r, f, y, u, m);
                y = f,
                f = r,
                g += h,
                h *= l;
                const v = p * c;
                c += d,
                o[t] += v
            }
            n.phases[0] = g / p.spectrumNoiseLength,
            n.phaseDeltas[0] = h * r,
            n.expression = c,
            t.sanitizeFilters(m),
            n.initialNoteFilterInput1 = f,
            n.initialNoteFilterInput2 = y
        }
        static modSynth(t, e, i, n, s) {
            if (!t.song)
                return;
            let o = p.modCount - 1 - n.pitches[0];
            if (s.invalidModulators[o])
                return;
            let a = s.modulators[o]
              , r = [];
            if (p.modulators[s.modulators[o]].forSong)
                r.push(0);
            else if (s.modInstruments[o] == t.song.channels[s.modChannels[o]].instruments.length)
                for (let e = 0; e < t.song.channels[s.modChannels[o]].instruments.length; e++)
                    r.push(e);
            else
                s.modInstruments[o] > t.song.channels[s.modChannels[o]].instruments.length ? null != t.song.getPattern(s.modChannels[o], t.bar) && (r = t.song.getPattern(s.modChannels[o], t.bar).instruments) : r.push(s.modInstruments[o]);
            for (let e = 0; e < r.length; e++) {
                t.setModValue(n.expression, n.expression + n.expressionDelta, s.modChannels[o], r[e], a);
                for (let i = 0; i < t.heldMods.length; i++)
                    p.modulators[s.modulators[o]].forSong ? t.heldMods[i].setting == a && t.setModValue(t.heldMods[i].volume, t.heldMods[i].volume, s.modChannels[o], r[e], a) : t.heldMods[i].channelIndex == s.modChannels[o] && t.heldMods[i].instrumentIndex == r[e] && t.heldMods[i].setting == a && t.setModValue(t.heldMods[i].volume, t.heldMods[i].volume, s.modChannels[o], r[e], a);
                if (a == p.modulators.dictionary["reset arp"].index && 0 == t.tick && n.noteStartPart == t.beat * p.partsPerBeat + t.part)
                    t.channels[s.modChannels[o]].instruments[r[e]].arpTime = 0;
                else if (a == p.modulators.dictionary["next bar"].index)
                    t.wantToSkip = !0;
                else if (a == p.modulators.dictionary["eq filter"].index) {
                    const a = t.song.channels[s.modChannels[o]].instruments[r[e]];
                    if (!a.eqFilterType) {
                        let e = 0 | s.modFilterTypes[o];
                        if (0 == e) {
                            let e = 0;
                            const s = t.getTicksIntoBar() / p.ticksPerPart;
                            for (; n.note.start + n.note.pins[e].time <= s; )
                                e++;
                            let o = (s - n.note.start + i / (t.getSamplesPerTick() * p.ticksPerPart) * p.ticksPerPart - n.note.pins[e - 1].time) / (n.note.pins[e].time - n.note.pins[e - 1].time);
                            null != a.eqSubFilters[n.note.pins[e - 1].size] || null != a.eqSubFilters[n.note.pins[e].size] ? a.tmpEqFilterEnd = Rt.lerpFilters(a.eqSubFilters[n.note.pins[e - 1].size], a.eqSubFilters[n.note.pins[e].size], o) : a.tmpEqFilterEnd = a.eqFilter
                        } else {
                            for (let t = 0; t < p.filterMorphCount; t++)
                                a.tmpEqFilterEnd == a.eqSubFilters[t] && null != a.tmpEqFilterEnd && (a.tmpEqFilterEnd = new Rt,
                                a.tmpEqFilterEnd.fromJsonObject(a.eqSubFilters[t].toJsonObject()));
                            null == a.tmpEqFilterEnd && (a.tmpEqFilterEnd = new Rt,
                            a.tmpEqFilterEnd.fromJsonObject(a.eqFilter.toJsonObject())),
                            a.tmpEqFilterEnd.controlPointCount > Math.floor((e - 1) / 2) && (e % 2 ? a.tmpEqFilterEnd.controlPoints[Math.floor((e - 1) / 2)].freq = n.expression + n.expressionDelta : a.tmpEqFilterEnd.controlPoints[Math.floor((e - 1) / 2)].gain = n.expression + n.expressionDelta)
                        }
                    }
                } else if (a == p.modulators.dictionary["note filter"].index) {
                    const a = t.song.channels[s.modChannels[o]].instruments[r[e]];
                    if (!a.noteFilterType) {
                        let e = 0 | s.modFilterTypes[o];
                        if (0 == e) {
                            let e = 0;
                            const s = t.getTicksIntoBar() / p.ticksPerPart;
                            for (; n.note.start + n.note.pins[e].time <= s; )
                                e++;
                            let o = (s - n.note.start + i / (t.getSamplesPerTick() * p.ticksPerPart) * p.ticksPerPart - n.note.pins[e - 1].time) / (n.note.pins[e].time - n.note.pins[e - 1].time);
                            null != a.noteSubFilters[n.note.pins[e - 1].size] || null != a.noteSubFilters[n.note.pins[e].size] ? a.tmpNoteFilterEnd = Rt.lerpFilters(a.noteSubFilters[n.note.pins[e - 1].size], a.noteSubFilters[n.note.pins[e].size], o) : a.tmpNoteFilterEnd = a.noteFilter
                        } else {
                            for (let t = 0; t < p.filterMorphCount; t++)
                                a.tmpNoteFilterEnd == a.noteSubFilters[t] && null != a.tmpNoteFilterEnd && (a.tmpNoteFilterEnd = new Rt,
                                a.tmpNoteFilterEnd.fromJsonObject(a.noteSubFilters[t].toJsonObject()));
                            null == a.tmpNoteFilterEnd && (a.tmpNoteFilterEnd = new Rt,
                            a.tmpNoteFilterEnd.fromJsonObject(a.noteFilter.toJsonObject())),
                            a.tmpNoteFilterEnd.controlPointCount > Math.floor((e - 1) / 2) && (e % 2 ? a.tmpNoteFilterEnd.controlPoints[Math.floor((e - 1) / 2)].freq = n.expression + n.expressionDelta : a.tmpNoteFilterEnd.controlPoints[Math.floor((e - 1) / 2)].gain = n.expression + n.expressionDelta)
                        }
                    }
                }
            }
        }
        static findRandomZeroCrossing(t, e) {
            let i = Math.random() * e;
            const n = e - 1;
            let s = i & n
              , o = t[s];
            for (let a = 128; a > 0; a--) {
                const a = s + 16 & n
                  , r = t[a];
                if (o * r <= 0) {
                    for (let a = 0; a < 16; a++) {
                        const a = s + 1 & n
                          , r = t[a];
                        if (o * r <= 0) {
                            const t = r - o;
                            i = s,
                            Math.abs(t) > 1e-8 && (i += -o / t),
                            i = Math.max(0, i) % e;
                            break
                        }
                        s = a,
                        o = r
                    }
                    break
                }
                s = a,
                o = r
            }
            return i
        }
        static instrumentVolumeToVolumeMult(t) {
            return t == -p.volumeRange / 2 ? 0 : Math.pow(2, p.volumeLogScale * t)
        }
        static volumeMultToInstrumentVolume(t) {
            return t <= 0 ? -p.volumeRange / 2 : Math.min(p.volumeRange, Math.log(t) / Math.LN2 / p.volumeLogScale)
        }
        static noteSizeToVolumeMult(t) {
            return Math.pow(Math.max(0, t) / p.noteSizeMax, 1.5)
        }
        static volumeMultToNoteSize(t) {
            return Math.pow(Math.max(0, t), 1 / 1.5) * p.noteSizeMax
        }
        static fadeInSettingToSeconds(t) {
            return .0125 * (.95 * t + .05 * t * t)
        }
        static secondsToFadeInSetting(t) {
            return yt(0, p.fadeInRange, Math.round((-.95 + Math.sqrt(.9025 + .2 * t / .0125)) / .1))
        }
        static fadeOutSettingToTicks(t) {
            return p.fadeOutTicks[t]
        }
        static ticksToFadeOutSetting(t) {
            let e = p.fadeOutTicks[0];
            if (t <= e)
                return 0;
            for (let i = 1; i < p.fadeOutTicks.length; i++) {
                let n = p.fadeOutTicks[i];
                if (t <= n)
                    return t < (e + n) / 2 ? i - 1 : i;
                e = n
            }
            return p.fadeOutTicks.length - 1
        }
        static detuneToCents(t) {
            return t - p.detuneCenter
        }
        static centsToDetune(t) {
            return t + p.detuneCenter
        }
        static getOperatorWave(t, e) {
            return 2 != t ? p.operatorWaves[t] : p.pwmOperatorWaves[e]
        }
        getSamplesPerTick() {
            if (null == this.song)
                return 0;
            let t = this.song.getBeatsPerMinute();
            return this.isModActive(p.modulators.dictionary.tempo.index) && (t = this.getModValue(p.modulators.dictionary.tempo.index)),
            this.getSamplesPerTickSpecificBPM(t)
        }
        getSamplesPerTickSpecificBPM(t) {
            const e = t / 60
              , i = p.partsPerBeat * e
              , n = p.ticksPerPart * i;
            return this.samplesPerSecond / n
        }
        static fittingPowerOfTwo(t) {
            return 1 << 32 - Math.clz32(Math.ceil(t) - 1)
        }
        sanitizeFilters(t) {
            let e = !1;
            for (const i of t) {
                const t = Math.abs(i.output1)
                  , n = Math.abs(i.output2);
                if (!(t < 100 && n < 100)) {
                    e = !0;
                    break
                }
                t < ft && (i.output1 = 0),
                n < ft && (i.output2 = 0)
            }
            if (e)
                for (const e of t)
                    e.output1 = 0,
                    e.output2 = 0
        }
        static sanitizeDelayLine(t, e, i) {
            for (; ; ) {
                const n = --e & i
                  , s = Math.abs(t[n]);
                if (Number.isFinite(s) && (0 == s || s >= ft))
                    break;
                t[n] = 0
            }
        }
        static applyFilters(t, e, i, n, s) {
            for (let o = 0; o < n; o++) {
                const n = s[o]
                  , a = n.output1
                  , r = n.output2
                  , h = n.a1
                  , l = n.a2
                  , c = n.b0
                  , d = n.b1
                  , p = n.b2;
                t = c * t + d * e + p * i - h * a - l * r,
                n.a1 = h + n.a1Delta,
                n.a2 = l + n.a2Delta,
                n.useMultiplicativeInputCoefficients ? (n.b0 = c * n.b0Delta,
                n.b1 = d * n.b1Delta,
                n.b2 = p * n.b2Delta) : (n.b0 = c + n.b0Delta,
                n.b1 = d + n.b1Delta,
                n.b2 = p + n.b2Delta),
                n.output2 = a,
                n.output1 = t,
                i = r,
                e = a
            }
            return t
        }
    }
    Jt.tempFilterStartCoefficients = new dt,
    Jt.tempFilterEndCoefficients = new dt,
    Jt.fmSynthFunctionCache = {},
    Jt.fm6SynthFunctionCache = {},
    Jt.effectsFunctionCache = Array(128).fill(void 0),
    Jt.pickedStringFunctionCache = Array(3).fill(void 0),
    Jt.fmSourceTemplate = ("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * " + p.sineWaveLength + ";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * " + p.sineWaveLength + ";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / " + p.sineWaveLength + ";\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / " + p.sineWaveLength + ";\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t").split("\n"),
    Jt.operatorSourceTemplate = ("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & " + p.sineWaveMask + ";\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n");
    class Yt {
        constructor() {
            this.qt = !0
        }
        Nt() {
            this.qt = !1
        }
        isNoop() {
            return this.qt
        }
        commit() {}
    }
    class Qt extends Yt {
        constructor(t) {
            super(),
            this.Ot = t,
            this.Rt = !t
        }
        undo() {
            this.Ot ? (this.$t(),
            this.Rt = !0) : (this.Ht(),
            this.Rt = !1)
        }
        redo() {
            this.Ot ? (this.Ht(),
            this.Rt = !1) : (this.$t(),
            this.Rt = !0)
        }
        _t() {
            return this.Rt
        }
        $t() {
            throw new Error("Change.doForwards(): Override me.")
        }
        Ht() {
            throw new Error("Change.doBackwards(): Override me.")
        }
    }
    class Zt extends Yt {
        constructor() {
            super()
        }
        append(t) {
            t.isNoop() || this.Nt()
        }
    }
    class Xt extends Qt {
        constructor(t) {
            super(!1),
            this.Vt = null == t ? [] : t.concat(),
            this.Gt = !1
        }
        checkFirst() {
            return this.Vt.length > 0 ? this.Vt[0] : null
        }
        append(t) {
            t.isNoop() || (this.Vt[this.Vt.length] = t,
            this.Nt())
        }
        $t() {
            for (let t = 0; t < this.Vt.length; t++)
                this.Vt[t].redo()
        }
        Ht() {
            for (let t = this.Vt.length - 1; t >= 0; t--)
                this.Vt[t].undo()
        }
        isCommitted() {
            return this.Gt
        }
        commit() {
            this.Gt = !0
        }
    }
    function te(t, e) {
        const i = t.every((t => -1 != e.indexOf(t)))
          , n = e.every((e => -1 != t.indexOf(e)));
        return i && n && e.length == t.length
    }
    function ee(t, e, i) {
        const n = new Set(t);
        t.length = 0,
        t.push(...n);
        for (let n = 0; n < t.length; n++)
            t[n] >= e.channels[i].instruments.length && (t.splice(n, 1),
            n--);
        t.length > e.getMaxInstrumentsPerPattern(i) && (t.length = e.getMaxInstrumentsPerPattern(i)),
        t.length <= 0 && (t[0] = 0)
    }
    function ie(t, e) {
        for (const i of t.notes)
            for (const t of i.pitches)
                for (const n of i.pins) {
                    const i = (t + n.interval) % 12;
                    e[i] || (e[i] = !0)
                }
    }
    function ne(t) {
        for (let e = 1; e < t.length - 1; )
            t[e - 1].interval == t[e].interval && t[e].interval == t[e + 1].interval && t[e - 1].size == t[e].size && t[e].size == t[e + 1].size ? t.splice(e, 1) : e++
    }
    function se(t, e, i, n, s) {
        const o = new Tt(-1,i,n,p.noteSizeMax,!1);
        o.pins.length = 0,
        o.pitches.length = 0;
        const a = n - i;
        for (const e of t.pitches)
            o.pitches.push(e);
        for (let i = 0; i < t.pins.length; i++) {
            const n = t.pins[i]
              , s = n.time + e;
            if (s < 0) {
                if (i + 1 >= t.pins.length)
                    throw new Error("Error converting pins in note overflow.");
                const a = t.pins[i + 1]
                  , r = a.time + e;
                if (r > 0) {
                    const t = -s / (r - s);
                    o.pins.push(Et(Math.round(n.interval + t * (a.interval - n.interval)), 0, Math.round(n.size + t * (a.size - n.size))))
                }
            } else if (s <= a)
                o.pins.push(Et(n.interval, s, n.size));
            else {
                if (i < 1)
                    throw new Error("Error converting pins in note overflow.");
                const r = t.pins[i - 1]
                  , h = r.time + e;
                if (h < a) {
                    const t = (a - h) / (s - h);
                    o.pins.push(Et(Math.round(r.interval + t * (n.interval - r.interval)), a, Math.round(r.size + t * (n.size - r.size))))
                }
            }
        }
        const r = o.pins[0].interval;
        for (let t = 0; t < o.pitches.length; t++)
            o.pitches[t] += r;
        for (let t = 0; t < o.pins.length; t++)
            o.pins[t].interval -= r;
        let h = !1;
        if (0 == o.start)
            o.continuesLastPattern = e < 0 || t.continuesLastPattern;
        else if (o.continuesLastPattern = !1,
        s.length > 0 && t.continuesLastPattern) {
            const t = s[s.length - 1];
            if (t.end == o.start && Jt.adjacentNotesHaveMatchingPitches(t, o)) {
                h = !0;
                const e = t.pins[t.pins.length - 1].interval
                  , i = t.end - t.start;
                for (let n = 1; n < o.pins.length; n++) {
                    const s = o.pins[n]
                      , a = Et(s.interval + e, s.time + i, s.size);
                    t.pins.push(a),
                    t.end = t.start + a.time
                }
                ne(t.pins)
            }
        }
        h || s.push(o)
    }
    function oe(t, e) {
        return (t % e + e) % e
    }
    function ae(t, e, i) {
        let n = 0;
        for (let s = i; s <= t; s++)
            n += e(s);
        return n
    }
    function re(t) {
        let e = new Float32Array(64)
          , i = !1;
        const n = 2 * Math.random() + 1 | 0;
        if (1 == n || 3 == n) {
            let t = 2 * Math.random() + .5
              , i = 13 * Math.random() + 3
              , n = 48 * Math.random() - 24;
            for (let s = 0; s < 64; s++)
                e[s] = yt(-24, 25, Math.round(oe(n + (24 * Math.sin((s + n) / i) + s * t), 48) - 24))
        } else if (2 == n) {
            let t = .19 * Math.random() + .06
              , i = 2 * Math.random() + 1
              , n = 48 * Math.random() - 24
              , s = 2 * Math.random() - 1;
            for (let o = 0; o < 64; o++)
                e[o] = yt(-24, 25, Math.round(s * Math.abs(2 * Math.floor(Math.sin(o / i * t + n) * Math.cos(o * i * (t / 2)) * 24)) - 24 * s))
        }
        for (let n = 0; n < 64; n++) {
            t[n] = e[n];
            let s = 1 / 0
              , o = -1 / 0;
            for (let e = 0; e < 64; e++)
                s = Math.min(s, t[e]),
                o = Math.max(o, t[e]);
            o - s >= 7 && (i = !0)
        }
        i || re(t)
    }
    function he(t) {
        let e = new Float32Array(64)
          , i = !1
          , n = Math.round(15 * Math.random() + 15)
          , s = Math.round(3 * Math.random() + 1)
          , o = Math.round(13 * Math.random() + 2);
        for (let t = 0; t < 64; t++) {
            let i = ae(oe(t, n), (t => 1), o);
            e[t] = yt(-24, 25, Math.round(oe(24 * ae(t, (t => i), Math.round(n / s)), 24.0000000000001)))
        }
        for (let n = 0; n < 64; n++) {
            t[n] = e[n];
            let s = 1 / 0
              , o = -1 / 0;
            for (let e = 0; e < 64; e++)
                s = Math.min(s, t[e]),
                o = Math.max(o, t[e]);
            o - s >= 7 && (i = !0)
        }
        i || he(t)
    }
    function le(t) {
        let e = new Float32Array(64)
          , i = !1;
        const n = 2 * Math.random() + 1 | 0;
        if (1 == n) {
            let t = 3 * Math.random()
              , i = .99 * Math.random() - 1
              , n = 9 * Math.random() + 2
              , s = 2 * Math.random() - 1;
            for (let o = 0; o < 64; o++)
                e[o] = yt(-24, 25, 2 * Math.round(Math.abs(s * oe(i / n * n + ae(o / (t * t), (t => n), t * -i) * s, 24))) - 24)
        } else if (2 == n) {
            let t = 3 * Math.random()
              , i = 2 * Math.random() - 1
              , n = 100 * Math.random();
            for (let s = 0; s < 64; s++)
                e[s] = yt(-24, 25, oe(Math.round(24 * oe(ae(s / t, (e => t * n), 0), 25 + i)), 48) - 24)
        }
        for (let n = 0; n < 64; n++) {
            t[n] = e[n];
            let s = 1 / 0
              , o = -1 / 0;
            for (let e = 0; e < 64; e++)
                s = Math.min(s, t[e]),
                o = Math.max(o, t[e]);
            o - s >= 7 && (i = !0)
        }
        i || le(t)
    }
    function ce(t) {
        let e = new Float32Array(64)
          , i = !1;
        for (let t = 0; t < 64; t++) {
            const i = 2 * Math.random() - 1
              , n = 6
              , s = i > 0 ? Math.pow(i, n) : -Math.pow(-i, n);
            e[t] = yt(-24, 25, Math.floor(24 * s))
        }
        for (let n = 0; n < 64; n++) {
            t[n] = e[n];
            let s = 1 / 0
              , o = -1 / 0;
            for (let e = 0; e < 64; e++)
                s = Math.min(s, t[e]),
                o = Math.max(o, t[e]);
            o - s >= 7 && (i = !0)
        }
        i || ce(t)
    }
    function de(t) {
        let e = new Float32Array(64);
        for (let t = 0; t < 64; t++)
            e[t] = yt(-24, 25, (48 * Math.random() | 0) - 24);
        for (let i = 0; i < 64; i++)
            t[i] = e[i]
    }
    class pe extends Zt {
        constructor(t, e, i) {
            super();
            const n = []
              , s = []
              , o = [];
            for (let a = 0; a < t.song.getChannelCount(); a++) {
                const r = t.song.channels[a]
                  , h = new _t;
                a < t.song.pitchChannelCount ? n.push(h) : a < t.song.pitchChannelCount + t.song.noiseChannelCount ? s.push(h) : o.push(h),
                h.muted = r.muted,
                h.octave = r.octave,
                h.name = r.name;
                for (const t of r.instruments)
                    h.instruments.push(t);
                const l = p.partsPerBeat * t.song.beatsPerBar
                  , c = p.partsPerBeat * e;
                let d = -1
                  , m = null;
                for (let e = 0; e < t.song.barCount; e++) {
                    const n = t.song.getPattern(a, e);
                    if (null != n) {
                        const t = e * l;
                        for (const e of n.notes) {
                            const s = e.start + t + i
                              , o = e.end + t + i
                              , a = Math.floor(s / c)
                              , r = Math.ceil(o / c);
                            for (let t = a; t < r; t++) {
                                const i = t * c
                                  , a = Math.max(0, s - i)
                                  , r = Math.min(c, o - i);
                                if (a < r) {
                                    if (d < t || null == m) {
                                        for (d++; d < t; )
                                            h.bars[d] = 0,
                                            d++;
                                        m = new Pt,
                                        h.patterns.push(m),
                                        h.bars[d] = h.patterns.length,
                                        m.instruments.length = 0,
                                        m.instruments.push(...n.instruments)
                                    }
                                    m = h.patterns[h.bars[t] - 1],
                                    se(e, s - i - a, a, r, m.notes)
                                }
                            }
                        }
                    }
                }
            }
            dn(n),
            dn(s),
            dn(o),
            this.append(new ln(t,n,s,o))
        }
    }
    class me extends Qt {
        constructor(t, e) {
            super(!1),
            this.m = t,
            this.Wt = e,
            this.jt = this.Wt.start,
            this.Ut = this.Wt.end,
            this.Kt = this.Wt.start,
            this.Jt = this.Wt.end,
            this.Yt = this.Wt.pins,
            this.Qt = [],
            this.Zt = this.Wt.pitches,
            this.Xt = [],
            this.te = this.Wt.continuesLastPattern,
            this.ee = this.Wt.continuesLastPattern
        }
        ie(t) {
            for (let t = 0; t < this.Qt.length - 1; )
                this.Qt[t].time >= this.Qt[t + 1].time ? this.Qt.splice(t, 1) : t++;
            ne(this.Qt);
            const e = this.Qt[0].interval
              , i = this.Qt[0].time;
            for (let t = 0; t < this.Zt.length; t++)
                this.Xt[t] = this.Zt[t] + e;
            for (let t = 0; t < this.Qt.length; t++)
                this.Qt[t].interval -= e,
                this.Qt[t].time -= i;
            this.Kt = this.jt + i,
            this.Jt = this.Kt + this.Qt[this.Qt.length - 1].time,
            null != t && (this.ee = t),
            0 != this.Kt && (this.ee = !1),
            this.$t(),
            this.Nt()
        }
        $t() {
            this.Wt.pins = this.Qt,
            this.Wt.pitches = this.Xt,
            this.Wt.start = this.Kt,
            this.Wt.end = this.Jt,
            this.Wt.continuesLastPattern = this.ee,
            null != this.m && this.m.notifier.changed()
        }
        Ht() {
            this.Wt.pins = this.Yt,
            this.Wt.pitches = this.Zt,
            this.Wt.start = this.jt,
            this.Wt.end = this.Ut,
            this.Wt.continuesLastPattern = this.te,
            null != this.m && this.m.notifier.changed()
        }
    }
    class ue extends Yt {
        constructor(t, e) {
            super();
            const i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()].customChipWave;
            var n = !0;
            for (let t = 0; t < i.length; t++)
                i[t] != e[t] && (n = !1,
                t = i.length);
            if (0 == n) {
                let i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
                for (let t = 0; t < e.length; t++)
                    i.customChipWave[t] = e[t];
                let n = 0;
                for (let t = 0; t < i.customChipWave.length; t++)
                    n += i.customChipWave[t];
                const s = n / i.customChipWave.length;
                let o = 0
                  , a = 0;
                for (let t = 0; t < i.customChipWave.length; t++)
                    o += a,
                    a = i.customChipWave[t] - s,
                    i.customChipWaveIntegral[t] = o;
                i.customChipWaveIntegral[64] = 0,
                i.preset = i.type,
                t.notifier.changed(),
                this.Nt()
            }
        }
    }
    class fe extends Yt {
        constructor(t, e, i, n) {
            if (super(),
            "algorithm" == n) {
                const n = t.song.channels[t.channel].instruments[t.getCurrentInstrument()].customAlgorithm.modulatedBy;
                var s = !0;
                if (i != t.song.channels[t.channel].instruments[t.getCurrentInstrument()].customAlgorithm.carrierCount)
                    s = !1;
                else
                    for (let t = 0; t < n.length; t++) {
                        if (n[t].length != e[t].length) {
                            s = !1;
                            break
                        }
                        for (let i = 0; i < n[t].length; i++)
                            if (n[t][i] != e[t][i]) {
                                s = !1;
                                break
                            }
                    }
                if (0 == s) {
                    let n = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
                    n.customAlgorithm.set(i, e),
                    n.algorithm6Op = 0,
                    t.notifier.changed(),
                    this.Nt()
                }
            } else if ("feedback" == n) {
                const i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()].customFeedbackType.indices;
                s = !0;
                for (let t = 0; t < i.length; t++) {
                    if (i[t].length != e[t].length) {
                        s = !1;
                        break
                    }
                    for (let n = 0; n < i[t].length; n++)
                        if (i[t][n] != e[t][n]) {
                            s = !1;
                            break
                        }
                }
                if (!s) {
                    let i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
                    i.customFeedbackType.set(e),
                    i.feedbackType6Op = 0,
                    t.notifier.changed(),
                    this.Nt()
                }
            }
        }
    }
    class ye extends Yt {
        constructor(t, e) {
            super();
            const i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
            if (i.preset != e) {
                const n = N.instrumentToPreset(e)
                  , s = null != n ? n : N.valueToPreset(e);
                if (null != s)
                    if (null != s.customType)
                        i.type = s.customType,
                        !p.instrumentTypeHasSpecialInterval[i.type] && p.chords[i.chord].customInterval && (i.chord = 0),
                        i.clearInvalidEnvelopeTargets();
                    else if (null != s.settings) {
                        const e = i.volume
                          , n = i.pan
                          , o = i.panDelay;
                        i.fromJsonObject(s.settings, t.song.getChannelIsNoise(t.channel), t.song.getChannelIsMod(t.channel), 0 == t.song.rhythm || 2 == t.song.rhythm, t.song.rhythm >= 2),
                        i.volume = e,
                        i.pan = n,
                        i.panDelay = o,
                        i.effects = 4 | i.effects
                    }
                i.preset = e,
                t.notifier.changed(),
                this.Nt()
            }
        }
    }
    class be extends Yt {
        constructor(t) {
            function e(t) {
                let e = 0;
                for (const i of t)
                    e += i.weight;
                let i = Math.random() * e;
                for (const e of t)
                    if (i -= e.weight,
                    i <= 0)
                        return e.item;
                return t[Math.random() * t.length | 0].item
            }
            function i(t, i, n, s) {
                const o = [];
                for (let e = t; e <= i; e++)
                    o.push({
                        item: e,
                        weight: 1 / (Math.pow((e - n) / s, 2) + 1)
                    });
                return e(o)
            }
            super();
            class n {
                constructor(t, e, i, n, s, o) {
                    this.chance = t,
                    this.type = e,
                    this.minFreq = i,
                    this.maxFreq = n,
                    this.centerHz = s,
                    this.centerGain = o
                }
            }
            function s(t, e) {
                t.reset();
                const n = [];
                for (const s of e) {
                    if (Math.random() > s.chance)
                        continue;
                    const e = new Ot;
                    e.type = s.type,
                    e.freq = i(s.minFreq, s.maxFreq, Ot.getRoundedSettingValueFromHz(s.centerHz), 1 / p.filterFreqStep),
                    e.gain = i(0, p.filterGainRange - 1, p.filterGainCenter + s.centerGain, 2 / p.filterGainStep),
                    2 == e.type && e.gain == p.filterGainCenter || (n.includes(e.freq) || (n.push(e.freq),
                    t.controlPoints[t.controlPointCount] = e,
                    t.controlPointCount++))
                }
            }
            const o = t.song.getChannelIsNoise(t.channel)
              , a = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
            a.effects = 4,
            a.aliases = !1,
            a.envelopeCount = 0;
            const r = Ot.getRoundedSettingValueFromHz(700)
              , h = p.filterFreqRange - 1;
            if (s(a.eqFilter, [new n(.8,0,r,h,4e3,-1), new n(.4,1,0,r - 1,250,-1), new n(.5,2,0,h,2e3,0), new n(.4,2,0,h,1400,0), new n(.3,2,0,h,1e3,0), new n(.2,2,0,h,500,0)]),
            o) {
                const l = e([{
                    item: 2,
                    weight: 3
                }, {
                    item: 3,
                    weight: 3
                }, {
                    item: 4,
                    weight: 1
                }]);
                function c(t) {
                    let e = 0;
                    for (const i of t)
                        i > e && (e = i);
                    for (let i = 0; i < t.length; i++)
                        t[i] = p.harmonicsMax * t[i] / e
                }
                switch (a.preset = a.type = l,
                4 != l && (a.fadeIn = Math.random() < .8 ? 0 : i(0, p.fadeInRange - 1, 0, 2),
                a.fadeOut = i(0, p.fadeOutTicks.length - 1, p.fadeOutNeutral, 2)),
                Math.random() < .1 && (a.effects |= 1024,
                a.transition = p.transitions.dictionary[e([{
                    item: "normal",
                    weight: 30
                }, {
                    item: "interrupt",
                    weight: 1
                }, {
                    item: "slide",
                    weight: 2
                }])].index),
                Math.random() < .2 && (a.effects |= 2048,
                a.chord = p.chords.dictionary[e([{
                    item: "strum",
                    weight: 2
                }, {
                    item: "arpeggio",
                    weight: 1
                }])].index),
                Math.random() < .1 && (a.pitchShift = i(0, p.pitchShiftRange - 1, p.pitchShiftCenter, 2),
                a.pitchShift != p.pitchShiftCenter && (a.effects |= 128,
                a.addEnvelope(p.instrumentAutomationTargets.dictionary.pitchShift.index, 0, p.envelopes.dictionary[e([{
                    item: "flare 1",
                    weight: 2
                }, {
                    item: "flare 2",
                    weight: 1
                }, {
                    item: "flare 3",
                    weight: 1
                }, {
                    item: "twang 1",
                    weight: 16
                }, {
                    item: "twang 2",
                    weight: 8
                }, {
                    item: "twang 3",
                    weight: 4
                }, {
                    item: "tremolo1",
                    weight: 1
                }, {
                    item: "tremolo2",
                    weight: 1
                }, {
                    item: "tremolo3",
                    weight: 1
                }, {
                    item: "decay 1",
                    weight: 4
                }, {
                    item: "decay 2",
                    weight: 2
                }, {
                    item: "decay 3",
                    weight: 1
                }])].index))),
                Math.random() < .1 && (a.effects |= 512,
                a.vibrato = i(0, p.echoSustainRange - 1, p.echoSustainRange >> 1, 2),
                a.vibrato = p.vibratos.dictionary[e([{
                    item: "light",
                    weight: 2
                }, {
                    item: "delayed",
                    weight: 2
                }, {
                    item: "heavy",
                    weight: 1
                }, {
                    item: "shaky",
                    weight: 2
                }])].index),
                Math.random() < .8 && (a.effects |= 32,
                s(a.noteFilter, [new n(1,0,r,h,8e3,-1)]),
                a.addEnvelope(p.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index, 0, p.envelopes.dictionary[e([{
                    item: "punch",
                    weight: 4
                }, {
                    item: "flare 1",
                    weight: 2
                }, {
                    item: "flare 2",
                    weight: 2
                }, {
                    item: "flare 3",
                    weight: 2
                }, {
                    item: "twang 1",
                    weight: 8
                }, {
                    item: "twang 2",
                    weight: 8
                }, {
                    item: "twang 3",
                    weight: 8
                }, {
                    item: "swell 1",
                    weight: 2
                }, {
                    item: "swell 2",
                    weight: 2
                }, {
                    item: "swell 3",
                    weight: 1
                }, {
                    item: "tremolo1",
                    weight: 1
                }, {
                    item: "tremolo2",
                    weight: 1
                }, {
                    item: "tremolo3",
                    weight: 1
                }, {
                    item: "tremolo4",
                    weight: 1
                }, {
                    item: "tremolo5",
                    weight: 1
                }, {
                    item: "tremolo6",
                    weight: 1
                }, {
                    item: "decay 1",
                    weight: 4
                }, {
                    item: "decay 2",
                    weight: 4
                }, {
                    item: "decay 3",
                    weight: 4
                }, {
                    item: "wibble 1",
                    weight: 2
                }, {
                    item: "wibble 2",
                    weight: 2
                }, {
                    item: "wibble 3",
                    weight: 2
                }, {
                    item: "linear 1",
                    weight: 2
                }, {
                    item: "linear 2",
                    weight: 2
                }, {
                    item: "linear 3",
                    weight: 2
                }, {
                    item: "linear-1",
                    weight: 1
                }])].index)),
                Math.random() < .1 && (a.effects |= 8,
                a.distortion = i(1, p.distortionRange - 1, p.distortionRange - 1, 2)),
                Math.random() < .1 && (a.effects |= 16,
                a.bitcrusherFreq = i(0, p.bitcrusherFreqRange - 1, p.bitcrusherFreqRange >> 1, 2),
                a.bitcrusherQuantization = i(0, p.bitcrusherQuantizationRange - 1, p.bitcrusherQuantizationRange >> 1, 2)),
                Math.random() < .1 && (a.effects |= 2,
                a.chorus = i(1, p.chorusRange - 1, p.chorusRange - 1, 1)),
                Math.random() < .1 && (a.echoSustain = i(0, p.echoSustainRange - 1, p.echoSustainRange >> 1, 2),
                a.echoDelay = i(0, p.echoDelayRange - 1, p.echoDelayRange >> 1, 2),
                0 == a.echoSustain && 0 == a.echoDelay || (a.effects |= 64)),
                Math.random() < .5 && (a.effects |= 1,
                a.reverb = i(1, p.reverbRange - 1, 1, 1)),
                2 != l && 3 != l || (a.unison = p.unisons.dictionary[e([{
                    item: "none",
                    weight: 100
                }, {
                    item: "shimmer",
                    weight: 10
                }, {
                    item: "hum",
                    weight: 8
                }, {
                    item: "honky tonk",
                    weight: 6
                }, {
                    item: "dissonant",
                    weight: 2
                }, {
                    item: "fifth",
                    weight: 4
                }, {
                    item: "octave",
                    weight: 5
                }, {
                    item: "bowed",
                    weight: 4
                }, {
                    item: "piano",
                    weight: 10
                }, {
                    item: "warbled",
                    weight: 5
                }, {
                    item: "hecking gosh",
                    weight: 3
                }, {
                    item: "spinner",
                    weight: 6
                }, {
                    item: "detune",
                    weight: 4
                }, {
                    item: "rising",
                    weight: 2
                }, {
                    item: "vibrate",
                    weight: 3
                }, {
                    item: "bass",
                    weight: 2
                }, {
                    item: "recurve",
                    weight: 3
                }, {
                    item: "inject",
                    weight: 2
                }, {
                    item: "FART",
                    weight: 1
                }])].index,
                a.unison != p.unisons.dictionary.none.index && Math.random() > .4 && a.addEnvelope(p.instrumentAutomationTargets.dictionary.unison.index, 0, p.envelopes.dictionary[e([{
                    item: "twang -1",
                    weight: 3
                }, {
                    item: "twang 1",
                    weight: 3
                }, {
                    item: "twang 2",
                    weight: 2
                }, {
                    item: "swell 1",
                    weight: 1
                }, {
                    item: "decay -1",
                    weight: 3
                }, {
                    item: "decay 1",
                    weight: 3
                }, {
                    item: "decay 2",
                    weight: 2
                }, {
                    item: "wibble-1",
                    weight: 2
                }, {
                    item: "wibble 1",
                    weight: 2
                }, {
                    item: "wibble 2",
                    weight: 1
                }, {
                    item: "wibble 3",
                    weight: 1
                }, {
                    item: "linear-2",
                    weight: 2
                }, {
                    item: "linear-1",
                    weight: 2
                }, {
                    item: "linear 1",
                    weight: 2
                }, {
                    item: "linear 2",
                    weight: 1
                }, {
                    item: "linear 3",
                    weight: 1
                }, {
                    item: "rise 1",
                    weight: 1
                }, {
                    item: "rise 2",
                    weight: 1
                }])].index)),
                l) {
                case 2:
                    a.chipNoise = Math.random() * p.chipNoises.length | 0;
                    break;
                case 3:
                    {
                        const d = [ () => {
                            const t = [];
                            for (let e = 0; e < p.spectrumControlPoints; e++)
                                t[e] = Math.random() < .5 ? Math.random() : 0;
                            return t
                        }
                        , () => {
                            let t = 1;
                            const e = [t];
                            for (let i = 1; i < p.spectrumControlPoints; i++)
                                t *= Math.pow(2, Math.random() - .52),
                                e[i] = t;
                            return e
                        }
                        , () => {
                            let t = 1;
                            const e = [t];
                            for (let i = 1; i < p.spectrumControlPoints; i++)
                                t *= Math.pow(2, Math.random() - .52),
                                e[i] = t * Math.random();
                            return e
                        }
                        ]
                          , m = (0,
                        d[Math.random() * d.length | 0])();
                        c(m);
                        for (let u = 0; u < p.spectrumControlPoints; u++)
                            a.spectrumWave.spectrum[u] = Math.round(m[u]);
                        a.spectrumWave.markCustomWaveDirty()
                    }
                    break;
                case 4:
                    for (let f = 0; f < p.drumCount; f++) {
                        a.drumsetEnvelopes[f] = Math.floor(Math.random() * p.envelopes.length);
                        const y = [];
                        let b = Math.floor(3 * Math.random());
                        for (let g = 0; g < p.spectrumControlPoints; g++)
                            y[g] = 0 == b || 3 == b ? .25 * Math.pow(Math.random(), 3) : 1 == b ? Math.pow(Math.random(), f / 8 + 1) : 2 == b ? Math.pow(Math.random(), 2) * (f / 3 + 1) : .25 * Math.pow(Math.random(), 3);
                        c(y);
                        for (let w = 0; w < p.spectrumControlPoints; w++)
                            a.drumsetSpectrumWaves[f].spectrum[w] = Math.round(y[w]);
                        a.drumsetSpectrumWaves[f].markCustomWaveDirty()
                    }
                    break;
                default:
                    throw new Error("Unhandled noise instrument type in random generator.")
                }
            } else {
                const v = e([{
                    item: 0,
                    weight: 2
                }, {
                    item: 6,
                    weight: 2
                }, {
                    item: 8,
                    weight: 2
                }, {
                    item: 9,
                    weight: 2
                }, {
                    item: 5,
                    weight: 2
                }, {
                    item: 7,
                    weight: 2
                }, {
                    item: 3,
                    weight: 2
                }, {
                    item: 1,
                    weight: 2
                }, {
                    item: 11,
                    weight: 2
                }]);
                function x(t) {
                    let e = 0;
                    for (const i of t)
                        i > e && (e = i);
                    for (let i = 0; i < t.length; i++)
                        t[i] = p.harmonicsMax * t[i] / e
                }
                switch (a.preset = a.type = v,
                a.fadeIn = Math.random() < .5 ? 0 : i(0, p.fadeInRange - 1, 0, 2),
                a.fadeOut = i(0, p.fadeOutTicks.length - 1, p.fadeOutNeutral, 2),
                0 != v && 5 != v && 7 != v && 9 != v && 6 != v && 3 != v || (a.unison = p.unisons.dictionary[e([{
                    item: "none",
                    weight: 25
                }, {
                    item: "shimmer",
                    weight: 10
                }, {
                    item: "hum",
                    weight: 8
                }, {
                    item: "honky tonk",
                    weight: 6
                }, {
                    item: "dissonant",
                    weight: 2
                }, {
                    item: "fifth",
                    weight: 4
                }, {
                    item: "octave",
                    weight: 5
                }, {
                    item: "bowed",
                    weight: 4
                }, {
                    item: "piano",
                    weight: 10
                }, {
                    item: "warbled",
                    weight: 5
                }, {
                    item: "hecking gosh",
                    weight: 3
                }, {
                    item: "spinner",
                    weight: 6
                }, {
                    item: "detune",
                    weight: 4
                }, {
                    item: "rising",
                    weight: 2
                }, {
                    item: "vibrate",
                    weight: 3
                }, {
                    item: "bass",
                    weight: 2
                }, {
                    item: "recurve",
                    weight: 3
                }, {
                    item: "inject",
                    weight: 2
                }, {
                    item: "FART",
                    weight: 1
                }])].index,
                a.unisonVoices = p.unisons[a.unison].voices,
                a.unisonSpread = p.unisons[a.unison].spread,
                a.unisonOffset = p.unisons[a.unison].offset,
                a.unisonExpression = p.unisons[a.unison].expression,
                a.unisonSign = p.unisons[a.unison].sign),
                Math.random() < .1 && (a.effects |= 1024,
                a.transition = p.transitions.dictionary[e([{
                    item: "interrupt",
                    weight: 1
                }, {
                    item: "slide",
                    weight: 2
                }])].index),
                Math.random() < .2 && (a.effects |= 2048,
                a.chord = p.chords.dictionary[e([{
                    item: "strum",
                    weight: 2
                }, {
                    item: "arpeggio",
                    weight: 1
                }])].index),
                Math.random() < .05 && (a.pitchShift = i(0, p.pitchShiftRange - 1, p.pitchShiftCenter, 1),
                a.pitchShift != p.pitchShiftCenter && (a.effects |= 128,
                a.addEnvelope(p.instrumentAutomationTargets.dictionary.pitchShift.index, 0, p.envelopes.dictionary[e([{
                    item: "flare 1",
                    weight: 2
                }, {
                    item: "flare 2",
                    weight: 1
                }, {
                    item: "flare 3",
                    weight: 1
                }, {
                    item: "twang 1",
                    weight: 16
                }, {
                    item: "twang 2",
                    weight: 8
                }, {
                    item: "twang 3",
                    weight: 4
                }, {
                    item: "decay 1",
                    weight: 4
                }, {
                    item: "decay 2",
                    weight: 2
                }, {
                    item: "decay 3",
                    weight: 1
                }, {
                    item: "linear 1",
                    weight: 1
                }, {
                    item: "linear 2",
                    weight: 1
                }])].index))),
                Math.random() < .25 && (a.effects |= 512,
                a.vibrato = i(0, p.echoSustainRange - 1, p.echoSustainRange >> 1, 2),
                a.vibrato = p.vibratos.dictionary[e([{
                    item: "light",
                    weight: 2
                }, {
                    item: "delayed",
                    weight: 2
                }, {
                    item: "heavy",
                    weight: 1
                }, {
                    item: "shaky",
                    weight: 2
                }])].index),
                Math.random() < .1 && (a.effects |= 8,
                a.distortion = i(1, p.distortionRange - 1, p.distortionRange - 1, 2)),
                T(a.effects) && Math.random() < .8 ? (a.effects |= 32,
                s(a.noteFilter, [new n(1,0,r,h,2e3,-1), new n(.9,1,0,r - 1,500,-1), new n(.4,2,0,h,1400,0)])) : Math.random() < .5 && (a.effects |= 32,
                s(a.noteFilter, [new n(1,0,r,h,8e3,-1)]),
                a.addEnvelope(p.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index, 0, p.envelopes.dictionary[e([{
                    item: "punch",
                    weight: 6
                }, {
                    item: "flare -1",
                    weight: 1
                }, {
                    item: "flare 1",
                    weight: 2
                }, {
                    item: "flare 2",
                    weight: 4
                }, {
                    item: "flare 3",
                    weight: 2
                }, {
                    item: "twang -1",
                    weight: 1
                }, {
                    item: "twang 1",
                    weight: 2
                }, {
                    item: "twang 2",
                    weight: 4
                }, {
                    item: "twang 3",
                    weight: 4
                }, {
                    item: "swell -1",
                    weight: 4
                }, {
                    item: "swell 1",
                    weight: 4
                }, {
                    item: "swell 2",
                    weight: 2
                }, {
                    item: "swell 3",
                    weight: 1
                }, {
                    item: "tremolo0",
                    weight: 1
                }, {
                    item: "tremolo1",
                    weight: 1
                }, {
                    item: "tremolo2",
                    weight: 1
                }, {
                    item: "tremolo3",
                    weight: 1
                }, {
                    item: "tremolo4",
                    weight: 1
                }, {
                    item: "tremolo5",
                    weight: 1
                }, {
                    item: "tremolo6",
                    weight: 1
                }, {
                    item: "decay -1",
                    weight: 1
                }, {
                    item: "decay 1",
                    weight: 1
                }, {
                    item: "decay 2",
                    weight: 2
                }, {
                    item: "decay 3",
                    weight: 2
                }, {
                    item: "wibble-1",
                    weight: 2
                }, {
                    item: "wibble 1",
                    weight: 4
                }, {
                    item: "wibble 2",
                    weight: 4
                }, {
                    item: "wibble 3",
                    weight: 4
                }, {
                    item: "linear-2",
                    weight: 1
                }, {
                    item: "linear-1",
                    weight: 1
                }, {
                    item: "linear 1",
                    weight: 2
                }, {
                    item: "linear 2",
                    weight: 3
                }, {
                    item: "linear 3",
                    weight: 2
                }, {
                    item: "rise -2",
                    weight: 4
                }, {
                    item: "rise -1",
                    weight: 4
                }, {
                    item: "rise 1",
                    weight: 3
                }, {
                    item: "rise 2",
                    weight: 2
                }, {
                    item: "rise 3",
                    weight: 1
                }])].index)),
                Math.random() < .1 && (a.effects |= 16,
                a.bitcrusherFreq = i(0, p.bitcrusherFreqRange - 1, 0, 2),
                a.bitcrusherQuantization = i(0, p.bitcrusherQuantizationRange - 1, p.bitcrusherQuantizationRange >> 1, 2)),
                Math.random() < .1 && (a.effects |= 2,
                a.chorus = i(1, p.chorusRange - 1, p.chorusRange - 1, 1)),
                Math.random() < .1 && (a.echoSustain = i(0, p.echoSustainRange - 1, p.echoSustainRange >> 1, 2),
                a.echoDelay = i(0, p.echoDelayRange - 1, p.echoDelayRange >> 1, 2),
                0 == a.echoSustain && 0 == a.echoDelay || (a.effects |= 64)),
                Math.random() < .5 && (a.effects |= 1,
                a.reverb = i(1, p.reverbRange - 1, 1, 1)),
                v) {
                case 0:
                    a.chipWave = Math.random() * p.chipWaves.length | 0,
                    a.isUsingAdvancedLoopControls = !1,
                    a.chipWaveLoopStart = 0,
                    a.chipWaveLoopEnd = p.rawRawChipWaves[a.chipWave].samples.length - 1,
                    a.chipWaveLoopMode = 0,
                    a.chipWavePlayBackwards = !1,
                    a.chipWaveStartOffset = 0;
                    break;
                case 6:
                case 8:
                    8 == v && (a.supersawDynamism = i(0, p.supersawDynamismMax, p.supersawDynamismMax, 2),
                    a.supersawSpread = i(0, p.supersawSpreadMax, Math.ceil(p.supersawSpreadMax / 3), 4),
                    a.supersawShape = i(0, p.supersawShapeMax, 0, 4)),
                    a.pulseWidth = i(0, p.pulseWidthRange - 1, p.pulseWidthRange - 1, 2),
                    a.decimalOffset = 0,
                    Math.random() < .6 && a.addEnvelope(p.instrumentAutomationTargets.dictionary.pulseWidth.index, 0, p.envelopes.dictionary[e([{
                        item: "punch",
                        weight: 6
                    }, {
                        item: "flare -1",
                        weight: 1
                    }, {
                        item: "flare 1",
                        weight: 2
                    }, {
                        item: "flare 2",
                        weight: 4
                    }, {
                        item: "flare 3",
                        weight: 2
                    }, {
                        item: "twang -1",
                        weight: 1
                    }, {
                        item: "twang 1",
                        weight: 2
                    }, {
                        item: "twang 2",
                        weight: 4
                    }, {
                        item: "twang 3",
                        weight: 4
                    }, {
                        item: "swell -1",
                        weight: 4
                    }, {
                        item: "swell 1",
                        weight: 4
                    }, {
                        item: "swell 2",
                        weight: 2
                    }, {
                        item: "swell 3",
                        weight: 1
                    }, {
                        item: "tremolo0",
                        weight: 1
                    }, {
                        item: "tremolo1",
                        weight: 1
                    }, {
                        item: "tremolo2",
                        weight: 1
                    }, {
                        item: "tremolo3",
                        weight: 1
                    }, {
                        item: "tremolo4",
                        weight: 1
                    }, {
                        item: "tremolo5",
                        weight: 1
                    }, {
                        item: "tremolo6",
                        weight: 1
                    }, {
                        item: "decay -1",
                        weight: 1
                    }, {
                        item: "decay 1",
                        weight: 1
                    }, {
                        item: "decay 2",
                        weight: 2
                    }, {
                        item: "decay 3",
                        weight: 2
                    }, {
                        item: "wibble-1",
                        weight: 2
                    }, {
                        item: "wibble 1",
                        weight: 4
                    }, {
                        item: "wibble 2",
                        weight: 4
                    }, {
                        item: "wibble 3",
                        weight: 4
                    }, {
                        item: "linear-2",
                        weight: 1
                    }, {
                        item: "linear-1",
                        weight: 1
                    }, {
                        item: "linear 1",
                        weight: 2
                    }, {
                        item: "linear 2",
                        weight: 3
                    }, {
                        item: "linear 3",
                        weight: 2
                    }, {
                        item: "rise -2",
                        weight: 4
                    }, {
                        item: "rise -1",
                        weight: 4
                    }, {
                        item: "rise 1",
                        weight: 3
                    }, {
                        item: "rise 2",
                        weight: 2
                    }, {
                        item: "rise 3",
                        weight: 1
                    }])].index);
                    break;
                case 7:
                case 5:
                    {
                        7 == v && (a.stringSustain = Math.random() * p.stringSustainRange | 0);
                        const k = [ () => {
                            const t = [];
                            for (let e = 0; e < p.harmonicsControlPoints; e++)
                                t[e] = Math.random() < .4 ? Math.random() : 0;
                            return t[8 * Math.random() | 0] = Math.pow(Math.random(), .25),
                            t
                        }
                        , () => {
                            let t = 1;
                            const e = [t];
                            for (let i = 1; i < p.harmonicsControlPoints; i++)
                                t *= Math.pow(2, Math.random() - .55),
                                e[i] = t;
                            return e
                        }
                        , () => {
                            let t = 1;
                            const e = [t];
                            for (let i = 1; i < p.harmonicsControlPoints; i++)
                                t *= Math.pow(2, Math.random() - .55),
                                e[i] = t * Math.random();
                            return e
                        }
                        ]
                          , M = (0,
                        k[Math.random() * k.length | 0])();
                        x(M);
                        for (let S = 0; S < p.harmonicsControlPoints; S++)
                            a.harmonicsWave.harmonics[S] = Math.round(M[S]);
                        a.harmonicsWave.markCustomWaveDirty()
                    }
                    break;
                case 3:
                    {
                        const F = [];
                        for (let C = 0; C < p.spectrumControlPoints; C++) {
                            const A = 0 == C || 7 == C || 11 == C || 14 == C || 16 == C || 18 == C || 21 == C;
                            F[C] = A ? Math.pow(Math.random(), .25) : .5 * Math.pow(Math.random(), 3)
                        }
                        x(F);
                        for (let E = 0; E < p.spectrumControlPoints; E++)
                            a.spectrumWave.spectrum[E] = Math.round(F[E]);
                        a.spectrumWave.markCustomWaveDirty()
                    }
                    break;
                case 11:
                case 1:
                    {
                        1 == v ? (a.algorithm = Math.random() * p.algorithms.length | 0,
                        a.feedbackType = Math.random() * p.feedbacks.length | 0) : (a.algorithm6Op = Math.random() * (p.algorithms6Op.length - 1) + 1 | 0,
                        a.customAlgorithm.fromPreset(a.algorithm6Op),
                        a.feedbackType6Op = Math.random() * (p.feedbacks6Op.length - 1) + 1 | 0,
                        a.customFeedbackType.fromPreset(a.feedbackType6Op));
                        const P = 1 == v ? p.algorithms[a.algorithm] : p.algorithms6Op[a.algorithm6Op];
                        for (let B = 0; B < P.carrierCount; B++)
                            a.operators[B].frequency = i(0, p.operatorFrequencies.length - 1, 0, 3),
                            a.operators[B].amplitude = i(0, p.operatorAmplitudeMax, p.operatorAmplitudeMax - 1, 2),
                            a.operators[B].waveform = p.operatorWaves.dictionary[e([{
                                item: "sine",
                                weight: 10
                            }, {
                                item: "triangle",
                                weight: 6
                            }, {
                                item: "pulse width",
                                weight: 6
                            }, {
                                item: "sawtooth",
                                weight: 3
                            }, {
                                item: "ramp",
                                weight: 3
                            }, {
                                item: "trapezoid",
                                weight: 4
                            }, {
                                item: "quasi-sine",
                                weight: 2
                            }])].index,
                            2 == a.operators[B].waveform && (a.operators[B].pulseWidth = e([{
                                item: 0,
                                weight: 3
                            }, {
                                item: 1,
                                weight: 5
                            }, {
                                item: 2,
                                weight: 7
                            }, {
                                item: 3,
                                weight: 10
                            }, {
                                item: 4,
                                weight: 15
                            }, {
                                item: 5,
                                weight: 25
                            }, {
                                item: 6,
                                weight: 15
                            }, {
                                item: 7,
                                weight: 10
                            }, {
                                item: 8,
                                weight: 7
                            }, {
                                item: 9,
                                weight: 5
                            }, {
                                item: 9,
                                weight: 3
                            }]));
                        for (let I = P.carrierCount; I < p.operatorCount + (11 == v ? 2 : 0); I++)
                            a.operators[I].frequency = i(3, p.operatorFrequencies.length - 1, 0, 3),
                            a.operators[I].amplitude = Math.pow(Math.random(), 2) * p.operatorAmplitudeMax | 0,
                            a.envelopeCount < p.maxEnvelopeCount && Math.random() < .4 && a.addEnvelope(p.instrumentAutomationTargets.dictionary.operatorAmplitude.index, I, p.envelopes.dictionary[e([{
                                item: "punch",
                                weight: 2
                            }, {
                                item: "flare -1",
                                weight: 1
                            }, {
                                item: "flare 1",
                                weight: 2
                            }, {
                                item: "flare 2",
                                weight: 2
                            }, {
                                item: "flare 3",
                                weight: 2
                            }, {
                                item: "twang -1",
                                weight: 1
                            }, {
                                item: "twang 1",
                                weight: 2
                            }, {
                                item: "twang 2",
                                weight: 2
                            }, {
                                item: "twang 3",
                                weight: 2
                            }, {
                                item: "swell -1",
                                weight: 2
                            }, {
                                item: "swell 1",
                                weight: 2
                            }, {
                                item: "swell 2",
                                weight: 2
                            }, {
                                item: "swell 3",
                                weight: 1
                            }, {
                                item: "tremolo0",
                                weight: 1
                            }, {
                                item: "tremolo1",
                                weight: 1
                            }, {
                                item: "tremolo2",
                                weight: 1
                            }, {
                                item: "tremolo3",
                                weight: 1
                            }, {
                                item: "tremolo4",
                                weight: 1
                            }, {
                                item: "tremolo5",
                                weight: 1
                            }, {
                                item: "tremolo6",
                                weight: 1
                            }, {
                                item: "decay -1",
                                weight: 1
                            }, {
                                item: "decay 1",
                                weight: 1
                            }, {
                                item: "decay 2",
                                weight: 2
                            }, {
                                item: "decay 3",
                                weight: 2
                            }, {
                                item: "wibble-1",
                                weight: 2
                            }, {
                                item: "wibble 1",
                                weight: 2
                            }, {
                                item: "wibble 2",
                                weight: 2
                            }, {
                                item: "wibble 3",
                                weight: 2
                            }, {
                                item: "linear-2",
                                weight: 1
                            }, {
                                item: "linear-1",
                                weight: 1
                            }, {
                                item: "linear 1",
                                weight: 2
                            }, {
                                item: "linear 2",
                                weight: 2
                            }, {
                                item: "linear 3",
                                weight: 1
                            }, {
                                item: "rise -2",
                                weight: 2
                            }, {
                                item: "rise -1",
                                weight: 2
                            }, {
                                item: "rise 1",
                                weight: 2
                            }, {
                                item: "rise 2",
                                weight: 2
                            }, {
                                item: "rise 3",
                                weight: 1
                            }])].index),
                            a.operators[I].waveform = p.operatorWaves.dictionary[e([{
                                item: "sine",
                                weight: 10
                            }, {
                                item: "triangle",
                                weight: 6
                            }, {
                                item: "pulse width",
                                weight: 6
                            }, {
                                item: "sawtooth",
                                weight: 3
                            }, {
                                item: "ramp",
                                weight: 3
                            }, {
                                item: "trapezoid",
                                weight: 4
                            }, {
                                item: "quasi-sine",
                                weight: 2
                            }])].index,
                            2 == a.operators[I].waveform && (a.operators[I].pulseWidth = e([{
                                item: 0,
                                weight: 3
                            }, {
                                item: 1,
                                weight: 5
                            }, {
                                item: 2,
                                weight: 7
                            }, {
                                item: 3,
                                weight: 10
                            }, {
                                item: 4,
                                weight: 15
                            }, {
                                item: 5,
                                weight: 25
                            }, {
                                item: 6,
                                weight: 15
                            }, {
                                item: 7,
                                weight: 10
                            }, {
                                item: 8,
                                weight: 7
                            }, {
                                item: 9,
                                weight: 5
                            }, {
                                item: 9,
                                weight: 3
                            }]));
                        a.feedbackAmplitude = Math.pow(Math.random(), 3) * p.operatorAmplitudeMax | 0,
                        a.envelopeCount < p.maxEnvelopeCount && Math.random() < .4 && a.addEnvelope(p.instrumentAutomationTargets.dictionary.feedbackAmplitude.index, 0, p.envelopes.dictionary[e([{
                            item: "none",
                            weight: 4
                        }, {
                            item: "punch",
                            weight: 2
                        }, {
                            item: "flare -1",
                            weight: 1
                        }, {
                            item: "flare 1",
                            weight: 2
                        }, {
                            item: "flare 2",
                            weight: 2
                        }, {
                            item: "flare 3",
                            weight: 2
                        }, {
                            item: "twang -1",
                            weight: 1
                        }, {
                            item: "twang 1",
                            weight: 2
                        }, {
                            item: "twang 2",
                            weight: 2
                        }, {
                            item: "twang 3",
                            weight: 2
                        }, {
                            item: "swell -1",
                            weight: 2
                        }, {
                            item: "swell 1",
                            weight: 2
                        }, {
                            item: "swell 2",
                            weight: 2
                        }, {
                            item: "swell 3",
                            weight: 1
                        }, {
                            item: "tremolo0",
                            weight: 1
                        }, {
                            item: "tremolo1",
                            weight: 1
                        }, {
                            item: "tremolo2",
                            weight: 1
                        }, {
                            item: "tremolo3",
                            weight: 1
                        }, {
                            item: "tremolo4",
                            weight: 1
                        }, {
                            item: "tremolo5",
                            weight: 1
                        }, {
                            item: "tremolo6",
                            weight: 1
                        }, {
                            item: "decay -1",
                            weight: 1
                        }, {
                            item: "decay 1",
                            weight: 1
                        }, {
                            item: "decay 2",
                            weight: 2
                        }, {
                            item: "decay 3",
                            weight: 2
                        }, {
                            item: "wibble-1",
                            weight: 2
                        }, {
                            item: "wibble 1",
                            weight: 2
                        }, {
                            item: "wibble 2",
                            weight: 2
                        }, {
                            item: "wibble 3",
                            weight: 2
                        }, {
                            item: "linear-2",
                            weight: 1
                        }, {
                            item: "linear-1",
                            weight: 1
                        }, {
                            item: "linear 1",
                            weight: 2
                        }, {
                            item: "linear 2",
                            weight: 2
                        }, {
                            item: "linear 3",
                            weight: 1
                        }, {
                            item: "rise -2",
                            weight: 2
                        }, {
                            item: "rise -1",
                            weight: 2
                        }, {
                            item: "rise 1",
                            weight: 2
                        }, {
                            item: "rise 2",
                            weight: 2
                        }, {
                            item: "rise 3",
                            weight: 1
                        }])].index)
                    }
                    break;
                case 9:
                    {
                        let L = new Float32Array(64)
                          , D = new Float32Array(65);
                        e([{
                            item: re,
                            weight: 4
                        }, {
                            item: he,
                            weight: 4
                        }, {
                            item: le,
                            weight: 3
                        }, {
                            item: ce,
                            weight: 2
                        }, {
                            item: de,
                            weight: 1
                        }])(L);
                        let z = 0;
                        for (let R = 0; R < L.length; R++)
                            z += L[R];
                        const q = z / L.length;
                        let N = 0
                          , O = 0;
                        for (let $ = 0; $ < L.length; $++)
                            N += O,
                            O = L[$] - q,
                            D[$] = N;
                        D[64] = 0,
                        a.customChipWave = L,
                        a.customChipWaveIntegral = D
                    }
                    break;
                default:
                    throw new Error("Unhandled pitched instrument type in random generator.")
                }
            }
            t.notifier.changed(),
            this.Nt()
        }
    }
    class ge extends Yt {
        constructor(t, e) {
            super();
            const i = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
            i.transition != e && (this.Nt(),
            i.transition = e,
            i.preset = i.type,
            t.notifier.changed())
        }
    }
    class we extends Yt {
        constructor(t, e, i) {
            super();
            let n = t.song.channels[t.channel].instruments[t.getCurrentInstrument()];
            null != i && (n = i);
            const s = n.effects
              , o = 0 != (s & 1 << e)
              , a = o ? s & ~(1 << e) : s | 1 << e;
            n.effects = a,
            2 != e && (n.preset = n.type),
            3 == e && o && (n.aliases = !1),
            o && n.clearInvalidEnvelopeTargets(),
            this.Nt(),
            t.notifier.changed()
        }
    }
    class ve extends Yt {
        constructor(t, e, i, n, s, o) {
            if (super(),
            e > t.song.patternsPerChannel)
                throw new Error("invalid pattern");
            for (let a = i; a < i + s; a++)
                for (let i = n; i < n + o; i++)
                    t.song.channels[i].bars[a] != e && (t.song.channels[i].bars[a] = e,
                    this.Nt());
            if (n >= t.song.pitchChannelCount + t.song.noiseChannelCount) {
                const e = t.getCurrentPattern();
                t.viewedInstrument[n] = null != e ? e.instruments[0] : 0
            }
            t.notifier.changed()
        }
    }
    class xe extends Yt {
        constructor(t, e, i) {
            if (super(),
            t.song.barCount != e) {
                for (const n of t.song.channels)
                    if (i) {
                        for (; n.bars.length < e; )
                            n.bars.unshift(0);
                        t.song.barCount > e && n.bars.splice(0, t.song.barCount - e)
                    } else {
                        for (; n.bars.length < e; )
                            n.bars.push(0);
                        n.bars.length = e
                    }
                if (i) {
                    const i = e - t.song.barCount;
                    t.bar = Math.max(0, t.bar + i),
                    (i < 0 || t.barScrollPos > 0) && (t.barScrollPos = Math.max(0, t.barScrollPos + i)),
                    t.song.loopStart = Math.max(0, t.song.loopStart + i)
                }
                t.bar = Math.min(t.bar, e - 1),
                t.song.loopLength = Math.min(e, t.song.loopLength),
                t.song.loopStart = Math.min(e - t.song.loopLength, t.song.loopStart),
                t.song.barCount = e,
                t.notifier.changed(),
                this.Nt()
            }
        }
    }
    class ke extends Yt {
        constructor(t, e, i) {
            super();
            const n = Math.min(p.barCountMax, t.song.barCount + i);
            if (0 != (i = n - t.song.barCount)) {
                for (const i of t.song.channels)
                    for (; i.bars.length < n; )
                        i.bars.splice(e, 0, 0);
                t.song.barCount = n,
                t.bar += i,
                t.barScrollPos += i,
                t.song.loopStart >= e ? t.song.loopStart += i : t.song.loopStart + t.song.loopLength >= e && (t.song.loopLength += i),
                t.notifier.changed(),
                this.Nt()
            }
        }
    }
    class Me extends Yt {
        constructor(t, e, i) {
            super();
            for (const n of t.song.channels)
                n.bars.splice(e, i),
                0 == n.bars.length && n.bars.push(0);
            t.song.barCount = Math.max(1, t.song.barCount - i),
            t.bar = Math.max(0, t.bar - i),
            t.barScrollPos = Math.max(0, t.barScrollPos - i),
            t.song.loopStart >= e ? t.song.loopStart = Math.max(0, t.song.loopStart - i) : t.song.loopStart + t.song.loopLength > e && (t.song.loopLength -= i),
            t.song.loopLength = Math.max(1, Math.min(t.song.barCount - t.song.loopStart, t.song.loopLength)),
            t.notifier.changed(),
            this.Nt()
        }
    }
    class Se extends Yt {
        constructor(t, e, i, n, s, o, a, r) {
            super(),
            t.song.limitRatio = e,
            t.song.compressionRatio = i,
            t.song.limitThreshold = n,
            t.song.compressionThreshold = s,
            t.song.limitRise = o,
            t.song.limitDecay = a,
            t.song.masterGain = r,
            t.notifier.changed(),
            this.Nt()
        }
    }
    class Fe extends Yt {
        constructor(t, e, i, n) {
            super(),
            t.song.channels.splice(e + n, 0, ...t.song.channels.splice(e, i - e + 1)),
            i = Math.max(i, e);
            for (let s = t.song.pitchChannelCount + t.song.noiseChannelCount; s < t.song.getChannelCount(); s++)
                for (let o = 0; o < t.song.channels[s].instruments.length; o++) {
                    let a = t.song.channels[s].instruments[o];
                    for (let t = 0; t < p.modCount; t++)
                        a.modChannels[t] >= e && a.modChannels[t] <= i ? a.modChannels[t] += n : a.modChannels[t] >= e + n && a.modChannels[t] <= i + n && (a.modChannels[t] -= n * (i - e + 1))
                }
            t.notifier.changed(),
            this.Nt()
        }
    }
